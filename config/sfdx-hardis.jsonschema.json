{
  "$id": "http://github.com/hardisgroupcom/sfdx-hardis.json",
  "$schema": "http://json-schema.org/draft-07/schema",
  "additionalProperties": false,
  "definitions": {
    "enum_notification_types": {
      "enum": [
        "AUDIT_TRAIL",
        "APEX_TESTS",
        "BACKUP",
        "DEPLOYMENT",
        "LEGACY_API",
        "LINT_ACCESS",
        "UNUSED_METADATAS",
        "METADATA_STATUS",
        "MISSING_ATTRIBUTES",
        "UNUSED_LICENSES",
        "RELEASE_UPDATES"
      ],
      "enumNames": [
        "Audit Trail",
        "Apex Tests",
        "Backup",
        "Deployment",
        "Legacy API",
        "Lint Access",
        "Unused Metadatas",
        "Metadata Status",
        "Missing Attributes",
        "Unused Licenses",
        "Release Updates"
      ],
      "type": "string"
    },
    "enum_monitoring_commands": {
      "enum": [
        "AUDIT_TRAIL",
        "LEGACY_API",
        "LINT_ACCESS",
        "UNUSED_METADATAS",
        "METADATA_STATUS",
        "MISSING_ATTRIBUTES",
        "UNUSED_LICENSES",
        "RELEASE_UPDATES"
      ],
      "enumNames": [
        "Audit Trail",
        "Legacy API",
        "Lint Access",
        "Unused Metadatas",
        "Metadata Status",
        "Missing Attributes",
        "Unused Licenses",
        "Release Updates"
      ],
      "type": "string"
    }
  },
  "description": "Configuration file definition for sfdx-hardis Salesforce DX plugin",
  "properties": {
    "allowedOrgTypes": {
      "$id": "#/properties/allowedOrgTypes",
      "description": "Types of Salesforce Orgs allowed for config & development. If not set, Sandbox Orgs and Scratch Orgs are allowed by default",
      "examples": [
        [
          "sandbox"
        ]
      ],
      "items": {
        "type": "string",
        "enum": [
          "sandbox",
          "scratch"
        ],
        "enumNames": [
          "Sandbox Orgs",
          "Scratch Orgs"
        ]
      },
      "title": "Allowed org types",
      "type": "array"
    },
    "autoCleanTypes": {
      "$id": "#/properties/autoCleanTypes",
      "description": "When saving/publishing a User Story, sfdx-hardis can automatically clean the sources before submitting a Pull Request.\nSelect the cleanings that will be automatically applied on your project.",
      "docUrl": "https://sfdx-hardis.cloudity.com/salesforce-ci-cd-config-cleaning/",
      "examples": [
        [
          "dashboards",
          "datadotcom",
          "destructivechanges"
        ]
      ],
      "items": {
        "type": "string",
        "enum": [
          "caseentitlement",
          "checkPermissions",
          "dashboards",
          "datadotcom",
          "destructivechanges",
          "flowPositions",
          "localfields",
          "listViewsMine",
          "minimizeProfiles",
          "productrequest",
          "sensitiveMetadatas",
          "systemDebug",
          "v60"
        ],
        "enumNames": [
          "Case Entitlement",
          "Check Permissions",
          "Dashboards",
          "Data.com",
          "Destructive Changes",
          "Flow Positions",
          "Local Fields",
          "List Views Mine",
          "Minimize Profiles",
          "Product Request",
          "Sensitive Metadatas",
          "System Debug",
          "v60"
        ]
      },
      "title": "Auto-Cleaning types",
      "type": "array"
    },
    "autoRemoveUserPermissions": {
      "$id": "#/properties/autoRemoveUserPermissions",
      "description": "When your dev sandbox is using the next SF Platform version, sometimes some permissions on Profiles exist on the next version but not the current one.\nTo avoid issues, you can force the removal of such permissions when Saving/Publishing a User Story\nExample:\n- EnableCommunityAppLauncher\n- OmnichannelInventorySync",
      "docUrl": "https://sfdx-hardis.cloudity.com/hardis/work/save/#command-behavior",
      "examples": [
        [
          "EnableCommunityAppLauncher",
          "FieldServiceAccess",
          "OmnichannelInventorySync"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Auto-Remove User Permissions on profiles",
      "type": "array"
    },
    "autoRetrieveWhenPull": {
      "$id": "#/properties/autoRetrieveWhenPull",
      "description": "Sometimes, SF Cli forgets to pull some metadata updates, like Custom Application for example.\nsfdx-hardis can automatically retrieve named metadatas to avoid issues.\nExample:\n- CustomApplication:MyApp1\n- CustomApplication:MyApp2\nWorks also with full metadata types (ex: CustomApplication)",
      "docUrl": "https://sfdx-hardis.cloudity.com/hardis/scratch/pull/#command-behavior",
      "examples": [
        [
          "CustomApplication"
        ],
        [
          "CustomApplication:MyApp1",
          "CustomApplication:MyApp2"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Auto-Retrieve when pull",
      "type": "array"
    },
    "apexTestsMinCoverageOrgWide": {
      "$id": "#/properties/apexTestsMinCoverageOrgWide",
      "default": 75.0,
      "description": "Minimum percentage of apex code coverage accepted.\n75.0% by default, but if you are on a clean project, it's better to define 80.0, 95.0 or 90.0 ðŸ˜Ž",
      "examples": [
        80.0,
        95.0
      ],
      "title": "Minimum Apex Tests coverage % accepted for a deployment",
      "type": "number"
    },
    "availableProjects": {
      "$id": "#/properties/availableProjects",
      "description": "List of business projects that are managed in the same repository.\nIf defined, when creating a new User Story, it will be prompted to the contributor then used to create the git branch name.\nIf a value contains a comma, the left part will be used for key and the right part as label for the users.",
      "examples": [
        [
          "sales_cloud",
          "service_cloud",
          "community"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Available projects",
      "type": "array"
    },
    "availableTargetBranches": {
      "$id": "#/properties/availableTargetBranches",
      "description": "List of git branches that can be used as target for Pull Requests.\nContributors will be prompt to select one of these target branch when creating a new User Story\nA classic example on a project with BUILD & RUN in parallel is to have preprod and integration as available target branches.\nIf defined, makes obsolete the parameter Default Pull Request target branch.",
      "examples": [
        [
          "preprod",
          "integration"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Available PR/MR target branches",
      "type": "array"
    },
    "branchPrefixChoices": {
      "$id": "#/properties/branchPrefixChoices",
      "description": "When calling hardis:work:new, you can override the default branch prefixes. Input title, value and description for each of them",
      "default": [
        {
          "title": "Feature",
          "value": "feat",
          "description": "New feature, evolution of an existing feature... If you don't know, just select Feature"
        },
        {
          "title": "Debug",
          "value": "fix",
          "description": "A bug has been identified and you are the right person to solve it !"
        }
      ],
      "examples": [
        [
          {
            "title": "Feature",
            "value": "feat",
            "description": "New feature, evolution of an existing feature... If you don't know, just select Feature"
          },
          {
            "title": "Debug",
            "value": "fix",
            "description": "A bug has been identified and you are the right person to solve it !"
          }
        ]
      ],
      "title": "New branches prefixes choices",
      "type": "array"
    },
    "cleanXmlPatterns": {
      "$id": "#/properties/cleanXmlPatterns",
      "examples": [
        [
          {
            "globPattern": "/**/*.flexipage-meta.xml",
            "xpaths": [
              "//ns:flexiPageRegions//ns:name[contains(text(),'dashboardName')]"
            ]
          },
          {
            "globPattern": "/**/*.layout-meta.xml",
            "xpaths": [
              "//ns:relatedLists//ns:relatedList[contains(text(),'RelatedSolutionList')]"
            ]
          }
        ]
      ],
      "description": "List of patterns to automatically clean XML files",
      "items": {
        "$id": "#/properties/cleanXmlPatterns/items",
        "type": "object",
        "additionalProperties": false,
        "description": "Clean XML pattern and xpaths",
        "properties": {
          "globPattern": {
            "$id": "#/properties/cleanXmlPatterns/items/properties/globPattern",
            "description": "Glob pattern to identify XML files to clean",
            "examples": [
              "/**/*.flexipage-meta.xml"
            ],
            "title": "Glob pattern",
            "type": "string"
          },
          "xpaths": {
            "$id": "#/properties/cleanXmlPatterns/items/properties/xpaths",
            "description": "XPaths to identify elements to remove",
            "examples": [
              [
                "//ns:flexiPageRegions//ns:name[contains(text(),'dashboardName')]"
              ]
            ],
            "title": "XPath list",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "globPattern",
          "xpaths"
        ]
      },
      "title": "Clean XML Patterns",
      "type": "array"
    },
    "commandsPreDeploy": {
      "$id": "#/properties/commandsPreDeploy",
      "description": "List of commands to run before a deployment",
      "examples": [
        [
          {
            "id": "knowledgeUnassign",
            "label": "Remove KnowledgeUser right to the user who has it",
            "command": "sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json"
          },
          {
            "id": "knowledgeAssign",
            "label": "Assign Knowledge user to desired username",
            "command": "sf data update record --sobject User --where \"Username='deployment-user@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json"
          }
        ]
      ],
      "items": {
        "$id": "#/properties/commandsPreDeploy/items",
        "type": "object",
        "additionalProperties": false,
        "description": "Command definition",
        "properties": {
          "id": {
            "$id": "#/properties/commandsPreDeploy/items/properties/id",
            "description": "Identifier of the command (can be any string)",
            "title": "Id",
            "type": "string"
          },
          "label": {
            "$id": "#/properties/commandsPreDeploy/items/properties/label",
            "description": "Label of the command (what does it do ?)",
            "title": "Label",
            "type": "string"
          },
          "command": {
            "$id": "#/properties/commandsPreDeploy/items/properties/command",
            "description": "Command line to run",
            "title": "Command",
            "type": "string"
          }
        },
        "title": "Command"
      },
      "required": [
        "id",
        "label",
        "command"
      ],
      "title": "Commands Pre-Deployment",
      "type": "array"
    },
    "commandsPostDeploy": {
      "$id": "#/properties/commandsPostDeploy",
      "description": "List of commands to run after a deployment",
      "examples": [
        [
          {
            "id": "knowledgeUnassign",
            "label": "Remove KnowledgeUser right to the user who has it",
            "command": "sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json"
          },
          {
            "id": "knowledgeAssign",
            "label": "Assign Knowledge user to desired username",
            "command": "sf data update record --sobject User --where \"Username='admin-user@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json"
          }
        ]
      ],
      "items": {
        "$id": "#/properties/commandsPostDeploy/items",
        "type": "object",
        "additionalProperties": false,
        "description": "Command definition",
        "properties": {
          "id": {
            "$id": "#/properties/commandsPostDeploy/items/properties/id",
            "description": "Identifier of the command (can be any string)",
            "title": "Id",
            "type": "string"
          },
          "label": {
            "$id": "#/properties/commandsPostDeploy/items/properties/label",
            "description": "Label of the command (what does it do ?)",
            "title": "Label",
            "type": "string"
          },
          "command": {
            "$id": "#/properties/commandsPostDeploy/items/properties/command",
            "description": "Command line to run",
            "title": "Command",
            "type": "string"
          },
          "context": {
            "$id": "#/properties/commandsPostDeploy/items/properties/context",
            "description": "Context when the command must be run",
            "title": "Context",
            "default": "all",
            "type": "string",
            "enum": [
              "all",
              "check-deployment-only",
              "process-deployment-only"
            ],
            "enumNames": [
              "All",
              "Check Deployment Only",
              "Process Deployment Only"
            ],
            "examples": [
              "all",
              "check-deployment-only",
              "process-deployment-only"
            ]
          },
          "skipIfError": {
            "$id": "#/properties/commandsPostDeploy/items/properties/skipIfError",
            "description": "Do not run the command if there is a deployment error",
            "title": "Skip if error",
            "default": "false",
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "label",
          "command"
        ],
        "title": "Command"
      },
      "title": "Commands Post-Deployment",
      "type": "array"
    },
    "customCommands": {
      "$id": "#/properties/customCommands",
      "description": "List of custom commands for VsCode SFDX-Hardis extension",
      "examples": [
        [
          {
            "id": "custom-menu",
            "label": "Custom commands",
            "commands": [
              {
                "id": "generate-manifest-xml",
                "label": "Generate manifest",
                "icon": "file.svg",
                "tooltip": "Generates a manifest package.xml using local sfdx source files",
                "command": "sf project generate manifest --source-path force-app --name myNewManifest"
              },
              {
                "id": "list-all-orgs",
                "label": "List all orgs",
                "icon": "salesforce.svg",
                "tooltip": "List all orgs that has already been authenticated using sfdx",
                "command": "sf org list --all"
              }
            ]
          },
          {
            "id": "custom-menu-2",
            "label": "Another custom menu",
            "commands": [
              {
                "id": "echo",
                "label": "Echo something",
                "icon": "user.svg",
                "tooltip": "Useless commands just to show that we can use not sfdx commands too",
                "command": "echo \"Something\""
              }
            ]
          }
        ]
      ],
      "items": {
        "$id": "#/properties/customCommands/items",
        "type": "object",
        "additionalProperties": false,
        "description": "Custom command definition",
        "properties": {
          "id": {
            "$id": "#/properties/customCommands/items/properties/id",
            "description": "Identifier of the menu (can be any string)",
            "title": "Id",
            "type": "string"
          },
          "label": {
            "$id": "#/properties/customCommands/items/properties/label",
            "description": "Label of the menu",
            "title": "Label",
            "type": "string"
          },
          "commands": {
            "$id": "#/properties/customCommands/items/properties/commands",
            "description": "List of commands of the menu",
            "items": {
              "$id": "#/properties/customCommands/items/properties/commands/items/properties",
              "type": "object",
              "additionalProperties": false,
              "description": "Custom command definition",
              "properties": {
                "id": {
                  "$id": "#/properties/customCommands/items/properties/commands/items/properties/id",
                  "description": "Identifier of the command (can be any string)",
                  "title": "Id",
                  "type": "string"
                },
                "label": {
                  "$id": "#/properties/customCommands/items/properties/commands/items/properties/label",
                  "description": "Label of the command that will appear in menu",
                  "title": "Label",
                  "type": "string"
                },
                "icon": {
                  "$id": "#/properties/customCommands/items/properties/commands/items/properties/icon",
                  "description": "Icon (can be any of svg icons of this list: https://github.com/hardisgroupcom/vscode-sfdx-hardis/tree/master/resources",
                  "title": "Icon",
                  "type": "string"
                },
                "tooltip": {
                  "$id": "#/properties/customCommands/items/properties/commands/items/properties/tooltip",
                  "description": "Text that will appear when user will hover the command",
                  "title": "Tooltip",
                  "type": "string"
                },
                "command": {
                  "$id": "#/properties/customCommands/items/properties/commands/items/properties/command",
                  "description": "Command line to run when clicking on the menu",
                  "title": "Command",
                  "type": "string"
                },
                "helpUrl": {
                  "$id": "#/properties/customCommands/items/properties/commands/items/properties/helpUrl",
                  "description": "URL for help page of the command",
                  "title": "Help url",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "label",
                "command"
              ]
            },
            "title": "Label",
            "type": "array"
          }
        },
        "required": [
          "id",
          "label"
        ]
      },
      "title": "Custom commands",
      "type": "array"
    },
    "customCommandsPosition": {
      "$id": "#/properties/customCommandsPosition",
      "description": "Position of custom commands in the menu (first or last)",
      "default": "first",
      "enum": [
        "first",
        "last"
      ],
      "enumNames": [
        "First",
        "Last"
      ],
      "examples": [
        "first",
        "last"
      ],
      "title": "Custom commands position",
      "type": "string"
    },
    "customOrgColors": {
      "$id": "#/properties/customOrgColors",
      "additionalProperties": true,
      "description": "Custom colors set by VsCode SFDX Hardis",
      "title": "Custom Org Colors",
      "type": "object"
    },
    "customPlugins": {
      "$id": "#/properties/customPlugins",
      "description": "List of additional plugins that will be displayed in VsCode SFDX-Hardis Dependencies panel",
      "examples": [
        [
          {
            "name": "mo-dx-plugin",
            "helpUrl": "https://github.com/msrivastav13/mo-dx-plugin"
          },
          {
            "name": "shane-sfdx-plugins",
            "helpUrl": "https://github.com/mshanemc/shane-sfdx-plugins"
          }
        ]
      ],
      "items": {
        "$id": "#/properties/customPlugins/items",
        "type": "object",
        "additionalProperties": false,
        "description": "Plugin definition",
        "properties": {
          "name": {
            "$Id": "#/properties/customPlugins/items/properties/name",
            "description": "Name of the plugin npm package",
            "examples": [
              "mo-dx-plugin",
              "shane-sfdx-plugins"
            ],
            "title": "Name",
            "type": "string"
          },
          "helpUrl": {
            "$Id": "#/properties/customPlugins/items/properties/helpUrl",
            "description": "Url of plugin documentation",
            "examples": [
              "https://github.com/msrivastav13/mo-dx-plugin",
              "https://github.com/mshanemc/shane-sfdx-plugins"
            ],
            "title": "Name",
            "type": "string"
          }
        },
        "title": "Plugin"
      },
      "title": "Custom plugins",
      "type": "array"
    },
    "dataPackages": {
      "$id": "#/properties/dataPackages",
      "description": "List of data packages",
      "items": {
        "$id": "#/properties/dataPackages/items",
        "type": "object",
        "additionalProperties": false,
        "description": "Data package",
        "properties": {
          "dataPath": {
            "$id": "#/properties/dataPackages/items/properties/dataPath",
            "description": "Path to SFDMU project",
            "title": "SFDMU Data project path",
            "type": "string"
          },
          "importInScratchOrgs": {
            "$id": "#/properties/dataPackages/items/properties/importInScratchOrgs",
            "description": "Path to SFDMU project",
            "title": "SFDMU Data project path",
            "type": "boolean"
          }
        },
        "required": [
          "dataPath",
          "importInScratchOrgs"
        ]
      },
      "title": "Data packages",
      "type": "array"
    },
    "defaultPackageInstallationKey": {
      "$id": "#/properties/defaultPackageInstallationKey",
      "description": "When generating a new package version protected with password, use this value as default package installation key",
      "examples": [
        "hardis",
        "myPassword",
        "dFGGF43656YfdFDG{{{dhgfh:::;FSEDSFd78"
      ],
      "title": "Default package installation key",
      "type": "string"
    },
    "developmentBranch": {
      "$id": "#/properties/developmentBranch",
      "default": "developpement",
      "description": "When creating a new sfdx-hardis User Story, this git branch is used as base to create the feature/debug sub branch. The merge request will later have this branch as target.",
      "docUrl": "https://sfdx-hardis.cloudity.com/hardis/work/new/",
      "examples": [
        "developpement",
        "dev_lot2",
        "hotfixes"
      ],
      "title": "Default Pull Request/Merge Request target branch when you create a new User Story.",
      "type": "string"
    },
    "deploymentPlan": {
      "$id": "#/properties/deploymentPlan",
      "description": "Deployment plan that will be performed during deployments. Can be based on packageXmlFile for sources or on dataPath for sfdmu data deployments",
      "examples": [
        {
          "packages": [
            {
              "label": "Import EmailTemplate records",
              "dataPath": "scripts/data/EmailTemplate",
              "order": -21
            },
            {
              "label": "Deploy EmailTemplate",
              "packageXmlFile": "manifest/splits/packageXmlEmails.xml",
              "order": -20
            },
            {
              "label": "Deploy Flow-Workflow",
              "packageXmlFile": "manifest/splits/packageXmlFlowWorkflow.xml",
              "order": 6
            }
          ]
        }
      ],
      "properties": {
        "packages": {
          "$id": "#/properties/deploymentPlan/properties/packages",
          "description": "During deployment, main package.xml will be split into these packages. Can also contain data packages",
          "examples": [
            [
              {
                "label": "Import EmailTemplate records",
                "dataPath": "scripts/data/EmailTemplate",
                "order": -21
              },
              {
                "label": "Deploy EmailTemplate",
                "packageXmlFile": "manifest/splits/packageXmlEmails.xml",
                "order": -20
              }
            ]
          ],
          "items": {
            "$id": "#/properties/install/properties/packages/items",
            "type": "object",
            "additionalProperties": false,
            "description": "Source or data package to deploy",
            "properties": {
              "dataPath": {
                "$id": "#/properties/install/properties/packages/items/dataPath",
                "examples": [
                  "scripts/data/EmailTemplate"
                ],
                "title": "Path to SFDMU data project to deploy",
                "type": "string"
              },
              "label": {
                "$id": "#/properties/install/properties/packages/items/label",
                "examples": [
                  "Deploy EmailTemplate",
                  "Import EmailTemplate records"
                ],
                "title": "Source or data package label",
                "type": "string"
              },
              "order": {
                "$id": "#/properties/install/properties/packages/items/order",
                "examples": [
                  -20,
                  13,
                  50
                ],
                "title": "Execution order in deployment plan",
                "type": "number"
              },
              "packageXmlFile": {
                "$id": "#/properties/install/properties/packages/items/packageXmlFile",
                "examples": [
                  "manifest/splits/packageXmlEmails.xml"
                ],
                "title": "Path to package.xml file to use for deployment",
                "type": "string"
              },
              "waitAfter": {
                "$id": "#/properties/install/properties/packages/items/waitAfter",
                "description": "Delay to wait before installing the next package",
                "examples": [
                  10,
                  20
                ],
                "title": "Wait after install (seconds)",
                "type": "number"
              }
            }
          },
          "required": [
            "label",
            "order"
          ],
          "title": "List of packages to deploy",
          "type": "array"
        }
      },
      "title": "Deployment plan",
      "type": "object"
    },
    "devHubAlias": {
      "$id": "#/properties/devHubAlias",
      "default": "",
      "description": "Dev Hub alias, usually DevHub_ProjectName",
      "examples": [
        "DevHub_MyClientMyProject",
        "DevHub_GoogleGmail",
        "DevHub_AppleIWatch"
      ],
      "title": "Dev Hub org alias",
      "type": "string"
    },
    "devHubInstanceUrl": {
      "$id": "#/properties/devHubInstanceUrl",
      "default": "https://login.salesforce.com",
      "description": "Dev Hub instance URL used for authenticating to DevHub from CI jobs",
      "examples": [
        "DevHub_MyClientMyProject"
      ],
      "title": "Dev Hub Instance URL",
      "type": "string"
    },
    "devHubUsername": {
      "$id": "#/properties/devHubUsername",
      "default": "",
      "description": "Dev Hub username, used to authenticate to DevHub from CI jobs",
      "examples": [
        "cicd-user@myclient.com",
        "scratch-user@google.fr",
        "scratch-user@apple.fr"
      ],
      "title": "Dev Hub Username",
      "type": "string"
    },
    "docDeployToCloudflare": {
      "$id": "#/properties/docDeployToCloudflare",
      "default": false,
      "description": "Automatically deploy MkDocs HTML documentation from CI/CD Workflows to Cloudflare",
      "examples": [
        true
      ],
      "title": "Doc: Deploy to Cloudflare",
      "type": "boolean"
    },
    "docDeployToOrg": {
      "$id": "#/properties/docDeployToOrg",
      "default": false,
      "description": "Automatically deploy MkDocs HTML documentation from CI/CD Workflows to Salesforce org as static resource",
      "examples": [
        true
      ],
      "title": "Doc: Deploy to Salesforce Org",
      "type": "boolean"
    },
    "extends": {
      "$id": "#/properties/extends",
      "description": "You can base your local sfdx-hardis configuration on a remote config file. That allows you to have the same config base for all your projects",
      "examples": [
        "https://raw.githubusercontent.com/worldcompany/shared-config/main/.sfdx-hardis.yml"
      ],
      "title": "Extends remote configuration URL",
      "type": "string"
    },
    "initPermissionSets": {
      "$id": "#/properties/initPermissionSets",
      "description": "When creating a scratch org, Admin user will be automatically assigned to those permission sets",
      "examples": [
        [
          "MyPermissionSet",
          "MyPermissionSetGroup"
        ]
      ],
      "items": {
        "$id": "#/properties/initPermissionSets/items",
        "type": [
          "object",
          "string"
        ],
        "additionalProperties": false,
        "description": "Permission Set or Permission Set Group",
        "properties": {
          "name": {
            "$Id": "#/properties/initPermissionSets/items/properties/name",
            "description": "Permission Set or Permission Set Group name",
            "examples": [
              [
                "MyPermissionSet",
                "MyPermissionSetGroup",
                "MyPermissionSetGroup2"
              ]
            ],
            "title": "Name",
            "type": "string"
          }
        }
      },
      "title": "Initial Permission Sets",
      "type": "array"
    },
    "installedPackages": {
      "$id": "#/properties/installedPackages",
      "description": "Defines the list of packages installed on the project. Use ",
      "examples": [
        [
          {
            "Id": "0A30N000000ALWrSAO",
            "SubscriberPackageId": "033b0000000Pf2AAAS",
            "SubscriberPackageName": "Declarative Lookup Rollup Summaries Tool",
            "SubscriberPackageNamespace": "dlrs",
            "SubscriberPackageVersionId": "04t0N000000IyYrQAK",
            "SubscriberPackageVersionName": "2.11",
            "SubscriberPackageVersionNumber": "2.11.0.1",
            "installOnScratchOrgs": false,
            "installDuringDeployments": true,
            "installationkey": "MyInstallationKey"
          },
          {
            "Id": "0A35r000000GveVCAS",
            "SubscriberPackageId": "0330o000000B3vIAAS",
            "SubscriberPackageName": "Files Attachment Notes",
            "SubscriberPackageNamespace": "fan_astrea",
            "SubscriberPackageVersionId": "04t0o000003nRWAAA2",
            "SubscriberPackageVersionName": "Summer2021",
            "SubscriberPackageVersionNumber": "1.22.0.2",
            "installOnScratchOrgs": true,
            "installDuringDeployments": true
          }
        ]
      ],
      "items": {
        "$id": "#/properties/installedPackages/items",
        "type": "object",
        "additionalProperties": false,
        "description": "Salesforce package info (managed, unlocked or unmanaged)",
        "properties": {
          "Id": {
            "$Id": "#/properties/install/properties/packages/items/Id",
            "examples": [
              "0A35r000000GveVCAS"
            ],
            "title": "(unused) PackageId",
            "type": "string"
          },
          "SubscriberPackageId": {
            "$Id": "#/properties/install/properties/packages/items/SubscriberPackageId",
            "examples": [
              "033b0000000Pf2AAAS"
            ],
            "title": "Subscriber Package Id",
            "type": "string"
          },
          "SubscriberPackageName": {
            "$Id": "#/properties/install/properties/packages/items/SubscriberPackageName",
            "examples": [
              "Files Attachment Notes"
            ],
            "title": "Subscriber Package Name",
            "type": "string"
          },
          "SubscriberPackageNamespace": {
            "$Id": "#/properties/install/properties/packages/items/SubscriberPackageNamespace",
            "examples": [
              "fan_astrea"
            ],
            "title": "Subscriber Package NameSpace",
            "type": [
              "string",
              "null"
            ]
          },
          "SubscriberPackageVersionId": {
            "$Id": "#/properties/install/properties/packages/items/SubscriberPackageVersionId",
            "examples": [
              "04t0o000003nRWAAA2"
            ],
            "title": "Subscriber Version Id (IMPORTANT)",
            "type": "string"
          },
          "SubscriberPackageVersionName": {
            "$Id": "#/properties/install/properties/packages/items/SubscriberPackageVersionName",
            "examples": [
              "Summer2021"
            ],
            "title": "Subscriber Version Name",
            "type": "string"
          },
          "SubscriberPackageVersionNumber": {
            "$Id": "#/properties/install/properties/packages/items/SubscriberPackageVersionNumber",
            "examples": [
              "1.22.0.2"
            ],
            "title": "Subscriber Version Number",
            "type": "string"
          },
          "installDuringDeployments": {
            "$Id": "#/properties/install/properties/packages/items/installDuringDeployments",
            "default": false,
            "description": "If true, during deployments this package will be installed in target org if not installed yet",
            "examples": [
              true,
              false
            ],
            "title": "Install during deployments",
            "type": "boolean"
          },
          "installOnScratchOrgs": {
            "$Id": "#/properties/install/properties/packages/items/installOnScratchOrgs",
            "default": false,
            "description": "If true, this package will be installed when creating a new scratch org with sfdx-hardis",
            "examples": [
              true,
              false
            ],
            "title": "Install on scratch orgs",
            "type": "boolean"
          },
          "installationkey": {
            "$Id": "#/properties/install/properties/packages/items/installationkey",
            "examples": [
              "MyInstallationKey",
              "4FzkMzUSwFfP#@"
            ],
            "description": "Installation key for key-protected package",
            "title": "Package installation key",
            "type": "string"
          }
        },
        "required": [
          "SubscriberPackageVersionId"
        ],
        "title": "Salesforce package"
      },
      "title": "Installed Packages",
      "type": "array"
    },
    "installPackagesDuringCheckDeploy": {
      "$id": "#/properties/installPackagesDuringCheckDeploy",
      "default": false,
      "description": "If your configuration contains an installedPackages property, activating this option allows you to make sfdx-hardis automatically install packages during the Deployments Check workflow, and not to wait after the merge of the Pull Request.",
      "docUrl": "https://sfdx-hardis.cloudity.com/salesforce-ci-cd-work-on-task-install-packages/",
      "examples": [
        true
      ],
      "title": "Install packages during deployment checks workflow",
      "type": "boolean"
    },
    "instanceUrl": {
      "$id": "#/properties/instanceUrl",
      "default": "",
      "description": "Salesforce instance URL used by CI for deployment or backups",
      "examples": [
        "https://myclient.force.com",
        "https://google.force.com",
        "https://apple.force.com"
      ],
      "title": "Instance URL",
      "type": "string"
    },
    "listViewsToSetToMine": {
      "$id": "#/properties/listViewsToSetToMine",
      "default": [],
      "description": "List of ListView items to set to Mine after a delivery (that does not accept value 'Everything')",
      "examples": [],
      "items": {
        "type": "string"
      },
      "title": "List views to set to Mine",
      "type": "array"
    },
    "sourcesToRetrofit": {
      "$id": "#/properties/sourcesToRetrofit",
      "description": "List of metadata to retrieve for retrofit job",
      "examples": [
        [
          "CustomField",
          "Layout",
          "PermissionSet"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Metadata to retrofit",
      "type": "array"
    },
    "manualActionsFileUrl": {
      "$id": "#/properties/manualActionsFileUrl",
      "default": "",
      "description": "URL of the XLS file that contains manual actions to perform before or after a deployment",
      "examples": [
        "https://some.sharepoint.com/file.xlsx"
      ],
      "title": "Manual Actions File URL",
      "type": "string"
    },
    "mergeTargets": {
      "$id": "#/properties/mergeTargets",
      "description": "In branch-scoped config file, declares the list of branches that the current one can have as merge target. For example, integration will have mergeTargets [uat]",
      "examples": [
        [
          "preprod"
        ],
        [
          "integration"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Merge target branches",
      "type": "array"
    },
    "monitoringCommands": {
      "$id": "#/properties/monitoringCommands",
      "description": "List of monitoring commands to run with command hardis:org:monitor:all",
      "examples": [
        [
          {
            "title": "Detect calls to deprecated API versions",
            "key": "LEGACYAPI",
            "command": "sf hardis:org:diagnose:legacyapi",
            "frequency": "weekly"
          },
          {
            "title": "My custom command",
            "key": "MY_CUSTOM_KEY",
            "command": "sf my:custom:command",
            "frequency": "daily"
          }
        ]
      ],
      "items": {
        "$id": "#/properties/monitoringCommands/items",
        "type": "object",
        "additionalProperties": false,
        "description": "Monitoring command",
        "properties": {
          "key": {
            "$id": "#/properties/monitoringCommands/items/properties/key",
            "description": "Unique identifier of the monitoring command. Can be used with monitoringDisable",
            "title": "Key",
            "type": "string"
          },
          "title": {
            "$id": "#/properties/monitoringCommands/items/properties/title",
            "description": "Title of the command (will appear in logs)",
            "title": "Title",
            "type": "string"
          },
          "command": {
            "$id": "#/properties/monitoringCommands/items/properties/command",
            "description": "Bash command to run",
            "title": "Command",
            "type": "string"
          },
          "frequency": {
            "$id": "#/properties/monitoringCommands/items/properties/frequency",
            "description": "daily or weekly",
            "title": "Frequency",
            "type": "string"
          }
        },
        "required": [
          "title",
          "command"
        ]
      },
      "title": "Monitoring commands",
      "type": "array"
    },
    "monitoringAllowedSectionsActions": {
      "$id": "#/properties/monitoringAllowedSectionsActions",
      "description": "Override list of Setup Audit Trail elements that won't be considered as suspect by monitoring tools",
      "additionalProperties": true,
      "title": "Monitoring Allowed Sections Actions",
      "type": "object"
    },
    "monitoringDisable": {
      "$id": "#/properties/monitoringDisable",
      "description": "List of commands to skip during monitoring jobs",
      "examples": [
        [
          "METADATA_STATUS",
          "UNUSED_METADATAS"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_monitoring_commands"
      },
      "title": "Disabled monitoring commands",
      "type": "array"
    },
    "monitoringExcludeUsernames": {
      "$id": "#/properties/monitoringExcludeUsernames",
      "description": "List of usernames to exclude while running monitoring commands",
      "examples": [
        [
          "deploymentuser@cloudity.com",
          "mc-cloud-user@cloudity.com"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Monitoring usernames to exclude",
      "type": "array"
    },
    "msTeamsWebhookUrl": {
      "$id": "#/properties/msTeamsWebhookUrl",
      "default": "",
      "description": "Url of the Ms Teams channel Web Hook that can be used to send ALL notifications",
      "examples": [
        "https://my.msteams.webhook.url"
      ],
      "title": "MsTeams WebHook Url (ALL)",
      "type": "string"
    },
    "msTeamsWebhookUrlCritical": {
      "$id": "#/properties/msTeamsWebhookUrlCritical",
      "default": "",
      "description": "Url of the Ms Teams channel Web Hook that can be used to send CRITICAL notifications",
      "examples": [
        "https://my.msteams.webhook.url"
      ],
      "title": "MsTeams WebHook Url (CRITICAL)",
      "type": "string"
    },
    "msTeamsWebhookUrlSevere": {
      "$id": "#/properties/msTeamsWebhookUrlSevere",
      "default": "",
      "description": "Url of the Ms Teams channel Web Hook that can be used to send SEVERE notifications",
      "examples": [
        "https://my.msteams.webhook.url"
      ],
      "title": "MsTeams WebHook Url (SEVERE)",
      "type": "string"
    },
    "msTeamsWebhookUrlWarning": {
      "$id": "#/properties/msTeamsWebhookUrlWarning",
      "default": "",
      "description": "Url of the Ms Teams channel Web Hook that can be used to send WARNING notifications",
      "examples": [
        "https://my.msteams.webhook.url"
      ],
      "title": "MsTeams WebHook Url (WARNING)",
      "type": "string"
    },
    "msTeamsWebhookUrlInfo": {
      "$id": "#/properties/msTeamsWebhookUrlInfo",
      "default": "",
      "description": "Url of the Ms Teams channel Web Hook that can be used to send INFO notifications",
      "examples": [
        "https://my.msteams.webhook.url"
      ],
      "title": "MsTeams WebHook Url (INFO)",
      "type": "string"
    },
    "newTaskNameRegex": {
      "$id": "#/properties/newTaskNameRegex",
      "default": "",
      "description": "If you define a regular expression, it will be used to validate the name of new User Stories.\nFor example, you can enforce a Jira number in the name with regex '^MYPROJECT-[0-9]+ .*'",
      "examples": [
        "^[A-Z]+-[0-9]+ .*",
        "^CLOUDITY-[0-9]+ .*",
        "^MYPROJECT-[0-9]+ .*"
      ],
      "title": "User Story name validation regex",
      "type": "string"
    },
    "newTaskNameRegexExample": {
      "$id": "#/properties/newTaskNameRegexExample",
      "default": "",
      "description": "If you activated User Story name validation via RegEx, define an example value that will be displayed to users.\nExample: 'MYPROJECT-168 Update account status validation rule'",
      "examples": [
        "MYPROJECT-123 Update account status validation rule"
      ],
      "title": "Example string for User Story name validation regex",
      "type": "string"
    },
    "notificationsDisable": {
      "$id": "#/properties/notificationsDisable",
      "description": "List of notifications types to skip sending",
      "examples": [
        [
          "METADATA_STATUS",
          "UNUSED_METADATAS"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_notification_types"
      },
      "title": "Disabled notification types",
      "type": "array"
    },
    "packageNoOverwritePath": {
      "$id": "#/properties/packageNoOverwritePath",
      "default": "",
      "description": "By default, manifest/package-no-overwrite.xml is used, but you could decide to use a different file for specific major branches.\nIn that case, set the path to a custom package-no-overwrite XML file in a branch-scoped sfdx-hardis configuration file.",
      "examples": [
        "manifest/package-no-overwrite-main.xml",
        "manifest/package-no-overwrite-custom.xml"
      ],
      "title": "Branch-scoped custom Package-No-Overwrite path",
      "type": "string"
    },
    "poolConfig": {
      "$id": "#/properties/poolConfig",
      "description": "Configuration allowing to generate and fetch scratch orgs from scratch org pool",
      "examples": [
        {
          "maxScratchOrgsNumber": 10,
          "storageService": "kvdb.io"
        }
      ],
      "title": "Scratch org pool configuration",
      "type": "object",
      "properties": {
        "minScratchOrgRemainingDays": {
          "$id": "#/properties/poolConfig/minScratchOrgRemainingDays",
          "description": "When pool scratch org is less than this number, it is deleted and another one is created",
          "title": "Min scratch org remaining days",
          "default": 25,
          "type": "number"
        },
        "maxScratchOrgsNumber": {
          "$id": "#/properties/poolConfig/maxScratchOrgsNumber",
          "description": "Maximum number of active scratch orgs in the scratch org pool",
          "title": "Maximum number of scratch orgs",
          "type": "number"
        },
        "maxScratchOrgsNumberToCreateOnce": {
          "$id": "#/properties/poolConfig/maxScratchOrgsNumberToCreateOnce",
          "description": "Maximum number of scratch orgs to create in one CI job",
          "title": "Maximum number of scratch orgs to create once",
          "type": "number"
        },
        "storageService": {
          "$id": "#/properties/poolConfig/storageService",
          "description": "Remote service allowing to store scratch org pool details",
          "title": "Storage service for scratch org pool",
          "type": "string"
        }
      }
    },
    "productionBranch": {
      "$id": "#/properties/productionBranch",
      "default": "",
      "description": "Name of the git branch corresponding to production environment",
      "examples": [
        "master",
        "main",
        "production"
      ],
      "title": "Production branch name",
      "type": "string"
    },
    "projectName": {
      "$id": "#/properties/projectName",
      "default": "",
      "description": "Identifier for the project (can be the client and project)",
      "examples": [
        "MyClientMyProject",
        "GoogleGmail",
        "AppleIWatch"
      ],
      "title": "Project Name",
      "type": "string"
    },
    "refreshSandboxConfig": {
      "$id": "#/properties/refreshSandboxConfig",
      "description": "Configuration for sandbox refresh. Will be used by command hardis:org:refresh:before-refresh and hardis:org:refresh:after-refresh",
      "properties": {
        "connectedApps": {
          "$id": "#/properties/refreshSandboxConfig/connectedApps",
          "description": "List of connected apps to download before refresh and to upload after refresh",
          "examples": [
            [
              "My_Connected_App_1",
              "My_Connected_App_2"
            ]
          ],
          "items": {
            "type": "string"
          },
          "title": "Connected Apps",
          "type": "array"
        },
        "customSettings": {
          "$id": "#/properties/refreshSandboxConfig/customSettings",
          "description": "List of Custom Settings to download before refresh and to upload after refresh",
          "examples": [
            [
              "MyCustomSetting1__c",
              "MyCustomSetting2__c"
            ]
          ],
          "items": {
            "type": "string"
          },
          "title": "Custom Settings",
          "type": "array"
        },
        "dataWorkspaces": {
          "$id": "#/properties/refreshSandboxConfig/dataWorkspaces",
          "description": "List of data workspaces to download before refresh and to upload after refresh",
          "examples": [
            [
              "scripts/data/AnonymizeAccounts",
              "scripts/data/AnonymizeContacts",
              "scripts/data/AnonymizeLeads"
            ]
          ],
          "items": {
            "type": "string"
          },
          "title": "Data Workspaces",
          "type": "array"
        }
      },
      "additionalProperties": false,
      "title": "Refresh Sandbox Configuration",
      "type": "object"
    },
    "retrofitBranch": {
      "$id": "#/properties/retrofitBranch",
      "default": "",
      "description": "Name of the git branch where retrofit merge requests targets to",
      "examples": [
        "preprod",
        "dev",
        "maintenance"
      ],
      "title": "Retrofit branch name",
      "type": "string"
    },
    "retrofitIgnoredFiles": {
      "$id": "#/properties/retrofitIgnoredFiles",
      "description": "When calling hardis:org:retrieve:sources:retrofit, list of files to ignore (discard just after retrieve)",
      "examples": [
        [
          "force-app/main/default/applications/MyAppIWantToManageInProduction.app-meta.xml",
          "force-app/main/default/flexipages/MyFlexipageWithDashboards.flexipage-meta.xml"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Retrofit ignored files",
      "type": "array"
    },
    "runtests": {
      "$id": "#/properties/runtests",
      "default": "",
      "description": "WARNING: Use with caution, only in branch scoped config ! Can be a list of test classes if testLevel=RunSpecifiedTests, or a regex if testLevel=RunRepositoryTests",
      "examples": [
        "MyTestClass1,MyTestClass2",
        "^(?!FLI|fli|BatchableCodeSolvaTest|BatchableRemoveCodeSolvaTest|HelperNovaxelApiTest).*"
      ],
      "title": "Selected tests to run (list or regex)",
      "type": "string"
    },
    "scratchOrgInitApexScripts": {
      "$id": "#/properties/scratchOrgInitApexScripts",
      "description": "Apex scripts to call after scratch org initialization",
      "examples": [
        [
          "scripts/apex/init-scratch.apex",
          "scripts/apex/init-custom-settings.apex"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Scratch org init apex scripts",
      "type": "array"
    },
    "scratchOrgDuration": {
      "$id": "#/properties/scratchOrgDuration",
      "default": 30,
      "description": "Defines the lifespan of the scratch org in number of days, from 1 to 30",
      "title": "Duration of Scratch Org",
      "type": "number",
      "minimum": 1,
      "maximum": 30
    },
    "sfdmuCanModify": {
      "$id": "#/properties/sfdmuCanModify",
      "default": "",
      "description": "Instance host name to allow SFDMU to deploy data in a production org",
      "examples": [
        "myproject.force.com"
      ],
      "title": "SFDMU can modify",
      "type": "string"
    },
    "skipCodeCoverage": {
      "$id": "#/properties/skipCodeCoverage",
      "default": false,
      "description": "WARNING: Use with caution, only in branch scoped config ! Do not check code coverage for a deployment",
      "title": "Skip code coverage check",
      "type": "boolean"
    },
    "skipMinimizeProfiles": {
      "$id": "#/properties/skipMinimizeProfiles",
      "description": "These profiles will not be reformatted by command hardis:project:clean:minimizeprofiles",
      "examples": [
        [
          "MyClient Customer Community Login User",
          "MyClientPortail Profile"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Skip Minimize Profiles",
      "type": "array"
    },
    "skipUpdateForceIgnore": {
      "$id": "#/properties/skipUpdateForceIgnore",
      "default": false,
      "description": "Defines if sfdx-hardis will propose to upgrade local .forceignore file",
      "title": "Skip update .forceignore file",
      "type": "boolean"
    },
    "skipUpdateGitIgnore": {
      "$id": "#/properties/skipUpdateGitIgnore",
      "default": false,
      "description": "Defines if sfdx-hardis will propose to upgrade local .gitignore file",
      "title": "Skip update .gitignore file",
      "type": "boolean"
    },
    "sharedDevSandboxes": {
      "$id": "#/properties/sharedDevSandboxes",
      "default": false,
      "description": "Set to true if contributors can share dev sandboxes\nIf active, contributors will never be asked to refresh their sandbox metadata, to avoid to overwrite by accident their colleagues work :)",
      "title": "Contributors can share Dev Sandboxes",
      "type": "boolean"
    },
    "targetUsername": {
      "$id": "#/properties/targetUsername",
      "default": "",
      "description": "Salesforce username used by CI for deployment or backups",
      "examples": [
        "deployments@myclient.com",
        "deployments@google.fr",
        "deployments@apple.com"
      ],
      "title": "Target Username",
      "type": "string"
    },
    "testCoverageNotBlocking": {
      "$id": "#/properties/testCoverageNotBlocking",
      "default": false,
      "description": "Does not make the deployment job fail if apex tests code coverage is failing",
      "title": "Test Coverage not blocking",
      "type": "boolean"
    },
    "testLevel": {
      "$id": "#/properties/testLevel",
      "description": "WARNING: Use with caution, only in branch scoped config ! You can override default test level for deployments for special use cases, for example when you have SeeAllData=true you can use RunRepositoryTests associated with a regex in runtests option",
      "default": "RunLocalTests",
      "enum": [
        "NoTestRun",
        "RunSpecifiedTests",
        "RunRepositoryTests",
        "RunRepositoryTestsExceptSeeAllData",
        "RunLocalTests",
        "RunAllTestsInOrg"
      ],
      "enumNames": [
        "No Test Run",
        "Run Specified Tests",
        "Run Repository Tests",
        "Run Repository Tests Except SeeAllData",
        "Run Local Tests",
        "Run All Tests In Org"
      ],
      "examples": [
        "RunRepositoryTests",
        "RunSpecifiedTests"
      ],
      "title": "Test level for deployments",
      "type": "string"
    },
    "useDeltaDeployment": {
      "$id": "#/properties/useDeltaDeployment",
      "default": false,
      "description": "Defines if sfdx-hardis will deploy in delta from minor to major branches.\nWhen active, Delta Deployments allow to deploy only the metadatas in the branch / User Story, and not the full sources of the SFDX project.\nNote: Even if activated, Delta Deployments will be applied only for Pull Requests from minor (features,hotfixes) to major branches (integration,preprod).",
      "docUrl": "https://sfdx-hardis.cloudity.com/salesforce-ci-cd-config-delta-deployment/#delta-mode",
      "title": "Use Delta Deployment",
      "type": "boolean"
    },
    "useSmartDeploymentTests": {
      "$id": "#/properties/useSmartDeploymentTests",
      "default": false,
      "description": "Define if Smart Deployment Tests will be activated and run Apex test classes only if metadata that can impact them are present in the branch / User Story.\nNote: Smart Deployment Tests will be applied only for Pull Requests from minor (features,hotfixes) to major branches (integration,preprod).",
      "docUrl": "https://sfdx-hardis.cloudity.com/hardis/project/deploy/smart/#smart-deployments-tests",
      "title": "Use Smart Deployment Tests",
      "type": "boolean"
    },
    "linterIgnoreRightMetadataFile": {
      "$id": "#/properties/linterIgnoreRightMetadataFile",
      "default": "",
      "description": "Ignore profiles or permission sets",
      "examples": [
        "Profile",
        "Profile:ProfileA",
        "PermissionSet",
        "PermissionSet:PermissionSetA, Profile:ProfileA"
      ],
      "title": "Linter ignore permission set or/and profile",
      "type": "string"
    }
  },
  "title": "sfdx-hardis configuration",
  "type": "object"
}