{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Presented at Dreamforce 23 and Dreamforce 24!</p> <p> </p> <p>Sfdx-hardis is a CLI and visual productivity tools suite for Salesforce, by Cloudity &amp; friends, natively compliant with most Git platforms, messaging tools, ticketing systems and AI providers (including Agentforce).</p> <p></p> <p>It is free and Open-Source, and will allow you to simply:</p> <ul> <li>Deliver your projects with State of the art Salesforce DevOps</li> </ul> <p></p> <ul> <li>Backup Metadatas and Monitor your Salesforce orgs</li> </ul> <p></p> <ul> <li>Generate your Project Documentation with AI</li> </ul> <p></p> <ul> <li>Enjoy many commands that will save your minutes, hours or even days in your daily Admin or Developer work.</li> </ul> <p></p> <p>If you need guidance about how to leverage sfdx-hardis to bring more value to your business, Cloudity's international multi-cloud teams of business experts and technical experts can help: contact us !</p> <p>See online documentation for a better navigation</p> <p>sfdx-hardis commands and configuration are best used with an UI in SFDX Hardis Visual Studio Code Extension</p> <p></p> <p>See Dreamforce presentation</p> <p></p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#with-ide","title":"With IDE","text":"<p>You can install Visual Studio Code, then VSCode Extension VsCode SFDX Hardis</p> <p>Once installed, click on  in VsCode left bar, click on Install dependencies and follow the additional installation instructions :)</p> <p></p> <p></p> <p>When you are all green, you are all good \ud83d\ude0a</p> <p>You can also watch the video tutorial below</p> <p></p>"},{"location":"#as-sfdx-plugin","title":"As SFDX Plugin","text":""},{"location":"#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Install Node.js (recommended version)</li> <li>Install Salesforce DX by running <code>npm install @salesforce/cli --global</code> command line</li> </ul>"},{"location":"#plugin-installation","title":"Plugin installation","text":"<pre><code>sf plugins install sfdx-hardis\n</code></pre> <p>For advanced use, please also install dependencies</p> <pre><code>sf plugins install @salesforce/plugin-packaging\nsf plugins install sfdx-git-delta\nsf plugins install sfdmu\n</code></pre> <p>If you are using CI/CD scripts, use <code>echo y | sf plugins install ...</code> to bypass prompt.</p>"},{"location":"#docker","title":"Docker","text":"<p>You can use sfdx-hardis docker images to run in CI.</p> <p>All our Docker images are checked for security issues with MegaLinter by OX Security</p> <ul> <li> <p>Linux Alpine based images (works on Gitlab)</p> <ul> <li> <p>Docker Hub</p> <ul> <li>hardisgroupcom/sfdx-hardis:latest (with latest @salesforce/cli version)</li> <li>hardisgroupcom/sfdx-hardis:latest-sfdx-recommended (with recommended @salesforce/cli version, in case the latest version of @salesforce/cli is buggy)</li> </ul> </li> </ul> <ul> <li> <p>GitHub Packages (ghcr.io)</p> <ul> <li>ghcr.io/hardisgroupcom/sfdx-hardis:latest (with latest @salesforce/cli version)</li> <li>ghcr.io/hardisgroupcom/sfdx-hardis:latest-sfdx-recommended (with recommended @salesforce/cli version, in case the latest version of @salesforce/cli is buggy)</li> </ul> </li> </ul> </li> </ul> <p>See Dockerfile</p> <ul> <li> <p>Linux Ubuntu based images (works on GitHub, Azure &amp; Bitbucket)</p> <p>- hardisgroupcom/sfdx-hardis-ubuntu:latest (with latest @salesforce/cli version)   - hardisgroupcom/sfdx-hardis-ubuntu:latest-sfdx-recommended (with recommended @salesforce/cli version, in case the latest version of @salesforce/cli is buggy)</p> <ul> <li> <p>GitHub Packages (ghcr.io)</p> <ul> <li>ghcr.io/hardisgroupcom/sfdx-hardis-ubuntu:latest (with latest @salesforce/cli version)</li> <li>ghcr.io/hardisgroupcom/sfdx-hardis-ubuntu:latest-sfdx-recommended (with recommended @salesforce/cli version, in case the latest version of @salesforce/cli is buggy)</li> </ul> </li> </ul> </li> </ul> <p>See Dockerfile-ubuntu</p>"},{"location":"#usage","title":"Usage","text":"<pre><code>sf hardis:&lt;COMMAND&gt; &lt;OPTIONS&gt;\n</code></pre>"},{"location":"#events","title":"Events","text":""},{"location":"#coming-soon-devops-dreamin-25-london","title":"Coming soon: DevOps Dreamin '25, London","text":"<p>Why you don't need DevOps vendors tools</p> <p></p>"},{"location":"#coming-soon-french-touch-dreamin-25-paris","title":"Coming soon: French Touch Dreamin '25, Paris","text":"<p>Refresh your full sandboxes without needing to reconfigure everything, with Mehdi Abdennasser</p> <p></p>"},{"location":"#trailblazer-user-group-25-casablanca","title":"Trailblazer User Group '25, Casablanca","text":"<p>Salesforce Org Documentation with Open-Source and Agentforce, by Taha Basri</p> <p></p>"},{"location":"#trailblazer-developer-group-25-berlin-online","title":"Trailblazer Developer Group '25, Berlin (online)","text":"<p>Summer of Docs \u2013 Auto-Document Your Salesforce Org Like a Pro, by Mariia Pyvovarchuk (Aspect) and Roman Hentschke</p> <p></p>"},{"location":"#londons-calling-25-london","title":"London's Calling '25, London","text":"<p>Auto-generate your SF project Documentation site with open-source and Agentforce</p> <p></p>"},{"location":"#czech-dreamin-25-prague","title":"Czech Dreamin '25, Prague","text":"<p>Auto-generate your SF project Documentation site with open-source and Agentforce, with Mariia Pyvovarchuk</p> <p></p>"},{"location":"#trailblazer-admin-group-25-lyon","title":"Trailblazer Admin Group '25, Lyon","text":"<p>Techs for Admins: Afterwork Salesforce Inspector Reloaded &amp; sfdx-hardis, with Thomas Prouvot</p> <p></p>"},{"location":"#dreamforce-2024-san-francisco","title":"Dreamforce 2024, San Francisco","text":"<p>Save the Day by Monitoring Your Org with Open-Source Tools, with Olga Shirikova</p> <p></p>"},{"location":"#wir-sind-ohana-24-berlin","title":"Wir Sind Ohana '24, Berlin","text":"<p>Automate the Monitoring of your Salesforce orgs with open-source tools only!, with Yosra Saidani</p> <p></p>"},{"location":"#polish-dreamin-24-wroclaw-poland","title":"Polish Dreamin '24, Wroclaw, Poland","text":"<p>Easy and complete Salesforce CI/CD with open-source only!, with Wojciech Suwi\u0144ski</p> <p></p>"},{"location":"#french-touch-dreamin-23-paris","title":"French Touch Dreamin '23, Paris","text":"<p>Automate the Monitoring of your Salesforce orgs with open-source tools only!, with Maxime Guenego</p> <p></p>"},{"location":"#dreamforce-2023-san-francisco","title":"Dreamforce 2023, San Francisco","text":"<p>Easy Salesforce CI/CD with open-source and clicks only thanks to sfdx-hardis!, with Jean-Pierre Rizzi</p> <p></p>"},{"location":"#yeur-dreamin-2023-brussels","title":"Yeur Dreamin' 2023, Brussels","text":"<p>An easy and complete Salesforce CI/CD release management with open-source only !, with Ang\u00e9lique Picoreau</p> <p></p>"},{"location":"#articles-videos","title":"Articles &amp; Videos","text":""},{"location":"#web-articles","title":"Web Articles","text":"<p>Here are some articles about sfdx-hardis</p> <ul> <li>English</li> </ul> <p> </p> <ul> <li>French<ul> <li>Versions d'API Salesforce d\u00e9commissionn\u00e9es: Que faire ?</li> <li>Exporter en masse les fichiers d\u2019une org Salesforce</li> <li>Suspendre l\u2019acc\u00e8s aux utilisateurs lors d\u2019une mise en production Salesforce</li> </ul> </li> </ul>"},{"location":"#recorded-conferences","title":"Recorded Conferences","text":""},{"location":"#dreamforce-sessions","title":"Dreamforce Sessions","text":"<ul> <li>Dreamforce 2024 - Save the Day by Monitoring Your Org with Open-Source Tools (with Olga Shirikova)</li> </ul> <ul> <li>Dreamforce 2023 - Easy Salesforce CI/CD with open-source and clicks only thanks to sfdx-hardis! (with Jean-Pierre Rizzi)</li> </ul>"},{"location":"#community-events","title":"Community Events","text":"<ul> <li>Wir Sind Ohana 2024 - Automate the Monitoring of your Salesforce orgs with open-source tools only! (with Yosra Saidani)</li> </ul>"},{"location":"#podcasts","title":"Podcasts","text":"<ul> <li>Apex Hours 2025 - Org monitoring with Grafana + AI generated doc</li> </ul> <ul> <li>Salesforce Way Podcast #102 - Sfdx-hardis with Nicolas Vuillamy</li> </ul> <ul> <li>Salesforce Developers Podcast Episode 182: SFDX-Hardis with Nicolas Vuillamy</li> </ul>"},{"location":"#sfdx-hardis-usage","title":"sfdx-hardis Usage","text":""},{"location":"#features-overview","title":"Features Overview","text":"<ul> <li>sfdx-hardis 2025 new features overview</li> </ul> <ul> <li>SFDX-HARDIS \u2013 A demo with Nicolas Vuillamy from Cloudity</li> </ul>"},{"location":"#installation-setup","title":"Installation &amp; Setup","text":"<ul> <li>Complete installation tutorial for sfdx-hardis - \ud83d\udcd6 Documentation</li> </ul>"},{"location":"#cicd-workflows","title":"CI/CD Workflows","text":"<ul> <li>Complete CI/CD workflow for Salesforce projects - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>How to start a new User Story in sandbox - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>How to commit updates and create merge requests - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>How to resolve git merge conflicts in Visual Studio Code - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>How to install packages in your org - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>Configure CI server authentication to Salesforce orgs - \ud83d\udcd6 Documentation</li> </ul>"},{"location":"#monitoring","title":"Monitoring","text":"<ul> <li>How to configure monitoring for your Salesforce org - \ud83d\udcd6 Documentation</li> </ul>"},{"location":"#integrations","title":"Integrations","text":"<ul> <li>Configure Slack integration for deployment notifications - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>How to create a Personal Access Token in GitLab - \ud83d\udcd6 Documentation</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>How to generate AI-enhanced Salesforce project documentation - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>Host your documentation on Cloudflare free tier - \ud83d\udcd6 Documentation</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Everyone is welcome to contribute to sfdx-hardis (even juniors: we'll assist you !)</p>"},{"location":"#salesforce-cli-plugin-sfdx-hardis","title":"Salesforce CLI Plugin: sfdx-hardis","text":"<ul> <li>Install Node.js (recommended version)</li> <li>Install typescript by running <code>npm install typescript --global</code></li> <li>Install yarn by running <code>npm install yarn --global</code></li> <li>Install Salesforce DX by running <code>npm install @salesforce/cli --global</code> command line</li> <li>Fork https://github.com/hardisgroupcom/sfdx-hardis and clone it (or just clone if you are an internal contributor)</li> <li>At the root of the repository:<ul> <li>Run <code>yarn</code> to install dependencies</li> <li>Run <code>sf plugins link</code> to link the local sfdx-hardis to SFDX CLI</li> <li>Run <code>tsc --watch</code> to transpile typescript into js everytime you update a TS file</li> </ul> </li> <li>Debug commands using <code>NODE_OPTIONS=--inspect-brk sf hardis:somecommand --someparameter somevalue</code> (you can also debug commands using VsCode Sfdx-Hardis setting)</li> </ul>"},{"location":"#vscode-extension-vscode-sfdx-hardis","title":"VsCode Extension: vscode-sfdx-hardis","text":"<ul> <li>Install Node.js (recommended version)</li> <li>Install typescript by running <code>npm install typescript --global</code></li> <li>Install yarn by running <code>npm install yarn --global</code></li> <li>Install Visual Studio Code Insiders (download here)</li> <li>Fork https://github.com/hardisgroupcom/vscode-sfdx-hardis and clone it (or just clone if you are an internal contributor)</li> <li>At the root of the repository:<ul> <li>Run <code>yarn</code> to install dependencies</li> </ul> </li> <li>To test your code in the VsCode Extension:<ul> <li>Open the <code>vscode-sfdx-hardis</code> folder in VsCode Insiders</li> <li>Press <code>F5</code> to open a new VsCode window with the extension loaded (or menu Run -&gt; Start Debugging)</li> <li>In the new window, open a Salesforce DX project</li> <li>Run commands from the command palette (Ctrl+Shift+P) or use the buttons in the panel or webviews</li> </ul> </li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<p>sfdx-hardis partially relies on the following SFDX Open-Source packages</p> <ul> <li>SFDX Git Delta</li> <li>Salesforce Data Move Utility</li> </ul>"},{"location":"#contributors","title":"Contributors","text":""},{"location":"#organization","title":"Organization","text":"<p>sfdx-hardis is primarily led by Nicolas Vuillamy &amp; Cloudity, but has many external contributors that we cant thank enough !</p>"},{"location":"#pull-requests-authors","title":"Pull Requests Authors","text":""},{"location":"#special-thanks","title":"Special Thanks","text":"<ul> <li>Roman Hentschke, for building the BitBucket CI/CD integration</li> <li>Leo Jokinen, for building the GitHub CI/CD integration</li> <li>Mariia Pyvovarchuk, for her work about generating automations documentation</li> <li>Matheus Delazeri, for the PDF output of documentation</li> <li>Taha Basri, for his work about generating documentation of LWC</li> <li>Anush Poudel, for integrating sfdx-hardis with multiple LLMs using langchainJs</li> <li>Sebastien Colladon, for providing sfdx-git-delta which is highly used within sfdx-hardis</li> <li>Stepan Stepanov, for implementing the deployment mode delta with dependencies</li> <li>Shamina Mossodeean, for automating SF decomposed metadata</li> <li>Michael Havrilla, for the integration with Vector.dev allowing to provide monitoring logs to external systems like DataDog</li> </ul>"},{"location":"#commands","title":"Commands","text":""},{"location":"#hardisauth","title":"hardis:auth","text":"Command Title hardis:auth:login"},{"location":"#hardiscache","title":"hardis:cache","text":"Command Title hardis:cache:clear"},{"location":"#hardisconfig","title":"hardis:config","text":"Command Title hardis:config:get"},{"location":"#hardisdeploy","title":"hardis:deploy","text":"Command Title hardis:deploy:quick hardis:deploy:start hardis:deploy:validate"},{"location":"#hardisdoc","title":"hardis:doc","text":"Command Title hardis:doc:extract:permsetgroups hardis:doc:fieldusage hardis:doc:flow2markdown hardis:doc:mkdocs-to-cf hardis:doc:mkdocs-to-salesforce hardis:doc:override-prompts hardis:doc:packagexml2markdown hardis:doc:plugin:generate hardis:doc:project2markdown"},{"location":"#hardisgit","title":"hardis:git","text":"Command Title hardis:git:pull-requests:extract"},{"location":"#hardislint","title":"hardis:lint","text":"Command Title hardis:lint:access hardis:lint:metadatastatus hardis:lint:missingattributes hardis:lint:unusedmetadatas"},{"location":"#hardismdapi","title":"hardis:mdapi","text":"Command Title hardis:mdapi:deploy"},{"location":"#hardismisc","title":"hardis:misc","text":"Command Title hardis:misc:custom-label-translations hardis:misc:purge-references hardis:misc:servicenow-report hardis:misc:toml2csv"},{"location":"#hardisorg","title":"hardis:org","text":"Command Title hardis:org:community:update hardis:org:configure:data hardis:org:configure:files hardis:org:configure:monitoring hardis:org:connect hardis:org:create hardis:org:data:delete hardis:org:data:export hardis:org:data:import hardis:org:diagnose:audittrail hardis:org:diagnose:instanceupgrade hardis:org:diagnose:legacyapi hardis:org:diagnose:licenses hardis:org:diagnose:releaseupdates hardis:org:diagnose:storage-stats hardis:org:diagnose:unsecure-connected-apps hardis:org:diagnose:unused-apex-classes hardis:org:diagnose:unused-connected-apps hardis:org:diagnose:unusedlicenses hardis:org:diagnose:unusedusers hardis:org:files:export hardis:org:files:import hardis:org:fix:listviewmine hardis:org:generate:packagexmlfull hardis:org:monitor:all hardis:org:monitor:backup hardis:org:monitor:limits hardis:org:multi-org-query hardis:org:purge:apexlog hardis:org:purge:flow hardis:org:refresh:after-refresh hardis:org:refresh:before-refresh hardis:org:retrieve:packageconfig hardis:org:retrieve:sources:analytics hardis:org:retrieve:sources:dx hardis:org:retrieve:sources:dx2 hardis:org:retrieve:sources:metadata hardis:org:retrieve:sources:retrofit hardis:org:select hardis:org:test:apex hardis:org:user:activateinvalid hardis:org:user:freeze hardis:org:user:unfreeze"},{"location":"#hardispackage","title":"hardis:package","text":"Command Title hardiscreate hardisinstall hardismergexml hardisversion:create hardisversion:list hardisversion:promote"},{"location":"#hardispackagexml","title":"hardis:packagexml","text":"Command Title hardis:packagexml:append hardis:packagexml:remove"},{"location":"#hardisproject","title":"hardis:project","text":"Command Title hardis:project:audit:apiversion hardis:project:audit:callincallout hardis:project:audit:duplicatefiles hardis:project:audit:remotesites hardis:project:clean:emptyitems hardis:project:clean:filter-xml-content hardis:project:clean:flowpositions hardis:project:clean:hiddenitems hardis:project:clean:listviews hardis:project:clean:manageditems hardis:project:clean:minimizeprofiles hardis:project:clean:orgmissingitems hardis:project:clean:references hardis:project:clean:retrievefolders hardis:project:clean:sensitive-metadatas hardis:project:clean:standarditems hardis:project:clean:systemdebug hardis:project:clean:xml hardis:project:configure:auth hardis:project:convert:profilestopermsets hardis:project:create hardis:project:deploy:notify hardis:project:deploy:quick hardis:project:deploy:simulate hardis:project:deploy:smart hardis:project:deploy:sources:dx hardis:project:deploy:sources:metadata hardis:project:deploy:start hardis:project:deploy:validate hardis:project:fix:profiletabs hardis:project:fix:v53flexipages hardis:project:generate:bypass hardis:project:generate:flow-git-diff hardis:project:generate:gitdelta hardis:project:lint hardis:project:metadata:activate-decomposed hardis:project:metadata:findduplicates"},{"location":"#hardisscratch","title":"hardis:scratch","text":"Command Title hardis:scratch:create hardis:scratch:delete hardis:scratch:pool:create hardis:scratch:pool:localauth hardis:scratch:pool:refresh hardis:scratch:pool:reset hardis:scratch:pool:view hardis:scratch:pull hardis:scratch:push"},{"location":"#hardissource","title":"hardis:source","text":"Command Title hardis:source:deploy hardis:source:push hardis:source:retrieve"},{"location":"#hardiswork","title":"hardis:work","text":"Command Title hardis:work:new hardis:work:refresh hardis:work:resetselection hardis:work:save hardis:work:ws"},{"location":"#helloworld","title":"hello:world","text":"Command Title hello:world"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#changelog","title":"Changelog","text":""},{"location":"CHANGELOG/#beta-master","title":"[beta] (master)","text":"<p>Note: Can be used with <code>sfdx plugins:install sfdx-hardis@beta</code> and docker image <code>hardisgroupcom/sfdx-hardis@beta</code></p>"},{"location":"CHANGELOG/#6100-2025-10-31","title":"[6.10.0] 2025-10-31","text":"<ul> <li>New command hardis:org:diagnose:storage-stats to analyze storage usage per object and per year of creation / last update</li> <li>Add explicit message in case of error when authenticating to Git provider API</li> <li>Allow to override SFDX_TEST_WAIT_MINUTES and SFDX_DEPLOY_WAIT_MINUTES using CI/CD variables, and set 120 minutes as default value everywhere</li> <li>Fix Validation Rules formula field in doc generation</li> </ul>"},{"location":"CHANGELOG/#690-2025-10-23","title":"[6.9.0] 2025-10-23","text":"<ul> <li>Bring back Microsoft Teams notifications using Teams Workflow</li> <li>Update servicenow-report to add validity rows management</li> </ul>"},{"location":"CHANGELOG/#681-2025-10-22","title":"[6.8.1] 2025-10-22","text":"<ul> <li>Update Metadata List to use v65 one</li> <li>Update servicenow-report command to handle more use cases</li> </ul>"},{"location":"CHANGELOG/#680-2025-10-19","title":"[6.8.0] 2025-10-19","text":"<ul> <li>Ticketing providers: Add more variables that can be defined in .sfdx-hardis.yml<ul> <li>ticketingProvider</li> <li>genericTicketingProviderRegex</li> <li>genericTicketingProviderUrlBuilder</li> <li>jiraHost</li> <li>jiraTicketRegex</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#674-2025-10-14","title":"[6.7.4] 2025-10-14","text":"<ul> <li>Enhances git commit logging with file status</li> <li>Fix some grammar issues</li> </ul>"},{"location":"CHANGELOG/#673-2025-10-13","title":"[6.7.3] 2025-10-13","text":"<ul> <li>Handle cases where Azure DevOps is hosted on visualstudio.com</li> <li>Hide credentials from user logs when they are in remote.origin.url</li> </ul>"},{"location":"CHANGELOG/#672-2025-10-13","title":"[6.7.2] 2025-10-13","text":"<ul> <li>Add 2 events to come where sfdx-hardis will be demonstrated<ul> <li>DevOps Dreamin: Why you don't need Salesforce DevOps vendors</li> <li>French Touch Dreamin: Refresh your full sandboxes without needing to reconfigure everything</li> </ul> </li> <li>CodeBuilder: Prompt user when Git remote is not authenticated, then update Git remote URL to use token authentication</li> </ul>"},{"location":"CHANGELOG/#671-2025-10-12","title":"[6.7.1] 2025-10-12","text":"<ul> <li>hardis:org:diagnose:releaseupdates: Add Pending in list of statuses checked by the command</li> <li>Update JSON schema to indicate useDeltaDeploymentWithDependencies is in beta</li> <li>Fix activate-decomposed documentation formatting</li> </ul>"},{"location":"CHANGELOG/#670-2025-10-12","title":"[6.7.0] 2025-10-12","text":"<ul> <li>New command: hardis:project:metadata:activate-decomposed: Activate decomposed metadata types in <code>sfdx-project.json</code> and convert existing sources.</li> </ul> <ul> <li> <p>Improvements &amp; Fixes</p> <ul> <li>Cast descriptions to string before formatting to avoid rendering issues.</li> <li>Avoid unnecessary file writes during builds to improve performance and CI speed.</li> <li>Update JSON Schema to reflect new features and validation rules.</li> <li>Add support for Vector (vector.dev) to enable ingestion by DataDog and other observability platforms.</li> </ul> </li> </ul> <ul> <li> <p>Integrations</p> <ul> <li>BitBucket: show a clear message when the Pull Requests app must be installed.</li> <li>Azure Comment Reporter: create a Work Item and attach images when an item approaches the attachments limit.</li> </ul> </li> </ul> <ul> <li>Documentation<ul> <li>Update CI/CD documentation with the latest integration and workflow changes.</li> <li>Update contributing documentation to include guidance for the vscode-sfdx-hardis extension.</li> <li>Ensure docs reference the new JSON Schema and decomposed metadata command where relevant.</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#660-2025-10-05","title":"[6.6.0] 2025-10-05","text":"<ul> <li>hardis:project:deploy:smart: Enhance beta feature useDeltaDeploymentWithDependencies to add more dependencies to the delta deployment package (see related documentation)</li> <li>Remove <code>dev</code> or <code>config</code> parts of the new git branches, as it is not relevant</li> <li>Update global variables documentation to add AI related ones</li> <li>Add more events about sfdx-hardis in the documentation</li> <li>Update CI/CD Home Page documentation</li> </ul>"},{"location":"CHANGELOG/#654-2025-09-27","title":"[6.5.4] 2025-09-27","text":"<ul> <li>Update installation instructions</li> <li>Update doc to explain how to remove metadatas from repository without deleting them from orgs.</li> <li>Fix: adjust LIMIT_THRESHOLD_ERROR env var + align docs threshold values</li> </ul>"},{"location":"CHANGELOG/#653-2025-09-23","title":"[6.5.3] 2025-09-23","text":"<ul> <li>Install Chrome in Ubuntu docker image</li> </ul>"},{"location":"CHANGELOG/#652-2025-09-21","title":"[6.5.2] 2025-09-21","text":"<ul> <li>Display alias in org selection</li> </ul>"},{"location":"CHANGELOG/#651-2025-09-20","title":"[6.5.1] 2025-09-20","text":"<ul> <li>hardis:org:monitor:backup enhancements:<ul> <li>Creates the 'force-app/main/default' directory if it doesn't exist before retrieving metadatas</li> </ul> </li> <li>hardis:org:configure:monitoring:<ul> <li>Display the connected App XML in logs (while hiding sensitive info)</li> <li>When production org, run the first found test class (or allow to force its selection using ENV variable <code>SFDX_HARDIS_TECH_DEPLOY_TEST_CLASS</code> )</li> <li>Add instructions to use ghcr.io Docker image in case of rate limits reached on Docker Hub</li> </ul> </li> <li>Handle progress component in UI when generating documentation</li> </ul>"},{"location":"CHANGELOG/#650-2025-09-17","title":"[6.5.0] 2025-09-17","text":"<ul> <li>Files export enhancements:<ul> <li>Resume + validate downloaded files</li> <li>Improves API limit handling for file export/import</li> </ul> </li> <li>When prompting for org url, allow to input just the domain (ex: <code>hardis-group</code>) and sfdx-hardis will build the rest of the url</li> </ul>"},{"location":"CHANGELOG/#644-2025-09-16","title":"[6.4.4] 2025-09-16","text":"<ul> <li>When prompting for org instance URL, allow to copy-paste the full URL to gain time</li> <li>hardis:org:diagnose:unsecure-connected-apps: Salesforce limits OAuthToken queries to 2500 results. Be sneaky to get all results :)</li> </ul>"},{"location":"CHANGELOG/#643-2025-09-14","title":"[6.4.3] 2025-09-14","text":"<ul> <li>hardis:org:file:export and hardis:org:file:import:<ul> <li>Provide record Ids in the logs</li> </ul> </li> <li>Update labels of all report files for UI buttons</li> <li>Allow to export only files of a minimum size</li> </ul>"},{"location":"CHANGELOG/#642-2025-09-14","title":"[6.4.2] 2025-09-14","text":"<ul> <li>Add additional dependencies in Ubuntu Dockerfile to allow mermaid-cli and chrome to run natively from the image.</li> <li>hardis:org:file:export &amp; hardis:org:file:import:<ul> <li>Send progress notifications to WebSocketServer</li> <li>Improve console logs</li> <li>Generate a CSV log file with all files</li> </ul> </li> <li>hardis:work:save: Display manual actions file as an action link</li> </ul>"},{"location":"CHANGELOG/#641-2025-09-10","title":"[6.4.1] 2025-09-10","text":"<ul> <li>Allow to override Bulk API v2 settings with env variables BULKAPIV2_POLL_INTERVAL, BULKAPIV2_POLL_TIMEOUT and BULK_QUERY_RETRY</li> </ul>"},{"location":"CHANGELOG/#640-2025-09-08","title":"[6.4.0] 2025-09-08","text":"<ul> <li>hardis:project:deploy:smart: New beta feature useDeltaDeploymentWithDependencies to add dependencies to the delta deployment package.</li> <li>Fix npm dependencies (just in case, but the global npm packages hack has not impacted sfdx-hardis as it does not run in a browser)</li> </ul>"},{"location":"CHANGELOG/#633-2025-09-08","title":"[6.3.3] 2025-09-08","text":"<ul> <li>hardis:org:diagnose:unsecure-connected-apps<ul> <li>Add an additional columns on OAuth Usage to:<ul> <li>Show when the connected app has been last used</li> <li>Show which profiles are the users using the OAuth Tokens</li> </ul> </li> <li>Run the command in the daily monitoring</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#632-2025-09-07","title":"[6.3.2] 2025-09-07","text":"<ul> <li>Set initPermissionSets config prop to array of strings</li> <li>hardis:org:diagnose:unsecure-connected-apps: Handle case where OAuth Token App menu item is not found</li> </ul>"},{"location":"CHANGELOG/#631-2025-09-07","title":"[6.3.1] 2025-09-07","text":"<ul> <li>Update Grafana Home Dashboard to add Unsecure Connected Apps</li> <li>Fix Auth configuration command for Dev Hub</li> <li>Allow to use org shapes for scratch org creation with env variable SCRATCH_ORG_SHAPE</li> <li>Replace <code>my.salesforce-setup.com</code> by <code>my.salesforce.com</code> when prompting instance URL</li> </ul>"},{"location":"CHANGELOG/#630-2025-09-06","title":"[6.3.0] 2025-09-06","text":"<ul> <li>New command hardis:org:diagnose:unsecure-connected-apps to detect Unsecured Connected Apps</li> <li>Add documentation about Packages installation</li> <li>Update Azure Pipelines integration documentation</li> </ul>"},{"location":"CHANGELOG/#621-2025-09-04","title":"[6.2.1] 2025-09-04","text":"<ul> <li>hardis:work:save: Always display a button to create Merge Request</li> <li>Update GitProvider to make it compliant with GitHub Enterprise hosted on ghe.com</li> </ul>"},{"location":"CHANGELOG/#620-2025-09-01","title":"[6.2.0] 2025-09-01","text":"<ul> <li>hardis:org:refresh:before-refresh<ul> <li>Allow to download data to save before refreshing the sandbox, using SFDMU projects</li> <li>Save Custom Settings selection in configuration</li> </ul> </li> <li>hardis:org:refresh:after-refresh<ul> <li>Restore data after refresh using saved SFDMU project data</li> </ul> </li> <li>hardis:org:data:export &amp; hardis:org:data:import:<ul> <li>Add --project-name and --no-prompts arguments</li> <li>Add more examples of commands calls</li> </ul> </li> <li>hardis:org:select: Improve options to be called from VsCode-sfdx-hardis Orgs Manager LWC</li> </ul>"},{"location":"CHANGELOG/#614-2025-08-25","title":"[6.1.4] 2025-08-25","text":"<ul> <li>Update Integrations &amp; DevOps Documentation</li> <li>Send message to refresh pipeline after updating package configuration</li> </ul>"},{"location":"CHANGELOG/#613-2025-08-24","title":"[6.1.3] 2025-08-24","text":"<ul> <li>hardis:org:configure:auth<ul> <li>Fix issues related to VsCode background mode</li> <li>When updating existing branch authentication, pre-select merge targets.</li> <li>Send more information to the user about files that are created/updated</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#612-2025-08-24","title":"[6.1.2] 2025-08-24","text":"<ul> <li>Simplify package retrieve command</li> <li>Handle when an org is disconnected in CodeBuilder context</li> </ul>"},{"location":"CHANGELOG/#611-2025-08-24","title":"[6.1.1] 2025-08-24","text":"<ul> <li>Auto-detect which login type to use depending if we are in local or web context (Code Builder, CodeSpaces)</li> <li>Add documentation for Ubuntu images</li> <li>Wait for WebSocket Server to be initialized before continuing command.</li> </ul>"},{"location":"CHANGELOG/#610-2025-08-23","title":"[6.1.0] 2025-08-23","text":"<ul> <li>hardis:org:refresh:before-refresh<ul> <li>Retrieve Certificates and other metadatas that could need to be restored</li> <li>Retrieve Custom Settings values</li> </ul> </li> <li>hardis:org:refresh:after-refresh<ul> <li>Restore Certificates and other metadatas that could need to be restored</li> <li>Restore Custom Settings values</li> <li>Smart restore of SAML SSO Config by prompting the user to select a valid certificate</li> </ul> </li> <li>Send path to command log file to WebSocketServer</li> <li>Improve startup performances by checking for sfdx-hardis upgrades every 6h and not every 15 mn!</li> <li>hardis:org:diagnose:unused-connected-app: Fix bug when not escaping App name in SOQL query</li> <li>Update banner</li> <li>New config property manualActionsFileUrl to indicate users where the deployment manual actions is located.</li> </ul>"},{"location":"CHANGELOG/#606-beta-2025-08-17","title":"[6.0.6 (beta)] 2025-08-17","text":"<ul> <li>New command hardis:org:refresh:before-refresh : Save Connected Apps before refreshing a sandbox.</li> <li>New command hardis:org:refresh:after-refresh : Restore Connected Apps after refreshing a sandbox.</li> <li>Update JSON Schema documentation</li> <li>When authenticating to an expired org token, delete the SF Cli file that can mess with us when we refreshed a sandbox.</li> <li>Improve logs display</li> </ul>"},{"location":"CHANGELOG/#605-beta-2025-08-14","title":"[6.0.5 (beta)] 2025-08-14","text":"<ul> <li>Add ENV SF_DATA_DIR to the ubuntu Dockerfile to install plugins \"globally\" and make the image work as non-root user</li> </ul>"},{"location":"CHANGELOG/#604-beta-2025-08-14","title":"[6.0.4 (beta)] 2025-08-14","text":"<ul> <li>Immediately stop when a user cancelled a multi-questions prompts</li> <li>Add log used for background process in LWC UI</li> <li>Refactor logging methods</li> <li>Display labels of prompt answers, not technical values</li> <li>Improve naming of report files</li> </ul>"},{"location":"CHANGELOG/#603-beta-2025-08-12","title":"[6.0.3 (beta)] 2025-08-12","text":"<ul> <li>hardis:org:generate:packagexmlfull: Add --no-prompt option to directly use default org.</li> <li>hardis:work:save:<ul> <li>Add links to create Merge Request + Display MR documentation</li> <li>Conditionally execute CleanXML command</li> </ul> </li> <li>Improve UX when opening sandboxes</li> </ul>"},{"location":"CHANGELOG/#602-beta-2025-08-11","title":"[6.0.2 (beta)] 2025-08-11","text":"<ul> <li>Renaming \"task\" to \"User Story\" across the codebase and documentation for clarity.</li> <li>Enhancing SFDMU integration by improving UX and linking external docs.</li> <li>Improving CLI command outputs and workflows.</li> </ul>"},{"location":"CHANGELOG/#601-beta-2025-08-11","title":"[6.0.1 (beta)] 2025-08-11","text":"<ul> <li>Send messages to VsCode to enhance buttons and links</li> <li>Send messages to VsCode to display tables</li> <li>Unify the way to handle table display in all commands formerly using console.table or columnify</li> </ul>"},{"location":"CHANGELOG/#600-beta-2025-08-09","title":"[6.0.0 (beta)] 2025-08-09","text":"<ul> <li>Implement advanced websocket messaging for vscode sfdx-hardis LWC UI</li> <li>Refactor logging within commands for better display on vscode sfdx-hardis LWC UI</li> <li>Generate commands documentation with AI</li> <li>Refactor hardis:org:configure:auth for better UX</li> <li>Enhance org selection prompt</li> </ul>"},{"location":"CHANGELOG/#5450-2025-07-22","title":"[5.45.0] 2025-07-22","text":"<ul> <li>Generate ubuntu-based Docker images<ul> <li>docker.io/hardisgroupcom/sfdx-hardis-ubuntu</li> <li>ghcr.io/hardisgroupcom/sfdx-hardis-ubuntu</li> </ul> </li> <li>Display commands in blue for better readability on BitBucket</li> <li>Fix bug that did not replace existing comments on BitBucket</li> <li>Decrease docker images size</li> </ul>"},{"location":"CHANGELOG/#5441-2025-07-16","title":"[5.44.1] 2025-07-16","text":"<ul> <li>hardis:org:diagnose:audittrail:Add new ignored items in audit trail</li> </ul>"},{"location":"CHANGELOG/#5440-2025-06-29","title":"[5.44.0] 2025-06-29","text":"<ul> <li>hardis:project:generate:bypass: Code rework + removed global flag + Added ability to apply the bypass to VRs and Triggers</li> <li>Refactored logic to ensure preprod branches are only added if they exist, preventing null pointer exceptions.</li> <li>Upgrade npm dependencies</li> </ul>"},{"location":"CHANGELOG/#5435-2025-06-27","title":"[5.43.5] 2025-06-27","text":"<ul> <li>Filter WorkflowFlowAutomation from org-generated package.xml (workaround attempt for https://github.com/forcedotcom/cli/issues/3324)</li> </ul>"},{"location":"CHANGELOG/#5434-2025-06-26","title":"[5.43.4] 2025-06-26","text":"<ul> <li>Fix use of org API version</li> </ul>"},{"location":"CHANGELOG/#5433-2025-06-26","title":"[5.43.3] 2025-06-26","text":"<ul> <li>hardis:project:audit:apiversion: Add the newApiVersion parameter to specify the target version for the upgrade.</li> </ul>"},{"location":"CHANGELOG/#5432-2025-06-25","title":"[5.43.2] 2025-06-25","text":"<ul> <li>Update default API version to 63.0, but if --skipauth is not used, get the apiVersion of default org</li> <li>hardis:org:monitor:backup: Automate update of sfdx-project.json and package.xml at the beginning of the command</li> </ul>"},{"location":"CHANGELOG/#5431-2025-06-24","title":"[5.43.1] 2025-06-24","text":"<ul> <li>Refactor part of the documentation + add pages about events and videos</li> <li>Upgrade dependency @cparra/apexdocs</li> </ul>"},{"location":"CHANGELOG/#5430-2025-06-22","title":"[5.43.0] 2025-06-22","text":"<ul> <li> <p>hardis:doc:project2markdown enhancements</p> <ul> <li>Generate Apex Class relationship diagram on each apex doc page</li> <li>Improve display of Object and Class diagrams when there are too many items</li> </ul> </li> </ul> <ul> <li>Upgrade npm dependencies</li> </ul>"},{"location":"CHANGELOG/#5420-2025-06-18","title":"[5.42.0] 2025-06-18","text":"<ul> <li>hardis:project:deploy:smart: CI/CD enhancements<ul> <li>Allow to activate special behaviors when words are written in Pull Request description<ul> <li>NO_DELTA: Even if delta deployments are activated, a deployment in mode full will be performed for this Pull Request</li> <li>PURGE_FLOW_VERSIONS: After deployment, inactive and obsolete Flow Versions will be deleted (equivalent to command sf hardis:org:purge:flow)Caution: This will also purge active Flow Interviews !</li> <li>DESTRUCTIVE_CHANGES_AFTER_DEPLOYMENT: If a file manifest/destructiveChanges.xml is found, it will be executed in a separate step, after the deployment of the main package</li> </ul> </li> <li>Use CommonPullRequestInfo strong type for better use of cross-platform PR functions</li> <li>Manage cache to get Pull Request info to improve performances</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#5410-2025-06-15","title":"[5.41.0] 2025-06-15","text":"<ul> <li>Factorize common prompt text into prompt variables, that can be overridable by user.</li> <li>Implement cache for prompt templates and variables to improve performances</li> <li>New command hardis:doc:override-prompts: Create local override files for AI prompt templates that can be customized to match your organization's specific needs and terminology</li> <li>Add Github Copilot instructions</li> </ul>"},{"location":"CHANGELOG/#5400-2025-06-15","title":"[5.40.0] 2025-06-15","text":"<ul> <li>hardis:doc:project2markdown: Add Roles documentation</li> <li>Upgrade npm dependencies</li> </ul>"},{"location":"CHANGELOG/#5391-2025-06-05","title":"[5.39.1] 2025-06-05","text":"<ul> <li>hardis:doc:project2markdown: Define DO_NOT_OVERWRITE_INDEX_MD=true to avoid overwriting the index.md file in docs folder, useful if you want to keep your own index.md file.</li> </ul>"},{"location":"CHANGELOG/#5390-2025-06-05","title":"[5.39.0] 2025-06-05","text":"<ul> <li>When in CI, by default a maximum time of 30 minutes can be used to call AI. This value can be overridden using <code>AI_MAX_TIMEOUT_MINUTES</code>.</li> <li>New documentation page with all environment variables used by sfdx-hardis</li> </ul>"},{"location":"CHANGELOG/#5382-2025-06-05","title":"[5.38.2] 2025-06-05","text":"<ul> <li>hardis:org:monitor:backup: Do not filter standard objects if they have at least one custom field defined.</li> <li>Upgrade tar-fs to fix CVE</li> </ul>"},{"location":"CHANGELOG/#5381-2025-06-02","title":"[5.38.1] 2025-06-02","text":"<ul> <li>hardis:doc:project2markdown: Fix crash when generating Assignment Rules doc</li> </ul>"},{"location":"CHANGELOG/#5380-2025-05-27","title":"[5.38.0] 2025-05-27","text":"<ul> <li>New command hardis:misc:servicenow-report to generate reports crossing data from a Salesforce object and related entries in ServiceNow</li> <li>Automatically open Excel report files when possible (disable with env var <code>NO_OPEN=true</code>)</li> <li>Defer the <code>sortCrossPlatform</code> operation for member lists until after all elements for a specific metadata type have been collected. Sorting is now performed only once per type improving the overall performance</li> <li>Upgrade npm dependencies</li> </ul>"},{"location":"CHANGELOG/#5371-2025-05-23","title":"[5.37.1] 2025-05-23","text":"<ul> <li>Update PROMPT_DESCRIBE_PACKAGE</li> <li>Update common instructions about prompt reply language</li> <li>Make sure that projectName is compliant with the format of an environment variable</li> </ul>"},{"location":"CHANGELOG/#5370-2025-05-22","title":"[5.37.0] 2025-05-22","text":"<ul> <li>Generate and publish multilingual documentation from sfdx-hardis monitoring</li> <li>Update command to install mkdocs-material &amp; dependencies to match more python installation types</li> <li>Upgrade way to call wrangler to publish to Cloudflare</li> </ul>"},{"location":"CHANGELOG/#5363-2025-05-21","title":"[5.36.3] 2025-05-21","text":"<ul> <li>Azure CI/CD workflows: use ubuntu-latest as default image</li> <li>Fix doc overwrite in case apex docs failed</li> <li>Sort by alphabetical order, ignoring uppercase / lowercase</li> <li>Update default prompts</li> <li>Fix &amp; delete generated files that are not compliant with Windows file system</li> </ul>"},{"location":"CHANGELOG/#5362-2025-05-19","title":"[5.36.2] 2025-05-19","text":"<ul> <li>Do not create package files with git forbidden characters</li> </ul>"},{"location":"CHANGELOG/#5361-2025-05-18","title":"[5.36.1] 2025-05-18","text":"<ul> <li>hardis:doc:project2markdown: Display installed package metadatas as tree view</li> </ul>"},{"location":"CHANGELOG/#5360-2025-05-18","title":"[5.36.0] 2025-05-18","text":"<ul> <li>Allow to use another org to call Agentforce, by previously connecting to an org alias TECHNICAL_ORG (to do that, just define SFDX_AUTH_URL_TECHNICAL_ORG and hardis:auth:login will handle the rest)</li> </ul>"},{"location":"CHANGELOG/#5350-2025-05-18","title":"[5.35.0] 2025-05-18","text":"<ul> <li>hardis:doc:project2markdown new features and fixes:<ul> <li>Add doc for installed packages, enhanced with LLM</li> <li>Fix markdown returned by LLMs so it is compliant with mkdocs</li> <li>Allow to define a property truncateAfter on prompts variables to avoid crashes in case value is too long</li> <li>Authorizations doc:<ul> <li>Filter non accessible items from tree</li> <li>Display special icons for ModifyAllData and ViewAllData items</li> <li>Fix display of Dataspace scope</li> </ul> </li> <li>Allow to override text generated by LLM</li> <li>Allow to override a full documentation page using <code>&lt;!-- DO_NOT_OVERWRITE_DOC=FALSE --&gt;</code></li> </ul> </li> <li>Upgrade dependencies</li> </ul>"},{"location":"CHANGELOG/#5341-2025-05-15","title":"[5.34.1] 2025-05-15","text":"<ul> <li>hardis:doc:project2markdown: Fix crash when there is no HTML or JS on a LWC</li> </ul>"},{"location":"CHANGELOG/#5340-2025-05-13","title":"[5.34.0] 2025-05-13","text":"<ul> <li>hardis:org:diagnose:audittrail: Add audit Custom Setting values updates</li> <li>Improve SOQL query functions by adding warning logs for record limits and removing redundant warning handling</li> <li>New command hardis:misc:custom-label-translations: Extract selected custom labels, or of a given Lightning Web Component (LWC), from all language translation files. This command generates translation files ('*.translation - meta.xml') for each language already retrieved in the current project, containing only the specified custom labels.</li> </ul>"},{"location":"CHANGELOG/#5330-2025-05-10","title":"[5.33.0] 2025-05-10","text":"<ul> <li>hardis:doc:project2markdown: Allow to use ollama, Anthropic and Gemini LLMs, through langchainJs</li> <li>sfdx-hardis prompt templates enhancements:<ul> <li>Add prompt templates in online documentation</li> <li>Allow to locally override prompt templates text in <code>config/prompt-templates/${templateName}.txt</code></li> <li>Rewrite old prompt templates</li> </ul> </li> <li>Improve VsCode workspace configuration to avoid performance issues</li> <li>Upgrade npm dependencies</li> </ul>"},{"location":"CHANGELOG/#5321-2025-05-09","title":"[5.32.1] 2025-05-09","text":"<ul> <li>hardis:doc:project2markdown: Fix crash when assignment rule doesn't have a value</li> </ul>"},{"location":"CHANGELOG/#5320-2025-05-06","title":"[5.32.0] 2025-05-06","text":"<ul> <li>hardis:org:diagnose:audittrail: Flag more audit trail actions as not relevant</li> <li>CI/CD: Add FlowDefinition in default package-no-overwrite.xml, as it is a deprecated metadata</li> <li>hardis:doc:project2markdown: Escalation Rules AI-enhanced documentation</li> </ul>"},{"location":"CHANGELOG/#5310-2025-05-05","title":"[5.31.0] 2025-05-05","text":"<ul> <li>hardis:doc:project2markdown: New features<ul> <li>AutoResponse rules, by @mpyvo in https://github.com/hardisgroupcom/sfdx-hardis/pull/1199</li> <li>Lightning Web Components, by @tahabasri in https://github.com/hardisgroupcom/sfdx-hardis/pull/1197</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#5300-2025-05-04","title":"[5.30.0] 2025-05-04","text":"<ul> <li>hardis:doc:project2markdown: Generate Assignment Rules documentation</li> <li>Doc: Mention security artifacts in documentation</li> </ul>"},{"location":"CHANGELOG/#5291-2025-05-02","title":"[5.29.1] 2025-05-02","text":"<ul> <li>hardis:org:diagnose:audittrail: Flag more audit trail actions as not relevant</li> <li>Generate SBOM (Software Bill Of Material) from CI/CD jobs</li> <li>Expose security scan results and SBOM as artifacts on release jobs</li> </ul>"},{"location":"CHANGELOG/#5290-2025-05-02","title":"[5.29.0] 2025-05-02","text":"<ul> <li>hardis:doc:project2markdown: Generate Approval Process documentation</li> <li>Bitbucket Integration: Update default pipeline to add <code>clone: depth: full</code></li> <li>Security: Remove markdown-toc dependency as it is not maintained anymore and contains a CVE on old lodash version</li> <li>Add documentation page about how security is handled with sfdx-hardis</li> <li>Add trivy reports in Github Actions Workflows</li> </ul>"},{"location":"CHANGELOG/#5281-2025-04-25","title":"[5.28.1] 2025-04-25","text":"<ul> <li>hardis:org:diagnose:audittrail enhancements<ul> <li>Flag more audit trail actions as not relevant</li> <li>Display related actions next to username in summary</li> </ul> </li> <li>hardis:doc:project2markdown: Reorganize documentation menus</li> </ul>"},{"location":"CHANGELOG/#5280-2025-04-23","title":"[5.28.0] 2025-04-23","text":"<ul> <li>hardis:lint:metadatastatus: Detect more inactive elements that are technical debt to be cleaned<ul> <li>Approval Processes</li> <li>Assignment Rules</li> <li>Auto Response Rules</li> <li>Escalation Rules</li> <li>Forecasting Types</li> <li>Record Types</li> <li>Workflow Rules</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#5270-2025-04-18","title":"[5.27.0] 2025-04-18","text":"<ul> <li>hardis:doc:project2markdown new features<ul> <li>Generate Permission sets and Permission Set Groups documentation</li> <li>Display Profiles &amp; Permission Sets attributes in a tree</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#5261-2025-04-15","title":"[5.26.1] 2025-04-15","text":"<ul> <li>Also Display JIRA and Azure Boards issue status labels in notifications</li> <li>hardis:org:monitor:backup enhancements<ul> <li>Add --start-chunk to help solving rotten Metadata retrieve issues</li> <li>When using --full-apply-filters, do not kee Custom Objects who do not have Custom Fields locally defined</li> <li>Update package-skip-items template to add MilestoneType</li> <li>Add troubleshooting documentation</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#5260-2025-04-11","title":"[5.26.0] 2025-04-11","text":"<ul> <li>hardis:org:monitor:backup: Allow wildcards in package-skip-items.xml (examples: <code>pi__*</code> , <code>*__dlm</code> , or <code>prefix*suffix</code> )</li> </ul>"},{"location":"CHANGELOG/#5252-2025-04-10","title":"[5.25.2] 2025-04-10","text":"<ul> <li>Display JIRA and Azure Boards issue status labels in Pull Request comments</li> </ul>"},{"location":"CHANGELOG/#5251-2025-04-08","title":"[5.25.1] 2025-04-08","text":"<ul> <li>hardis:doc:project2markdown: Fix typo for Object description prompt</li> </ul>"},{"location":"CHANGELOG/#5250-2025-04-06","title":"[5.25.0] 2025-04-06","text":"<ul> <li>hardis:doc:project2markdown: Add profile documentation generated by AI</li> <li>Refactor document generation code</li> <li>GitHub Integration: Use ENV variables as fallback in case the job runner is not GitHub Actions, like Codefresh</li> </ul>"},{"location":"CHANGELOG/#5243-2025-04-04","title":"[5.24.3] 2025-04-04","text":"<ul> <li>Fix visualization of Azure DevOps images by linking attachments to a generic work item.</li> </ul>"},{"location":"CHANGELOG/#5242-2025-04-02","title":"[5.24.2] 2025-04-02","text":"<ul> <li>Upgrade npm dependencies</li> </ul>"},{"location":"CHANGELOG/#5241-2025-03-24","title":"[5.24.1] 2025-03-24","text":"<ul> <li>Upgrade @xmlnode/xmlnode and update related code so it works with newer version</li> <li>Upgrade NPM dependencies</li> <li>Update Contributor Guide documentation about package management</li> </ul>"},{"location":"CHANGELOG/#5240-2025-03-21","title":"[5.24.0] 2025-03-21","text":"<ul> <li>Flow documentation: Take in account new Transform Element</li> </ul>"},{"location":"CHANGELOG/#5230-2025-03-19","title":"[5.23.0] 2025-03-19","text":"<ul> <li>Lazy loading in hooks to improve performances when other CLI plugins commands are called</li> <li>hardis:org:file:export: Fix 100000 characters SOQL error limit</li> <li>Upgrade npm dependencies</li> </ul>"},{"location":"CHANGELOG/#5220-2025-03-13","title":"[5.22.0] 2025-03-13","text":"<ul> <li>hardis:org:file:export: Now handles to export of Attachments in addition to ContentVersions :)</li> <li>hardis:doc:flow2markdown: Call AI when generating the doc of a single flow</li> <li>hardis:project:deploy:smart Fix: delta after merge is not working as expected</li> </ul>"},{"location":"CHANGELOG/#5214-2025-03-11","title":"[5.21.4] 2025-03-11","text":"<ul> <li>Support edge-case when package.xml is empty but destructive changes are present. (see Github issue)</li> <li>Upgrade dependencies</li> </ul>"},{"location":"CHANGELOG/#5213-2025-03-01","title":"[5.21.3] 2025-03-01","text":"<ul> <li>hardis:org:data:export: Fix crash when a record has more than 1000 attached documents</li> </ul>"},{"location":"CHANGELOG/#5212-2025-03-01","title":"[5.21.2] 2025-03-01","text":"<ul> <li>hardis:org:diagnose:unused-connected-app: Fix crash when a Connected App doesn't have a CreatedBy</li> <li>hardis:doc:project2markdown: Avoid crash when a lookup field does not contain referenceTo</li> </ul>"},{"location":"CHANGELOG/#5211-2025-02-27","title":"[5.21.1] 2025-02-27","text":"<ul> <li>hardis:org:test:apex Take in account <code>--target-org</code> option</li> <li>hardis:org:diagnose:audittrail Fix monitoringAllowedSectionsActions</li> </ul>"},{"location":"CHANGELOG/#5210-2025-02-27","title":"[5.21.0] 2025-02-27","text":"<ul> <li>hardis:doc:project2markdown: Generate PDF files from markdown documentation, by @matheus-delazeri</li> </ul>"},{"location":"CHANGELOG/#5200-2025-02-22","title":"[5.20.0] 2025-02-22","text":"<ul> <li>hardis:work:new<ul> <li>Document properties availableProjects and availableTargetBranches</li> <li>Allow to define newTaskNameRegex to enforce the naming of a new task</li> <li>Allow to remove question about upgrading the dev sandbox is <code>sharedDevSandboxes: true</code> is set</li> </ul> </li> <li>Fix issue with monitoringAllowedSectionsActions not taking in account when a section is defined as <code>[]</code> to ignore all of its member types.</li> <li>Upgrade npm dependencies</li> </ul>"},{"location":"CHANGELOG/#5194-2025-02-17","title":"[5.19.4] 2025-02-17","text":"<ul> <li>Do not check for missing descriptions on Data Cloud &amp; Managed package metadatas</li> <li>Doc: display where subflows are used in a new Dependencies paragraph</li> <li>mkdocs-to-cf: No need to authenticate to SF org</li> </ul>"},{"location":"CHANGELOG/#5193-2025-02-15","title":"[5.19.3] 2025-02-15","text":"<ul> <li>Doc: Add Cloudflare setup instructions</li> <li>Doc: Reorganize Project documentation menus</li> <li>Update default workflows to handle Cloudflare variables</li> </ul>"},{"location":"CHANGELOG/#5192-2025-02-14","title":"[5.19.2] 2025-02-14","text":"<ul> <li>hardis:project:generate:bypass: Added necessary flags to be run from vscode sfdx-hardis extension + added skip-credits<ul> <li>Bypass generator: Create metadatas folders if not existing yet</li> </ul> </li> <li>Change default CF policy</li> <li>Update doc to request activation of ExperienceBundle Metadata API</li> </ul>"},{"location":"CHANGELOG/#5191-2025-02-09","title":"[5.19.1] 2025-02-09","text":"<ul> <li>Quickfix cf upload</li> </ul>"},{"location":"CHANGELOG/#5190-2025-02-09","title":"[5.19.0] 2025-02-09","text":"<ul> <li>hardis:doc:project2markdown: Add object model diagram in documentation</li> <li>New command hardis:project:generate:bypass : Generates bypass custom permissions and permission sets for specified sObjects and automations, by @Mehdi-Cloudity in https://github.com/hardisgroupcom/sfdx-hardis/pull/1060</li> <li>Adjusting the Grafana Configuration Variables in the Megalinter part of org-monitoring.yml, by @AhmedElAmory in https://github.com/hardisgroupcom/sfdx-hardis/pull/1057</li> </ul>"},{"location":"CHANGELOG/#5181-2025-02-04","title":"[5.18.1] 2025-02-04","text":"<ul> <li>Fix typo in docUtils</li> <li>Stealth enhancements</li> </ul>"},{"location":"CHANGELOG/#5180-2025-02-03","title":"[5.18.0] 2025-02-03","text":"<ul> <li>New command hardis:doc:fieldusage : generate a report with custom field's usage from metadata dependencies.</li> </ul>"},{"location":"CHANGELOG/#5174-2025-01-31","title":"[5.17.4] 2025-01-31","text":"<ul> <li>hardis:doc:project2markdown: Fixes pages menu</li> <li>Stealth feature</li> </ul>"},{"location":"CHANGELOG/#5173-2025-01-29","title":"[5.17.3] 2025-01-29","text":"<ul> <li>hardis:doc:project2markdown: Improve Apex docs markdown</li> <li>Upgrade apexdocs version</li> <li>Fix auth message when selecting default org</li> </ul>"},{"location":"CHANGELOG/#5172-2025-01-29","title":"[5.17.2] 2025-01-29","text":"<ul> <li>hardis:org:configure:files: Add examples when configuring file export format</li> <li>hardis:doc:project2markdown: Avoid the command to crash if apexdocs generation fails</li> </ul>"},{"location":"CHANGELOG/#5171-2025-01-27","title":"[5.17.1] 2025-01-27","text":"<ul> <li>hardis:doc:project2markdown: Add type of Lightning Pages in tables</li> <li>hardis:org:monitor:backup: Fix issue when there is an empty metadata type</li> </ul>"},{"location":"CHANGELOG/#5170-2025-01-26","title":"[5.17.0] 2025-01-26","text":"<ul> <li>hardis:doc:project2markdown enhancements:<ul> <li>Generate Apex classes documentation using <code>@cparra/apexdocs</code>, and describe them using AI if available</li> <li>Generate Lightning Pages documentation and describe them using AI if available</li> <li>Display error message in case of XML parsing error</li> <li>Do not raise issues when managed items fields don't have descriptions</li> <li>Do not raise inactive validation rule issue when the VR is from a managed package</li> <li>Fix New JSON coverage formatter is selecting wrong JSON from sf project deploy command</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#5164-2025-01-22","title":"[5.16.4] 2025-01-22","text":"<ul> <li>Doc: Exclude not relevant md from search</li> <li>Upgrade npm dependencies</li> <li>Add more logs to login command</li> </ul>"},{"location":"CHANGELOG/#5163-2025-01-22","title":"[5.16.3] 2025-01-22","text":"<ul> <li>Do not post comments with Flows if there is no real differences</li> <li>Truncate the number of flows git diff displayed in Pull Request comments to 30 (override the number using MAX_FLOW_DIFF_TO_SHOW )</li> <li>Keep history link in main flow doc if available and history not recalculated</li> <li>Remove Flows History mkdocs menu if present from an old sfdx-hardis doc generation</li> <li>QuickFix AI Generated Summary text in PRs</li> </ul>"},{"location":"CHANGELOG/#5162-2025-01-21","title":"[5.16.2] 2025-01-21","text":"<ul> <li>Strip XML to save prompts tokens</li> <li>Fix issue when parsing CustomObject metadata</li> <li>Install latest version of plugin @salesforce/plugin-deploy-retrieve in Dockerfile to avoid the bug of its current version</li> <li>Fix: Do not recalculate Flow History doc if flow has not been updated</li> <li>Skip Data Cloud objects from documentation (enforce using variable INCLUDE_DATA_CLOUD_DOC=true)</li> </ul>"},{"location":"CHANGELOG/#5161-2025-01-19","title":"[5.16.1] 2025-01-19","text":"<ul> <li>AI Cache results enhancements<ul> <li>Normalize strings before creating fingerprint to handle multiple platforms</li> <li>Delete unused cache files</li> </ul> </li> <li>Fix variables mismatch when calling <code>generateFlowMarkdownFile</code></li> </ul>"},{"location":"CHANGELOG/#5160-2025-01-19","title":"[5.16.0] 2025-01-19","text":"<ul> <li>New AI Provider: Agentforce</li> <li>Create Objects AI-powered documentation<ul> <li>Summary</li> <li>Relationships with other objects</li> <li>Fields</li> <li>Validation rules</li> <li>Related flows</li> </ul> </li> <li>Handle prompts multilingualism (ex: <code>PROMPTS_LANGUAGE=fr</code>)</li> <li>Handle prompts cache to save tokens</li> <li>Add <code>SFDX_DISABLE_FLOW_DIFF: false</code> in default CI/CD pipelines (must be set to true during CI/CD setup)</li> <li>Enhance branches &amp; orgs CI/CD strategy mermaid diagram</li> <li>Improve performances by using <code>GLOB_IGNORE_PATTERNS</code> for all calls to glob</li> </ul>"},{"location":"CHANGELOG/#5155-2025-01-16","title":"[5.15.5] 2025-01-16","text":"<ul> <li>Flow Visual Diff enhancements<ul> <li>Display full node fields table when it contains updated elements</li> <li>Fix removed long links</li> <li>Handle cases where Flow has been added or deleted</li> </ul> </li> <li>Update hardis:project:deploy:notify documentation</li> </ul>"},{"location":"CHANGELOG/#5154-2025-01-15","title":"[5.15.4] 2025-01-15","text":"<ul> <li>Allow to disable calls to AI prompts API using DISABLE_AI=true</li> <li>Implement AI cache to save calls to AI prompts API (can be disabled using IGNORE_AI_CACHE)</li> </ul>"},{"location":"CHANGELOG/#5153-2025-01-14","title":"[5.15.3] 2025-01-14","text":"<ul> <li>hardis:project:generate:flow-git-diff New parameters --commit-before and --commit-after</li> <li>hardis:doc:project2markdown: Filter flows from managed packages</li> <li>Display number of AI prompts API calls at the end of a command</li> </ul>"},{"location":"CHANGELOG/#5152-2025-01-13","title":"[5.15.2] 2025-01-13","text":"<ul> <li>Add AI security considerations in documentation</li> <li>Do not prompt for AI API TOKEN</li> <li>Do not crash in case of AI call failure</li> </ul>"},{"location":"CHANGELOG/#5151-2025-01-12","title":"[5.15.1] 2025-01-12","text":"<ul> <li>Improve prompt templates</li> </ul>"},{"location":"CHANGELOG/#5150-2025-01-12","title":"[5.15.0] 2025-01-12","text":"<ul> <li>Allow to call AI to describe flows in documentation</li> <li>Allow to call AI to describe differences between 2 flow versions in a pull request comment</li> <li>Ai Provider enhancements<ul> <li>Change default model from gpt-4o to gpt-4o-mini</li> <li>Prompt templates factory, with capability to override default prompt with ENV variable</li> <li>Translate prompts in french</li> </ul> </li> <li>Add dotenv to allow to define secrets variables in a local <code>.env</code> file (never commit it !)</li> <li>Add more ways to call python depending on the installation</li> </ul>"},{"location":"CHANGELOG/#5143-2025-01-10","title":"[5.14.3] 2025-01-10","text":"<ul> <li>hardis:project:deploy:smart Fix crash when deployment is ok</li> </ul>"},{"location":"CHANGELOG/#5142-2025-01-10","title":"[5.14.2] 2025-01-10","text":"<ul> <li>hardis:project:deploy:smart Fix parsing error in case it is UNKNOWN_ERROR</li> <li>Fix error <code>str.replace is not a function</code></li> </ul>"},{"location":"CHANGELOG/#5141-2025-01-09","title":"[5.14.1] 2025-01-09","text":"<ul> <li>Generate a file hardis-report/apex-coverage-results.json with Apex code coverage details for the following commands:<ul> <li>hardis:project:deploy:smart (only if <code>COVERAGE_FORMATTER_JSON=true</code> environment variable is defined)</li> <li>hardis:org:test:apex (always)</li> <li>SF Cli deployment wrapper commands</li> </ul> </li> <li>Do not display command output if execCommand has been called with <code>output: false</code></li> </ul>"},{"location":"CHANGELOG/#5140-2025-01-09","title":"[5.14.0] 2025-01-09","text":"<ul> <li>Add ability to replace ApiVersion on specific Metadata Types file using <code>sf hardis:project:audit:apiversion</code></li> <li>Add parameters <code>fix</code> and <code>metadatatype</code> on <code>sf hardis:project:audit:apiversion</code></li> <li>Fix build of formula markdown when generating a Flow Visual Documentation</li> </ul>"},{"location":"CHANGELOG/#5133-2025-01-08","title":"[5.13.3] 2025-01-08","text":"<ul> <li>Update default JIRA Regex to catch tickets when there is an number in the project name</li> </ul>"},{"location":"CHANGELOG/#5132-2025-01-07","title":"[5.13.2] 2025-01-07","text":"<ul> <li>hardis:project:deploy:smart: Fix parsing when deployment failure is related to Apex code coverage</li> <li>Flow doc fix: add description for constants, variables, text template &amp; formulas</li> <li>Flow parsing: Fix error when there is only one formula</li> </ul>"},{"location":"CHANGELOG/#5131-2025-01-07","title":"[5.13.1] 2025-01-07","text":"<ul> <li>hardis:doc:project2markdown Display a screen emoji in documentation flows table when they are not tied to an Object</li> <li>hardis:project:deploy:smart: Shorten log lines when there is a too big JSON, by removing info not relevant for display, like unchanged files or test classes results.</li> </ul>"},{"location":"CHANGELOG/#5130-2025-01-05","title":"[5.13.0] 2025-01-05","text":"<ul> <li>hardis:doc:project2markdown Add branch &amp; orgs strategy MermaidJS diagram in documentation</li> </ul>"},{"location":"CHANGELOG/#5120-2025-01-04","title":"[5.12.0] 2025-01-04","text":"<ul> <li>New command hardis:doc:mkdocs-to-salesforce to generate static HTML doc and host it in a Static Resource and a VisualForce page</li> <li>Remove hyperlinks from MermaidJs on Pull Request comments, to improve display on GitHub &amp; Gitlab</li> <li>Upgrade base image to python:3.12.8-alpine3.20, so mkdocs can be installed and run if necessary</li> <li>Add links in package.xml Markdown documentation</li> </ul>"},{"location":"CHANGELOG/#5110-2025-01-03","title":"[5.11.0] 2025-01-03","text":"<ul> <li> <p>Visual flow management, using MermaidJs</p> <ul> <li>hardis:doc:project2markdown: Add a markdown file for each Flow<ul> <li>If unable to run mermaid-cli, store markdown with mermaidJs diagram content anyway (can happen from Monitoring Backup Command)</li> <li>When called from Monitoring (hardis:org:monitor:backup), generate Flow documentation only if it has been updated</li> </ul> </li> <li>hardis:doc:flow2markdown: Generate the markdown documentation of a single flow (available from VsCode extension)</li> <li>hardis:project:generate:flow-git-diff: Generate the visual git diff for a single flow (available from VsCode extension)</li> <li>hardis:project:deploy:smart: Add visual git diff for flows updated by a Pull Request</li> <li>Flow Visual Git diff also added to standard SF Cli commands wrappers</li> </ul> </li> </ul> <ul> <li>New command hardis:project:deploy:notify to send Pull Request comments (with Flow Visual Git Diff) and Slack / Teams notifications even if you are not using a sfdx-hardis command to check or process a deployment.</li> </ul> <ul> <li> <p>Command updates</p> <ul> <li>hardis:project:deploy:smart: Refactor deployment errors parsing: use JSON output instead of text output</li> <li>hardis:org:test:apex: Display the number of failed tests in messages and notifications</li> <li>hardis:org:monitor:backup:<ul> <li>New option --exclude-namespaces that can be used with --full option</li> <li>New option --full-apply-filters that can be used with --full option to apply filters anyway</li> </ul> </li> </ul> </li> </ul> <ul> <li> <p>Core enhancements &amp; fixes</p> <ul> <li>Obfuscate some data from text log files</li> <li>Kill some exit handlers in case they are making the app crash after a throw SfError</li> <li>Trigger notifications during the command execution, not after</li> <li>Do not display warning in case no notification has been configured in case we are running locally</li> <li>Fix Individual deployment tips markdown docs by adding quotes to YML properties</li> <li>Fix init sfdx-hardis project commands and docs</li> <li>Display warning message in case package.xml has wrong format</li> <li>Allow to override package-no-overwrite from a branch .sfdx-hardis.yml config file</li> <li>Using target_branch for Jira labels when isDeployBeforeMerge flag is true</li> </ul> </li> </ul> <ul> <li>Doc<ul> <li>Update Microsoft Teams notifications integration User Guide</li> <li>Add troubleshooting section in Email integration User Guide</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#5101-2024-12-12","title":"[5.10.1] 2024-12-12","text":"<ul> <li>Fix sfdx-hardis docker image build by adding coreutils in dependencies</li> </ul>"},{"location":"CHANGELOG/#5100-2024-12-12","title":"[5.10.0] 2024-12-12","text":"<ul> <li>Update Docker base image to alpine to 3.21</li> </ul>"},{"location":"CHANGELOG/#593-2024-12-12","title":"[5.9.3] 2024-12-12","text":"<ul> <li>hardis:org:data:import: Allow to run the command in production using, by either:<ul> <li>Define sfdmuCanModify in your .sfdx-hardis.yml config file. (Example: <code>sfdmuCanModify: prod-instance.my.salesforce.com</code>)</li> <li>Define an environment variable SFDMU_CAN_MODIFY. (Example: <code>SFDMU_CAN_MODIFY=prod-instance.my.salesforce.com</code>)</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#592-2024-12-10","title":"[5.9.2] 2024-12-10","text":"<ul> <li>Fallback message in case sfdx-hardis is not able to parse newest SF CLI errors format.</li> </ul>"},{"location":"CHANGELOG/#591-2024-12-09","title":"[5.9.1] 2024-12-09","text":"<ul> <li>Fix issue that generates valid Pull Request comment whereas there is 1 error</li> <li>Add TS test case</li> <li>Upgrade NPM dependencies</li> </ul>"},{"location":"CHANGELOG/#590-2024-12-02","title":"[5.9.0] 2024-12-02","text":"<ul> <li>hardis:org:monitor:backup: New mode --full, much slower than default filtered one, but that can retrieve ALL metadatas of an org</li> </ul>"},{"location":"CHANGELOG/#581-2024-11-26","title":"[5.8.1] 2024-11-26","text":"<ul> <li>Fix hardis:org:diagnose:unused-apex-classes: Use .cls file, not cls-meta.xml file to get creation date from git</li> </ul>"},{"location":"CHANGELOG/#580-2024-11-25","title":"[5.8.0] 2024-11-25","text":"<ul> <li>New monitoring command hardis:org:diagnose:unused-connected-apps to detect Connected Apps that are not used anymore and might be disabled or deleted.</li> </ul>"},{"location":"CHANGELOG/#572-2024-11-25","title":"[5.7.2] 2024-11-25","text":"<ul> <li>Fix issue with auth just before running a command (ask to run again the same command meanwhile we find a way to avoid that using SF CLI architecture)</li> </ul>"},{"location":"CHANGELOG/#571-2024-11-22","title":"[5.7.1] 2024-11-22","text":"<ul> <li>In case a prompt is requested during CI and makes a command fail, display the content of the prompt</li> </ul>"},{"location":"CHANGELOG/#570-2024-11-22","title":"[5.7.0] 2024-11-22","text":"<ul> <li>New command hardis:git:pull-requests:extract: Extract Pull Requests from Git Server into CSV/XLS (Azure only for now)</li> <li>Fix bug when scratch org username is &gt; 80 chars</li> <li>Make markdown-links-check not blocking by default in MegaLinter base config</li> <li>Make yamllint not blocking by default in MegaLinter base config</li> </ul>"},{"location":"CHANGELOG/#563-2024-11-17","title":"[5.6.3] 2024-11-17","text":"<ul> <li>MegaLinter config: disable APPLY_FIXES by default</li> <li>Upgrade npm dependencies</li> </ul>"},{"location":"CHANGELOG/#562-2024-11-12","title":"[5.6.2] 2024-11-12","text":"<ul> <li>hardis:org:diagnose:unused-apex-classes<ul> <li>Display class created by and created name MIN(date from org,date from git)</li> <li>Replace errors by warnings, and add a message so users double-check before removing a class</li> <li>Reorder console log</li> </ul> </li> <li>Remove unused code from MetadataUtils class</li> </ul>"},{"location":"CHANGELOG/#561-2024-11-11","title":"[5.6.1] 2024-11-11","text":"<ul> <li>Fix hardis:org:user:activateinvalid interactive mode</li> <li>Update Dockerfile email address</li> <li>Upgrade default Grafana Dashboards to add Unused Apex Classes indicator</li> <li>Update hardis:org:diagnose:unused-apex-classes and hardis:doc:packagexml2markdown documentation</li> </ul>"},{"location":"CHANGELOG/#560-2024-11-09","title":"[5.6.0] 2024-11-09","text":"<ul> <li>New command hardis:org:diagnose:unused-apex-classes, to detect Apex classes (Batch,Queueable,Schedulable) that has not been called for more than 365 days, that might be deleted to improve apex tests performances</li> <li>hardis:doc:project2markdown: Update documentation</li> <li>Polish CI/CD home doc</li> <li>Refactor the build of hardis:org:monitor:all documentation</li> <li>Fix issue with ToolingApi calls: handle paginated results instead of only the first 200 records.</li> </ul>"},{"location":"CHANGELOG/#550-2024-11-03","title":"[5.5.0] 2024-11-03","text":"<ul> <li>hardis:doc:packagexml2markdown: Generate markdown documentation from a package.xml file</li> <li>hardis:doc:project2markdown: Generate markdown documentation from any SFDX project (CI/CD, monitoring, projects not using sfdx-hardis...) in <code>docs</code> folder and add a link in README.md if existing.</li> <li>hardis:org:monitor:backup: Call hardis:doc:project2markdown after backup</li> <li>hardis:org:retrieve:packageconfig: Ignore standard Salesforce packages</li> <li>Update CI/CD home documentation</li> </ul>"},{"location":"CHANGELOG/#541-2024-11-02","title":"[5.4.1] 2024-11-02","text":"<ul> <li>hardis:org:multi-org-query enhancements<ul> <li>Improve documentation</li> <li>Allow to use --query-template as option to use one of the predefined templates via command line</li> <li>Handle errors if issues when the command is called via a CI/CD job</li> </ul> </li> <li>Upgrade dependencies</li> </ul>"},{"location":"CHANGELOG/#540-2024-11-02","title":"[5.4.0] 2024-11-02","text":"<ul> <li>New command hardis:org:multi-org-query allowing to execute a SOQL Bulk Query in multiple orgs and aggregate the results in a single CSV / XLS report</li> <li>New command hardis:org:community:update to Activate / Deactivate communities from command line</li> </ul>"},{"location":"CHANGELOG/#530-2024-10-24","title":"[5.3.0] 2024-10-24","text":"<ul> <li>Update default Monitoring workflow for GitHub</li> <li>Refactor file download code<ul> <li>Display progress</li> <li>Better error handling</li> </ul> </li> <li>hardis:org:diagnose:legacyapi: Fix issue with big log files: Use stream to parse CSV and perform checks</li> <li>Update default API version toto 62.0 (Winter 25 release)</li> </ul>"},{"location":"CHANGELOG/#524-2024-10-21","title":"[5.2.4] 2024-10-21","text":"<ul> <li>Fix hardis:org:fix:listviewmine: Use chrome-launcher to find chrome executable to use with puppeteer-core</li> <li>Remove keyv dependency</li> </ul>"},{"location":"CHANGELOG/#523-2024-10-19","title":"[5.2.3] 2024-10-19","text":"<ul> <li>Change default <code>.mega-linter.yml</code> config</li> <li>Display number of package.xml items before or after retrieving them</li> <li>Doc: Update youtube preview images</li> </ul>"},{"location":"CHANGELOG/#522-2024-10-14","title":"[5.2.2] 2024-10-14","text":"<ul> <li>Fix doubling -d option in hardis:scratch:create</li> </ul>"},{"location":"CHANGELOG/#521-2024-10-14","title":"[5.2.1] 2024-10-14","text":"<ul> <li>2 hardis commands: rename <code>-d</code> into something else when the short option was available twice on the same command</li> </ul>"},{"location":"CHANGELOG/#520-2024-10-14","title":"[5.2.0] 2024-10-14","text":"<ul> <li>Improve BUILD &amp; RUN documentation</li> <li>21 hardis commands: rename <code>-o</code> short into <code>-f</code> when possible, or other short letter, to avoid collision with <code>-o</code> (<code>--target-org</code>) option</li> <li>Fix GitHub Org Monitoring workflow (remove push event + fix command typo)</li> </ul>"},{"location":"CHANGELOG/#510-2024-10-11","title":"[5.1.0] 2024-10-11","text":"<ul> <li>hardis:project:deploy:smart: Fix to adapt stdout checks to output of <code>sf project deploy start</code> in case code coverage is ignored</li> <li>hardis:org:monitor:backup: Allow spaces in folders</li> <li>Remove pubsub from default .forceignore</li> <li>Change default deployment waiting time from 60mn to 120mn</li> <li>Display explicit warning message before ConnectedApp deployment so users don't forget to manually create the connected app with the certificate</li> </ul>"},{"location":"CHANGELOG/#5010-2024-10-03","title":"[5.0.10] 2024-10-03","text":"<ul> <li>hardis:project:deploy:smart : Fix parsing of error strings</li> <li>hardis:project:deploy:smart : Fix markdown display on PR summary</li> </ul>"},{"location":"CHANGELOG/#509-2024-10-03","title":"[5.0.9] 2024-10-03","text":"<ul> <li>Fix link to tip doc from Pull Request / Merge Request comments</li> <li>Fixing small issues with creating scratch org and scratch org pool</li> </ul>"},{"location":"CHANGELOG/#508-2024-10-01","title":"[5.0.8] 2024-10-01","text":"<ul> <li>Monitoring config: Fix way to define how to upload connected app</li> <li>New deployment tip: Couldn't retrieve or load information on the field</li> <li>Fix parsing of errors when they are unknown</li> <li>Fix SEO info in deployment tips documentation</li> </ul>"},{"location":"CHANGELOG/#507-2024-09-25","title":"[5.0.7] 2024-09-25","text":"<ul> <li>hardis:org:monitoring:backup : fix issue when metadata type is unknown</li> </ul>"},{"location":"CHANGELOG/#506-2024-09-25","title":"[5.0.6] 2024-09-25","text":"<ul> <li>Allow to purge flows &amp; flow interviews using <code>--no-prompt</code> option</li> <li>Fix duplicate <code>-f</code> short option by replacing <code>delete-flow-interviews</code> short by <code>-w</code></li> </ul>"},{"location":"CHANGELOG/#505-2024-09-24","title":"[5.0.5] 2024-09-24","text":"<ul> <li>When git add / stash failure, display a message explaining to run <code>git config --system core.longpaths true</code> to solve the issue.</li> <li>Improve test classes errors collection during deployment check</li> <li>Display the number of elements deployed within a package.xml</li> </ul>"},{"location":"CHANGELOG/#504-2024-09-24","title":"[5.0.4] 2024-09-24","text":"<ul> <li>Fix errors collection during deployment check</li> <li>Display in deployment check summary when useSmartDeploymentTests has been activated</li> <li>Do not send coverage formatters options when test level is NoTestRun</li> </ul>"},{"location":"CHANGELOG/#503-2024-09-23","title":"[5.0.3] 2024-09-23","text":"<ul> <li>Add --ignore-conflicts to smartDeploy</li> </ul>"},{"location":"CHANGELOG/#502-2024-09-23","title":"[5.0.2] 2024-09-23","text":"<ul> <li>Always use <code>project deploy start --dry-run</code> for deployment validation, until command <code>project deploy validate</code> works with --ignore-warnings &amp; NoTestRun</li> </ul>"},{"location":"CHANGELOG/#500-2024-09-23","title":"[5.0.0] 2024-09-23","text":""},{"location":"CHANGELOG/#refactoring-explanations","title":"Refactoring explanations","text":"<p>The future deprecation of sfdx force:source:** commands on 6 november finally convinced us to switch everything from SFDX core to SF CLI core. (otherwise existing CI/CD pipelines would not work anymore from this date !)</p> <p>Therefore, sfdx-hardis required a complete refactoring as described below, but this won't impact existing CI/CD and Monitoring pipelines.</p> <p>We made many tests but risk zero do not exist, so if you see any bug, please report them ASAP and we'll solve them quickly :)</p>"},{"location":"CHANGELOG/#major-changes","title":"Major changes","text":"<ul> <li> <p>Migrate plugin from SFDX plugin core to SF Cli Plugin core</p> <ul> <li>Convert commands code from SfdxCommand base to SfCommand base</li> <li>Migrate internal Bulk Api calls from Bulk API v1 to Bulk API v2</li> <li>Upgrade all npm dependencies to their latest version (more secured)</li> </ul> </li> </ul> <ul> <li> <p>Change background calls to legacy sfdx commands to call their SF Cli replacements</p> <ul> <li><code>sfdx force:mdapi:convert</code> -&gt; <code>sf project convert mdapi</code></li> <li><code>sfdx force:mdapi:deploy</code> -&gt; <code>sf project deploy start --metadata-dir</code></li> <li><code>sfdx force:source:retrieve</code> -&gt; <code>sf project retrieve start</code></li> <li><code>sfdx force:source:deploy</code> -&gt; <code>sf project deploy start</code></li> <li><code>sfdx force:source:pull</code> -&gt; <code>sf project retrieve start</code></li> <li><code>sfdx force:source:push</code> -&gt; <code>sf project deploy start</code></li> <li><code>sfdx force:source:tracking:clear</code> -&gt; <code>sf project delete tracking</code></li> <li><code>sfdx force:source:manifest:create</code> -&gt; <code>sf project generate manifest</code></li> <li><code>sfdx sgd:source:delta</code> -&gt; <code>sf sgd:source:delta</code></li> <li><code>sfdx force:org:create</code> -&gt; <code>sf org create sandbox</code> | <code>sf org create scratch</code></li> <li><code>sfdx force:org:list</code> -&gt; <code>sf org list</code></li> <li><code>sfdx force:org:delete</code> -&gt; <code>sf org delete scratch</code></li> <li><code>sfdx config:get</code> -&gt; <code>sf config get</code></li> <li><code>sfdx config:set</code> -&gt; <code>sf config set</code></li> <li><code>sfdx auth:web:login</code> -&gt; <code>sf org login web</code></li> <li><code>sfdx auth:jwt:grant</code> -&gt; <code>sf org login jwt</code></li> <li><code>sfdx auth:sfdxurl:store</code> -&gt; <code>sf org login sfdx-url</code></li> <li><code>sfdx org:login:device</code> -&gt; <code>sf org login device</code></li> <li><code>sfdx force:data:record:get</code> -&gt; <code>sf data get record</code></li> <li><code>sfdx force:data:record:update</code> -&gt; <code>sf data update record</code></li> <li><code>sfdx force:data:soql:query</code> -&gt; <code>sf data query</code></li> <li><code>sfdx force:data:bulk:delete</code> -&gt; <code>sf data delete bulk</code></li> <li><code>sfdx alias:list</code> -&gt; <code>sf alias list</code></li> <li><code>sfdx alias:set</code> -&gt; <code>sf alias set</code></li> <li><code>sfdx force:apex:test:run</code> -&gt; <code>sf apex run test</code></li> <li><code>sfdx force:apex:execute</code> -&gt; <code>sf apex run</code></li> <li><code>sfdx force:package:create</code> -&gt; <code>sf package create</code></li> <li><code>sfdx force:package:version:create</code> -&gt; <code>sf package version create</code></li> <li><code>sfdx force:package:version:delete</code> -&gt; <code>sf package version delete</code></li> <li><code>sfdx force:package:version:list</code> -&gt; <code>sf package version list</code></li> <li><code>sfdx force:package:version:promote</code> -&gt; <code>sf package version promote</code></li> <li><code>sfdx force:package:installed:list</code> -&gt; <code>sf package installed</code></li> <li><code>sfdx force:package:install</code> -&gt; <code>sf package install</code></li> <li><code>sfdx force:user:password:generate</code> -&gt; <code>sf org generate password</code></li> <li><code>sfdx force:user:permset:assign</code> -&gt; <code>sf org assign permset</code></li> <li><code>sfdx hardis:_</code> -&gt; <code>sf hardis:_</code></li> </ul> </li> </ul> <ul> <li>New wrappers commands for SF Cli deployment commands<ul> <li><code>sf hardis project deploy validate</code> -&gt; Wraps <code>sf project deploy validate</code></li> <li><code>sf hardis project deploy quick</code> -&gt; Wraps <code>sf project deploy quick</code></li> <li><code>sf hardis project deploy start</code> -&gt; Wraps <code>sf project deploy start</code></li> </ul> </li> </ul>"},{"location":"CHANGELOG/#new-features-enhancements","title":"New Features / Enhancements","text":"<ul> <li>hardis:project:deploy:smart<ul> <li>New feature useSmartDeploymentTests: Improve performances by not running test classes when delta deployment contain only non impacting metadatas, and target org is not production</li> <li>Rename command hardis:project:deploy:source:dx into hardis:project:deploy:smart (previous command alias remains, no need to update your pipelines !)</li> </ul> </li> <li>commandsPreDeploy and commandsPostDeploy<ul> <li>New option context for a command, defining when it is run and when it is not: all (default), check-deployment-only or process-deployment-only</li> <li>New option runOnlyOnceByOrg: If set to <code>true</code>, the command will be run only one time per org. A record of SfdxHardisTrace__c is stored to make that possible (it needs to be existing in target org)</li> </ul> </li> <li>New commands<ul> <li>hardis:project:deploy:simulate to validate the deployment of a single metadata (used by VsCode extension)</li> <li>hardis:org:diagnose:releaseupdates to check for org Release Updates from Monitoring or locally</li> <li>hardis:misc:purge-references to partially automate the cleaning of related dependencies when you need to delete a field, or change its type (for example from master detail to lookup)</li> <li>hardis:project:clean:sensitive-metadatas to mask sensitive metadatas from git repo (ex: Certificate content)</li> </ul> </li> <li>hardis:work:save and hardis:project:deploy:sources:dx: Improve runtime performances thanks to internalization of sfdx-essentials commands</li> <li>hardis:work:new<ul> <li>Allow to add labels in property <code>availableTargetBranches</code>, using a comma. For examples, <code>- integration,Choose this branch if you are on the BUILD side of the project !</code></li> <li>Add current default org in the choices when prompting which org to use</li> </ul> </li> <li>hardis:project:new<ul> <li>Initialize autoCleanTypes with destructivechanges, flowPositions and minimizeProfiles</li> <li>Initialize package-no-overwrite.xml with Certificate metadata. (certificates must be uploaded manually)</li> </ul> </li> <li>hardis:org:files:export: Improve display with spinner</li> <li>hardis:org:purge:flow: If FlowInterview records are preventing Flow Versions to be deleted, prompt user to delete Flow Interviews before trying again to delete Flow Versions</li> <li>hardis:project:generate:gitdelta: Add option to generate package.xml related to a single commit</li> <li>hardis:org:data:delete: Check for property \"runnableInProduction\" in export.json before running deletion in production org.</li> <li>hardis:org:diagnose:audittrail: Add new filtered actions<ul> <li>Customer Portal: createdcustomersuccessuser</li> </ul> </li> <li>Authentication: do not use alias MY_ORG anymore + do not update local user config if no values to replace.</li> <li>When selecting an org, make sure it is still connected. If not, open browser so the user can authenticate again.</li> <li>Update sfdx-hardis Grafana Dashboards to import in your Grafana Cloud<ul> <li>SF Instance name</li> <li>Next platform upgrade</li> <li>Release Updates to check</li> <li>Installed packages</li> <li>Org licenses</li> </ul> </li> <li>AI Deployment assistant<ul> <li>Add error <code>Change Matching Rule</code></li> </ul> </li> <li>Git Providers<ul> <li>On Pull Requests / Merge Requests comments, add hyperlinks to errors documentation URL</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#fixes","title":"Fixes","text":"<ul> <li>Avoid error when removing obsolete flows (workaround using SF CLI if tooling api connection fails). Fixes #662</li> <li>Improve Slack/Teams notifications display</li> <li>Display explicit error message in case a password is required to install a managed package.</li> </ul>"},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>Reorganize README content<ul> <li>Add link to Dreamforce 24 session</li> </ul> </li> <li>Deployment assistant: Improve documentation by adding examples of errors, and a standalone page for each tip</li> <li>Factorize the definition of DOC_ROOT_URL https://sfdx-hardis.cloudity.com</li> </ul>"},{"location":"CHANGELOG/#deprecations","title":"Deprecations","text":"<ul> <li> <p>Deprecate wrapper commands matching sfdx commands that will be removed. All replaced by sf hardis deploy start</p> <ul> <li><code>sfdx hardis:source:push</code></li> <li><code>sfdx hardis:source:deploy</code></li> <li><code>sfdx hardis:mdapi:retrieve</code></li> <li><code>sfdx hardis:mdapi:deploy</code></li> </ul> </li> </ul> <ul> <li>Deprecate <code>hardis:deploy:sources:metadata</code> as nobody uses metadata format anymore</li> </ul>"},{"location":"CHANGELOG/#removals","title":"Removals","text":"<ul> <li>Replace puppeteer by puppeteer-core: it means that if you use a command requiring puppeteer, please make sure to have a Chrome available in your environment (already integrated within the Docker image)</li> </ul> <ul> <li> <p>Get rid of sfdx-essentials plugin dependency by internalizing its used commands</p> <ul> <li><code>sf hardis:packagexml:append</code></li> <li><code>sf hardis:packagexml:remove</code></li> <li><code>sf hardis:project:clean:filter-xml-content</code></li> </ul> </li> </ul> <ul> <li> <p>Remove npm dependencies (some of them not maintained anymore)</p> <ul> <li>@adobe/node-fetch-retry</li> <li>@amplitude/node</li> <li>@keyv/redis</li> <li>@oclif/command</li> <li>@oclif/config</li> <li>@oclif/errors</li> <li>@salesforce/command</li> <li>@salesforce/ts-types</li> <li>find-package-json</li> <li>node-fetch</li> </ul> </li> </ul> <ul> <li>Remove not used keyValueStores to keep only Salesforce one</li> </ul>"},{"location":"CHANGELOG/#4530-2024-08-20","title":"[4.53.0] 2024-08-20","text":"<ul> <li>Upgrade workflows to Node 20 (fixes https://github.com/hardisgroupcom/sfdx-hardis/issues/668)</li> <li>Simplify login prompts messages (fixes https://github.com/hardisgroupcom/sfdx-hardis/issues/667)</li> <li>Upgrade to MegaLinter v8 (own workflows + template workflows)</li> <li>Update monitoring commands documentation</li> <li>Upgrade npm dependencies<ul> <li>axios</li> <li>inquirer</li> <li>moment</li> <li>open</li> <li>ora</li> <li>@supercharge/promise-pool</li> <li>remove strip-ansi dependency to build local function</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4520-2024-08-02","title":"[4.52.0] 2024-08-02","text":"<ul> <li>Minimum Node version is now 20</li> <li>hardis:work:save : Improve performances when cleaning project files</li> <li>Update Pipelines to add NOTIF_EMAIL_ADDRESS where it was missing</li> <li>Remove MS_TEAMS_WEBHOOK_URL from all pipelines as MsTeamsProvider is deprecated (use EmailProvider instead)</li> <li>Remove some useless code in EmailProvider</li> <li>Replace glob-promise by glob package</li> </ul>"},{"location":"CHANGELOG/#4510-2024-08-01","title":"[4.51.0] 2024-08-01","text":"<ul> <li>Deprecate Microsoft Teams Web Hooks notifications<ul> <li>Must be replaced by Email Notifications using the Ms Teams Channel email.</li> </ul> </li> <li>Handle bug when a branch .sfdx-hardis.yml config file is empty</li> <li>Upgrade default API version to 61</li> <li>Additional log when generating manifest package.xml from org</li> <li>Add error tip: Network issue (ECONNABORTED, ECONNRESET)</li> </ul>"},{"location":"CHANGELOG/#4501-2024-07-29","title":"[4.50.1] 2024-07-29","text":"<ul> <li>Fix report file name of hardis:org:monitor:limits</li> <li>Fix crash when GitProvider has been wrongly configured, and display information message</li> </ul>"},{"location":"CHANGELOG/#4500-2024-07-29","title":"[4.50.0] 2024-07-29","text":"<ul> <li>Add message in case of deployment check passing thanks to <code>testCoverageNotBlocking: true</code></li> <li>hardis:org:diagnose:legacyapi : Fix display error declared in bug #652</li> <li>Run legacy api detection daily with monitoring, as logs remain only 24h</li> </ul>"},{"location":"CHANGELOG/#4491-2024-07-27","title":"[4.49.1] 2024-07-27","text":"<ul> <li>Fix 4.49.0 (deployment error handler bug)</li> </ul>"},{"location":"CHANGELOG/#4490-2024-07-27","title":"[4.49.0] 2024-07-27","text":"<ul> <li>New command hardis:org:diagnose:instanceupgrade to get information about Org, its Salesforce instance and its next Platform Upgrade date. Sends notifications to Grafana if activated.</li> <li>Refactor Monitoring checks documentation</li> <li>hardis:project:deploy:sources:dx: After a failed Quick Deploy, use run with NoTestRun to improve perfs as we had previously succeeded to simulate the deployment</li> </ul>"},{"location":"CHANGELOG/#4481-2024-07-26","title":"[4.48.1] 2024-07-26","text":"<ul> <li>hardis:project:deploy:sources:dx: Fix issue with testCoverageNotBlocking</li> </ul>"},{"location":"CHANGELOG/#4480-2024-07-26","title":"[4.48.0] 2024-07-26","text":"<ul> <li>hardis:project:deploy:sources:dx: Allow new mode for running test during deployments: RunRepositoryTestsExceptSeeAllData (\u26a0\ufe0f Use with caution !)</li> </ul>"},{"location":"CHANGELOG/#4470-2024-07-22","title":"[4.47.0] 2024-07-22","text":"<ul> <li>Update emojis in prompts to make them more visible</li> <li>Replace <code>sfdx force:org:open</code> by <code>sf org open</code></li> </ul>"},{"location":"CHANGELOG/#4460-2024-07-18","title":"[4.46.0] 2024-07-18","text":"<ul> <li>Allow hardis:project:deploy:source:dx notifications to work if the deployment is performed before the Pull Request is merged (see Exotic Use Case)<ul> <li>Activate such mode with variable SFDX_HARDIS_DEPLOY_BEFORE_MERGE</li> </ul> </li> <li>Add link to Conga Article</li> <li>Add Conga article in README list of articles</li> </ul>"},{"location":"CHANGELOG/#4450-2024-07-14","title":"[4.45.0] 2024-07-14","text":"<ul> <li>New command hardis:org:files:import to import files exported using hardis:org:files:export</li> <li>Template management for SFDMU &amp; files import/export</li> <li>Update JSON schema to add <code>v60</code> in autoCleanTypes</li> </ul>"},{"location":"CHANGELOG/#4443-2024-07-12","title":"[4.44.3] 2024-07-12","text":"<ul> <li>Set GITLAB_API_REJECT_UNAUTHORIZED=false to avoid SSH rejections from Gitlab API</li> </ul>"},{"location":"CHANGELOG/#4442-2024-07-09","title":"[4.44.2] 2024-07-09","text":"<ul> <li>New config skipCodeCoverage, to use only in branch scoped config to not check for code coverage (Use with caution because won't work when deploying to production !)</li> </ul>"},{"location":"CHANGELOG/#4441-2024-07-08","title":"[4.44.1] 2024-07-08","text":"<ul> <li>QuickFix testlevel default value</li> </ul>"},{"location":"CHANGELOG/#4440-2024-07-08","title":"[4.44.0] 2024-07-08","text":"<ul> <li>New JSON schema properties, to use ONLY on branch scoped config and with caution !<ul> <li><code>testLevel</code>, to override the test level, with <code>RunRepositoryTests</code> for example</li> <li><code>runtests</code>, to override the list of tests to run, with <code>^(?!FLI|MyPrefix).*</code> for example</li> <li><code>testCoverageNotBlocking</code> , to make code coverage not blocking on a branch</li> </ul> </li> <li>Take in account <code>testCoverageNotBlocking</code> in deployment checks and PR summaries</li> </ul>"},{"location":"CHANGELOG/#4430-2024-07-06","title":"[4.43.0] 2024-07-06","text":"<ul> <li>hardis:work:save : Update prompt messages</li> <li>Remove direct URL to target org in case of deployment failure</li> <li>AI Deployment Assistant: Fix identification of error messages</li> <li>Add deployment tip \"Condition missing reference\"</li> </ul>"},{"location":"CHANGELOG/#4420-2024-07-02","title":"[4.42.0] 2024-07-02","text":"<ul> <li>hardis:project:deploy:sources:dx : If testlevel=RunRepositoryTests, option runtests can contain a regular expression to keep only class names matching it. If not set, it will run all test classes found in the repo</li> <li>Reduce size of README</li> <li>Update documentation about Authentication &amp; Security</li> <li>Add missing variables in workflows</li> </ul>"},{"location":"CHANGELOG/#4410-2024-06-29","title":"[4.41.0] 2024-06-29","text":"<ul> <li>AI Deployment Assistant: Integrate with OpenAI ChatGPT to find solutions to deployment issues</li> <li>Monitoring: Default 120mn timeout in Azure Workflow</li> <li>Backup: Replace colon in package file name</li> <li>New command hardis:project:fix:profiletabs to add / hide tabs directly in XML when such info is not retrieved by Salesforce CLI</li> </ul>"},{"location":"CHANGELOG/#4402-2024-06-18","title":"[4.40.2] 2024-06-18","text":"<ul> <li>hardis:org:diagnose:audittrail: Define new not suspect actions<ul> <li>Currency<ul> <li>updateddatedexchrate</li> </ul> </li> <li>Custom App Licenses<ul> <li>addeduserpackagelicense</li> <li>granteduserpackagelicense</li> </ul> </li> <li>Manage Users<ul> <li>unfrozeuser</li> </ul> </li> <li>Mobile Administration<ul> <li>assigneduserstomobileconfig</li> </ul> </li> </ul> </li> <li>hardis:org:monitor:all: Define relevant items as weekly, not daily</li> </ul>"},{"location":"CHANGELOG/#4401-2024-06-17","title":"[4.40.1] 2024-06-17","text":"<ul> <li>hardis:project:clean:minimizeprofiles: Allow to skip profiles refactoring using .sfdx-hardis.yml property skipMinimizeProfiles (can be useful for Experience Cloud profiles)</li> </ul>"},{"location":"CHANGELOG/#4400-2024-06-13","title":"[4.40.0] 2024-06-13","text":"<ul> <li>Deployment tips: add missingDataCategoryGroup (no DataCategoryGroup named...)</li> <li>handle commandsPreDeploy and commandPostDeploy to run custom command before and after deployments<ul> <li>If the commands are not the same depending on the target org, you can define them into config/branches/.sfdx-hardis-BRANCHNAME.yml instead of root config/.sfdx-hardis.yml</li> </ul> </li> </ul> <p>Example:</p> <pre><code>commandsPreDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='deploy.github@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\ncommandsPostDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='admin.user@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n</code></pre>"},{"location":"CHANGELOG/#4390-2024-06-13","title":"[4.39.0] 2024-06-13","text":"<ul> <li>hardis:clean:references: new option v60<ul> <li>Remove v61 userPermissions that do not exist in v60</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4382-2024-06-06","title":"[4.38.2] 2024-06-06","text":"<ul> <li>Fix npm packages installation for GitHub monitoring to avoid random failures</li> <li>Add _notifKey in Grafana notifications to be able to build unique alerts</li> </ul>"},{"location":"CHANGELOG/#4381-2024-06-04","title":"[4.38.1] 2024-06-04","text":"<ul> <li>Add installed packages in monitoring backup logs</li> </ul>"},{"location":"CHANGELOG/#4380-2024-06-03","title":"[4.38.0] 2024-06-03","text":"<ul> <li>New command hardis:org:diagnose:licenses to send used licenses to monitoring logs like Grafana</li> <li>hardis:org:diagnose:audittrail: Exclude some Add / Remove users from a Territory events from Suspect Audit Trail actions</li> <li>hardis:org:diagnose:unusedusers: Fix metric name for ActiveUsers</li> </ul>"},{"location":"CHANGELOG/#4375-2024-05-31","title":"[4.37.5] 2024-05-31","text":"<ul> <li>hardis:org:purge:flow: Bulkify Flow deletion to improve performances</li> </ul>"},{"location":"CHANGELOG/#4374-2024-05-28","title":"[4.37.4] 2024-05-28","text":"<ul> <li>Fix pipeline and instructions for Monitoring using GitHub Actions</li> </ul>"},{"location":"CHANGELOG/#4373-2024-05-28","title":"[4.37.3] 2024-05-28","text":"<ul> <li>Revert to previous dashboards version to avoid issues with use of panel</li> <li>Add debug capabilities for advanced cases (call with DEBUG=sfdxhardis)</li> </ul>"},{"location":"CHANGELOG/#4372-2024-05-27","title":"[4.37.2] 2024-05-27","text":"<ul> <li>Half-automate the retrieve of default Grafana Dashboards</li> <li>Fix ticketing collection on PR with GitHub integration</li> <li>Fix monitoring bitbucket pipeline so the git pull works</li> </ul>"},{"location":"CHANGELOG/#4371-2024-05-26","title":"[4.37.1] 2024-05-26","text":"<ul> <li>Truncate logs sent to Grafana Loki in case they are too big, to avoid they are not taken in account<ul> <li>Default truncate size: 500</li> </ul> </li> <li>Add flowPositions in .sfdx-hardis.yml JSON Schema</li> <li>Add Grafana Cloud setup tutorial</li> </ul>"},{"location":"CHANGELOG/#4370-2024-05-21","title":"[4.37.0] 2024-05-21","text":"<ul> <li>New command hardis:project:clean:flowpositions to replace positions by 0 on AutoLayout Flows, in order to diminish conflicts<ul> <li>Can be automated at each hardis:work:save if <code>flowPositions</code> added in .sfdx-hardis.yml autoCleanTypes property</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4360-2024-05-19","title":"[4.36.0] 2024-05-19","text":"<ul> <li>Update hardis:org:diagnose:unusedusers so it can also extract active users on a time period, thanks to option --returnactiveusers</li> <li>Add ACTIVE_USERS in weekly monitoring jobs</li> <li>Add JIRA variables to GitHub Workflows</li> </ul>"},{"location":"CHANGELOG/#4352-2024-05-15","title":"[4.35.2] 2024-05-15","text":"<ul> <li>Update monitoring default Gitlab, Azure &amp; GitHub Workflows</li> </ul>"},{"location":"CHANGELOG/#4351-2024-05-14","title":"[4.35.1] 2024-05-14","text":"<ul> <li>Fix unused users notification identifier</li> </ul>"},{"location":"CHANGELOG/#4350-2024-05-14","title":"[4.35.0] 2024-05-14","text":"<ul> <li>New command sfdx hardis:org:diagnose:unusedusers to find users that don't use their license !</li> </ul>"},{"location":"CHANGELOG/#4341-2024-05-13","title":"[4.34.1] 2024-05-13","text":"<ul> <li>Notifications org identifier: replace dot by __ to avoid mess with Grafana label filters</li> </ul>"},{"location":"CHANGELOG/#4340-2024-05-12","title":"[4.34.0] 2024-05-12","text":"<ul> <li>NotifProvider<ul> <li>Updates to also send metrics to Prometheus</li> <li>NOTIFICATIONS_DISABLE is now not applicable to ApiProvider who always sends notifs</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4332-2024-05-06","title":"[4.33.2] 2024-05-06","text":"<ul> <li>hardis:org:test:apex : Always send coverageValue, coverageTarget and the list of failing classes to API logs</li> </ul>"},{"location":"CHANGELOG/#4331-2024-05-05","title":"[4.33.1] 2024-05-05","text":"<ul> <li>Api logs enhancements:<ul> <li>Add severity and severityIcon in all log elements details</li> <li>Add dateTime property (ISO format) in all API logs</li> </ul> </li> <li>Remove deprecated way to call MsTeams notifications</li> <li>hardis:org:monitor:limits : Fix bug when some values are not returned</li> </ul>"},{"location":"CHANGELOG/#4330-2024-05-04","title":"[4.33.0] 2024-05-04","text":"<ul> <li>New notifications provider: ApiProvider (beta), that allows to send notifications via HTTP/JSON to remote endpoints, like Grafana Loki, but also any custom one</li> <li>New notification severity level: log, to send notifications via ApiProvider even when there is no detected issue</li> <li>Update all existing notifications to add detailed log lines and additional log data</li> <li>hardis:org:diagnose:audittrail: Fix lastndays not taken in account in some contexts</li> <li>Complete refactoring of hardis:org:test:apex (same behavior but much organized code)</li> <li>Notifications: Display success logs in blue</li> <li>New monitoring command: sfdx hardis:org:monitor:limits to alert in case org limits are over 50% or 75% usage</li> <li>Fix gitlab-ci-config.yml: More restrictive regex for deployment branches</li> </ul>"},{"location":"CHANGELOG/#4322-2024-05-01","title":"[4.32.2] 2024-05-01","text":"<ul> <li>Fix GitHub Actions check deploy workflow</li> </ul>"},{"location":"CHANGELOG/#4321-2024-04-30","title":"[4.32.1] 2024-04-30","text":"<ul> <li>hardis:work:new : Replace all non alphanumeric characters in new git branch name</li> </ul>"},{"location":"CHANGELOG/#4320-2024-04-24","title":"[4.32.0] 2024-04-24","text":"<ul> <li> <p>Enhance BitBucket Integration, by @Alainbates in https://github.com/hardisgroupcom/sfdx-hardis/pull/584</p> <ul> <li>Deployment status in Pull Request comments</li> <li>Quick Deploy to enhance performance</li> </ul> </li> </ul> <ul> <li>Remove useless close WebSocket issue display</li> </ul>"},{"location":"CHANGELOG/#4312-2024-04-10","title":"[4.31.2] 2024-04-10","text":"<ul> <li>QuickFix Monitoring setup</li> </ul>"},{"location":"CHANGELOG/#4311-2024-04-10","title":"[4.31.1] 2024-04-10","text":"<ul> <li>Fix json output (remove other console logs that are not supposed to be here)</li> </ul>"},{"location":"CHANGELOG/#4310-2024-04-10","title":"[4.31.0] 2024-04-10","text":"<ul> <li>Add native Jenkins integration with Jenkinsfile for CI/CD Pipeline</li> <li>Update default pipelines to add JIRA variables</li> <li>Better handle of Jira API issues</li> </ul>"},{"location":"CHANGELOG/#4300-2024-04-02","title":"[4.30.0] 2024-04-02","text":"<ul> <li>Fix default package-no-overwrite.xml (typos on NamesCredential &amp; RemoteSiteSetting)</li> <li>Add links to FAQ in documentation</li> <li>Add two new PMD rules for quality pmd-ruleset-high.xml and pmd-ruleset-medium.xml</li> </ul>"},{"location":"CHANGELOG/#4290-2024-03-25","title":"[4.29.0] 2024-03-25","text":"<ul> <li>Handle manifest/preDestructiveChanges.xml to delete items before deployments if necessary</li> <li>Update documentation about integrations</li> <li>Upgrade dependencies</li> </ul>"},{"location":"CHANGELOG/#4284-2024-03-11","title":"[4.28.4] 2024-03-11","text":"<ul> <li>Allow to override default scratch org duration using .sfdx-hardis.yml property scratchOrgDuration</li> </ul>"},{"location":"CHANGELOG/#4283-2024-03-05","title":"[4.28.3] 2024-03-05","text":"<ul> <li>Audit trail check: Ignore change phone number events</li> </ul>"},{"location":"CHANGELOG/#4282-2024-02-27","title":"[4.28.2] 2024-02-27","text":"<ul> <li>Fix wrong upgrade version notification</li> <li>Update PMD bypassing rules doc</li> </ul>"},{"location":"CHANGELOG/#4281-2024-02-26","title":"[4.28.1] 2024-02-26","text":"<ul> <li>Fix issue when using email notifications with multiple recipients</li> </ul>"},{"location":"CHANGELOG/#4280-2024-02-21","title":"[4.28.0] 2024-02-21","text":"<ul> <li>Minimum Node.js version is now v18</li> <li>New notifications channel: EmailProvider (use variable NOTIF_EMAIL_ADDRESS that can contain a comma-separated list of e-mail addresses)</li> <li>Update existing call to notifications to add attached files when Email notif channel is active</li> <li>Audit trail suspect actions: add the number of occurences for each suspect action found</li> <li>Add more not suspect actions: dkimRotationPreparationSuccessful,createdReportJob,deletedReportJob,DeleteSandbox</li> <li>Get tickets info: also check in ticket ids in branch name</li> <li>Remove force config restDeploy=true</li> <li>Rename Provided by sfdx-hardis into Powered by sfdx-hardis</li> </ul>"},{"location":"CHANGELOG/#4271-2024-02-10","title":"[4.27.1] 2024-02-10","text":"<ul> <li>Skip post-deployment notifications if nothing was deployed in delta mode</li> <li>Simplify JIRA post deployment error output</li> </ul>"},{"location":"CHANGELOG/#4270-2024-02-09","title":"[4.27.0] 2024-02-09","text":"<ul> <li>Skip legacy notifications if NotifProvider has been used</li> <li>Allow to send warning, error and critical notifications to secondary Slack or Teams channel, using variables SLACK_CHANNEL_ID_ERRORS_WARNINGS or MS_TEAMS_WEBHOOK_URL_ERRORS_WARNINGS</li> </ul>"},{"location":"CHANGELOG/#4263-2024-02-02","title":"[4.26.3] 2024-02-02","text":"<ul> <li>Add bash to sfdx-hardis docker image</li> </ul>"},{"location":"CHANGELOG/#4262-2024-02-01","title":"[4.26.2] 2024-02-01","text":"<ul> <li>Display warning message when failed to upload connected app</li> <li>Update documentation about how to work on a dev sandbox / scratch org</li> </ul>"},{"location":"CHANGELOG/#4261-2024-01-31","title":"[4.26.1] 2024-01-31","text":"<ul> <li>Update Contributor User Guide</li> <li>Empty predefined list of packages to install</li> </ul>"},{"location":"CHANGELOG/#4260-2024-01-27","title":"[4.26.0] 2024-01-27","text":"<ul> <li>Detect JIRA tickets even if there is only their identifiers in commits / PR text (see Documentation)</li> <li>Fix PR comment ticket URL when detail has not been found on server</li> <li>Monitoring: run non-critical commands only weekly by default (on saturdays)</li> </ul>"},{"location":"CHANGELOG/#4251-2024-01-18","title":"[4.25.1] 2024-01-18","text":"<ul> <li>Fix Microsoft Teams notifications formatting</li> </ul>"},{"location":"CHANGELOG/#4250-2024-01-15","title":"[4.25.0] 2024-01-15","text":"<ul> <li>Integration with Azure Boards (Work Items) ticketing system<ul> <li>Enrich MR/PR comments by adding work items references and links</li> <li>Enrich notifications comments by adding work items references and links</li> <li>Post a comment and a tag on Azure Work Items when they are deployed in a major org</li> </ul> </li> <li>Enhance JIRA integration by posting labels once an issue is deployed in a major org</li> </ul>"},{"location":"CHANGELOG/#4241-2024-01-11","title":"[4.24.1] 2024-01-11","text":"<ul> <li>Improve display of Microsoft Teams notifications</li> </ul>"},{"location":"CHANGELOG/#4240-2024-01-09","title":"[4.24.0] 2024-01-09","text":"<ul> <li>Add generic ticketing provider, that can identify any ticket references using:<ul> <li>GENERIC_TICKETING_PROVIDER_REGEX (Example for EasyVista: <code>([R|I][0-9]+-[0-9]+)</code>)</li> <li>GENERIC_TICKETING_PROVIDER_URL_BUILDER (Example for EasyVista: <code>https://instance.easyvista.com/index.php?ticket={REF}</code>)</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4233-2023-12-28","title":"[4.23.3] 2023-12-28","text":"<ul> <li>hardis:org:purge:flow: Ignore managed flows - Fixes #532</li> <li>hardis:work:new prevent parenthesis in branch name - Fixes #481</li> </ul>"},{"location":"CHANGELOG/#4232-2023-12-25","title":"[4.23.2] 2023-12-25","text":"<ul> <li>Catch errors when a JIRA comment has not been posted</li> <li>Simplify package-no-overwrite.xml management logs</li> </ul>"},{"location":"CHANGELOG/#4231-2023-12-25","title":"[4.23.1] 2023-12-25","text":"<ul> <li>Handle case when tickets have no content</li> </ul>"},{"location":"CHANGELOG/#4230-2023-12-25","title":"[4.23.0] 2023-12-25","text":"<ul> <li>Use jira-client package instead of jira.js to be compliant not only with JIRA Cloud, but also with Jira on-premise</li> <li>Improve delta logs</li> </ul>"},{"location":"CHANGELOG/#4220-2023-12-24","title":"[4.22.0] 2023-12-24","text":"<ul> <li>Add more info in pull requests comments<ul> <li>Commits summary</li> <li>Jira tickets</li> <li>Manual Actions</li> </ul> </li> <li>Integration with JIRA<ul> <li>Collect tickets info JIRA server</li> <li>Post comment on tickets once they are deployed</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4216-2023-12-22","title":"[4.21.6] 2023-12-22","text":"<ul> <li>New task: Ask confirmation before updating selected sandbox</li> <li>Deployment tips<ul> <li>Visibility is not allowed for type</li> </ul> </li> <li>Audit trail, ignore more events<ul> <li>Holidays: holiday_insert</li> <li>loginasgrantedtopartnerbt</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4215-2023-12-14","title":"[4.21.5] 2023-12-14","text":"<ul> <li>hardis:org:diagnose:audittrail<ul> <li>Display user name in logs &amp; notifications</li> <li>Add new excluded actions: changedemail, changedsenderemail, queueMembership, enableSIQUserNonEAC</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4214-2023-12-12","title":"[4.21.4] 2023-12-12","text":"<ul> <li>Fix the output column in the metadata status report to distinguish between inactive flows and validation rules identified in the source</li> </ul>"},{"location":"CHANGELOG/#4213-2023-12-08","title":"[4.21.3] 2023-12-08","text":"<ul> <li>Add more variables in default azure-pipelines.yml monitoring</li> <li>Fix output file name of inactive metadatas audit</li> </ul>"},{"location":"CHANGELOG/#4212-2023-12-08","title":"[4.21.2] 2023-12-08","text":"<ul> <li>Downgrade base docker image to alpine:3.18</li> </ul>"},{"location":"CHANGELOG/#4211-2023-12-08","title":"[4.21.1] 2023-12-08","text":"<ul> <li>Update Azure Pipelines workflows to add more variables (+ error message giving this list of variables)</li> <li>Fix notifs from Azure when spaces in url</li> <li>Fix monitoring job on Azure</li> <li>Add link to troubleshooting page if backup fails</li> <li>Handle notification message when there is no apex in the project</li> <li>Do not write report log when there are no differences during monitoring backup step</li> <li>Do not try to post PR comments if not in check deploy job</li> <li>Check unused licenses: fix crash when no permission set group assignments</li> <li>Fix URL to Azure Pull Requests</li> <li>Fix display name of PR author on Azure</li> </ul>"},{"location":"CHANGELOG/#4210-2023-12-06","title":"[4.21.0] 2023-12-06","text":"<ul> <li>hardis:lint:access: Add feature in access command to verify if an object permission exist twice or more in the same permission set</li> <li>hardis:org:monitor:backup: Allow to exclude more metadata types using env variable MONITORING_BACKUP_SKIP_METADATA_TYPES (example: `MONITORING_BACKUP_SKIP_METADATA_TYPES=CustomLabel,StaticResource,Translation`)</li> <li>When prompt for login, Suggest custom login URL as first choice by default</li> <li>CICD: Update default gitlab-ci-config.yml</li> <li>Configure Org CI Auth: Do not prevent to use main or master as production branch</li> </ul>"},{"location":"CHANGELOG/#4201-2023-12-04","title":"[4.20.1] 2023-12-04","text":"<ul> <li>Handle errors while calling monitoring commands</li> <li>Increase jsforce Bulk API Timeout (60 seconds)</li> <li>Set default Bulk Query retries to 3 attempts</li> </ul>"},{"location":"CHANGELOG/#4200-2023-12-04","title":"[4.20.0] 2023-12-04","text":"<ul> <li>Add feature in metadatastatus command to verify if a validation rule is inactive in the source</li> <li>hardis:lint:metadatastatus<ul> <li>Check inactive validation rules</li> <li>Add js documentation</li> </ul> </li> <li>Monitoring: Fix crash when a package name contains a slash</li> </ul>"},{"location":"CHANGELOG/#4191-2023-12-03","title":"[4.19.1] 2023-12-03","text":"<ul> <li>Output CSV mirror XLS files reports in a xls folder for easier browsing</li> <li>hardis:org:diagnose:unusedlicenses<ul> <li>Add more Profile &amp; Permission Set Licenses relationships</li> <li>Handle special cases where license is not stored on the permission set, like Sales User !</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4190-2023-12-02","title":"[4.19.0] 2023-12-02","text":"<ul> <li>New command sfdx hardis:org:diagnose:unusedlicenses to detect unused Permission Set Licenses (that you pay for anyway !)</li> </ul>"},{"location":"CHANGELOG/#4183-2023-11-29","title":"[4.18.3] 2023-11-29","text":"<ul> <li>Improve test cases notification</li> <li>Enhance monitoring documentation with more descriptions and screenshots</li> </ul>"},{"location":"CHANGELOG/#4182-2023-11-29","title":"[4.18.2] 2023-11-29","text":"<ul> <li>hardis:work:save enhancements<ul> <li>Display more output during cleaning jobs</li> <li>Keep userPermissions in Profiles when they are defined to <code>false</code></li> </ul> </li> </ul>"},{"location":"CHANGELOG/#4181-2023-11-29","title":"[4.18.1] 2023-11-29","text":"<ul> <li>Improve backup notifications display</li> </ul>"},{"location":"CHANGELOG/#4180-2023-11-29","title":"[4.18.0] 2023-11-29","text":"<ul> <li>Delta deployments is no more beta but Generally available</li> <li>Org Monitoring is no more beta but Generally available</li> <li>Generate CSV reports also in XLSX format for easier opening</li> </ul>"},{"location":"CHANGELOG/#4171-2023-11-28","title":"[4.17.1] 2023-11-28","text":"<ul> <li>Generate CSV output for hardis:org:monitor:backup</li> <li>Refactor git detection of created/updated/deleted files</li> </ul>"},{"location":"CHANGELOG/#4170-2023-11-28","title":"[4.17.0] 2023-11-28","text":"<ul> <li>hardis:org:backup: Monitor installed packages</li> <li>hardis:org:diagnose:audittrail: Add more ignored events<ul> <li>Email Administration: dkimRotationSuccessful</li> <li>Manage Users: PermSetGroupAssign</li> <li>Manage Users: PermSetGroupUnassign</li> </ul> </li> <li>Complete factorization of notification related methods</li> <li>Do not remove applicationVisibilities and recordTypeVisibilities from Profiles if they are defined to false (allow to hide applications)</li> </ul>"},{"location":"CHANGELOG/#4161-2023-11-27","title":"[4.16.1] 2023-11-27","text":"<ul> <li>Core: Factorize CSV generation</li> </ul>"},{"location":"CHANGELOG/#4160-2023-11-27","title":"[4.16.0] 2023-11-27","text":"<ul> <li>Allow to run commands but disable notifications, using NOTIFICATIONS_DISABLE env var or notificationsDisable .sfdx-hardis.yml property.</li> <li>Update JSON schema to add <code>notificationsDisable</code> and <code>monitoringDisable</code> properties</li> </ul>"},{"location":"CHANGELOG/#4151-2023-11-26","title":"[4.15.1] 2023-11-26","text":"<ul> <li>Improve notifs display with hardis:lint:access</li> </ul>"},{"location":"CHANGELOG/#4150-2023-11-24","title":"[4.15.0] 2023-11-24","text":"<ul> <li>Allow to disable not monitoring checks using monitoringDisable config file property, or MONITORING_DISABLE env var</li> <li>Add new feature to identify custom fields without description<ul> <li>hardis:lint:missingattributes : New command to identify custom field without description</li> </ul> </li> <li>Add new feature to identify custom metadata (flows) inactive in project<ul> <li>hardis:lint:metadatastatus : New command to identify custom metadata (Labels and custom permissions) not used in source code</li> </ul> </li> <li>Rework generate csv file : generateReportPath and generateCsvFile</li> <li>Update monitoring and slack documentation</li> <li>Fix slack, teams &amp; Azure notifications</li> </ul>"},{"location":"CHANGELOG/#4140-2023-11-23","title":"[4.14.0] 2023-11-23","text":"<ul> <li>Add new feature to identify custom metadata (Labels and custom permissions) not used in source code</li> <li>hardis:lint:unusedmetadata : New command to identify custom metadata (Labels and custom permissions) not used in source code</li> <li>Add two function getNotificationButtons and getBranchMarkdown in notifUtils.ts class to factorize code</li> <li>Video explaining how to setup sfdx-hardis monitoring</li> <li>Improve notifications display of lists</li> </ul>"},{"location":"CHANGELOG/#4134-2023-11-22","title":"[4.13.4] 2023-11-22","text":"<ul> <li>Upgrade ms-teams-webhook library so it works again !</li> <li>hardis:org:diagnose:audittrail: Add changedmanager to not suspect setup actions</li> </ul>"},{"location":"CHANGELOG/#4132-2023-11-21","title":"[4.13.2] 2023-11-21","text":"<ul> <li>hardis:lint:access: Do not display empty metadata types in notification.</li> <li>hardis:work:new: Improve prompt messages when asked if you want to refresh your sandbox</li> </ul>"},{"location":"CHANGELOG/#4131-2023-11-21","title":"[4.13.1] 2023-11-21","text":"<ul> <li>hardis:lint:access<ul> <li>Exclude custom settings, custom metadata and data cloud from fields access check</li> </ul> </li> <li>hardis:org:diagnose:audittrail<ul> <li>Add changedUserEmailVerifiedStatusUnverified and useremailchangesent to not suspect setup actions</li> </ul> </li> <li>Output info in case Ms Teams notification failed to be sent</li> </ul>"},{"location":"CHANGELOG/#4130-2023-11-19","title":"[4.13.0] 2023-11-19","text":"<ul> <li>Monitoring<ul> <li>Display package.xml content in logs when backup failed</li> <li>Update default package-skip-items.xml</li> <li>Call hardis:lint:access by default</li> <li>Handle empty sections</li> </ul> </li> <li>hardis:org:diagnose:audittrail enhancements:<ul> <li>Add PerSetUnassign in not suspect monitored actions in Setup Audit Trail</li> <li>Allow to append more allowed Setup Audit Trail sections &amp; actions using <code>.sfdx-hardis.yml</code> property monitoringAllowedSectionsActions</li> </ul> </li> <li>hardis:lint:access enhancements:<ul> <li>Exclude required fields and MasterDetails, that can not be defined on Permission Sets</li> <li>Output report file</li> <li>Send slack notification</li> <li>Add it by default in the monitoring commands</li> </ul> </li> <li>Doc<ul> <li>Update contributing infos (use <code>sf plugins link</code>)</li> </ul> </li> <li>hardis:files:export : Make the command compliant with Email attachments</li> </ul>"},{"location":"CHANGELOG/#4122-2023-11-15","title":"[4.12.2] 2023-11-15","text":"<ul> <li>Add user prompts for setup audit trail monitoring in interactive mode</li> </ul>"},{"location":"CHANGELOG/#4121-2023-11-15","title":"[4.12.1] 2023-11-15","text":"<ul> <li>Allow to exclude more usernames from monitoring using .sfdx-hardis.yml property monitoringExcludeUsernames</li> </ul>"},{"location":"CHANGELOG/#4120-2023-11-14","title":"[4.12.0] 2023-11-14","text":"<ul> <li>New command sfdx hardis:org:diagnose:audittrail to detect suspect actions in major orgs<ul> <li>Run by default in org monitoring</li> </ul> </li> <li>Fix notifications bulletpoints</li> <li>Fix Gitlab provider token collections when in monitoring mode</li> </ul>"},{"location":"CHANGELOG/#4110-2023-11-14","title":"[4.11.0] 2023-11-14","text":"<ul> <li>If QuickDeploy failed, by default do not use delta for a deployment after a merge between a minor and a major branch</li> <li>Allow to tweak delta deployments configuration (but it's really better to use default opinionated default config !)</li> </ul>"},{"location":"CHANGELOG/#4103-2023-11-12","title":"[4.10.3] 2023-11-12","text":"<ul> <li>Allow to configure monitoring on deployment repositories (Fix #477)</li> <li>Forbid to configure CI authentication on main or master branch</li> <li>Do not send legacy API notifications when there are no issues (Fix #478)</li> <li>Upgrade dependencies</li> </ul>"},{"location":"CHANGELOG/#4102-2023-11-07","title":"[4.10.2] 2023-11-07","text":"<ul> <li>If you want to force the use full deployment on a delta project Pull Request/ Merge Request, add nodelta in your latest commit title or text.</li> <li>Display FULL / DELTA / Quick Deploy info at the bottom of the logs.</li> <li>sfdx hardis:org:retrieve:packageconfig: Do not replace Ids when updating the .sfdx-hardis.yml list of packages using packages listed from an org</li> </ul>"},{"location":"CHANGELOG/#4101-2023-11-06","title":"[4.10.1] 2023-11-06","text":"<ul> <li>Improve delta display in logs</li> <li>Display Quick Deploy icon in slack notifications</li> <li>Update Azure Pipelines default pipelines for delta deployments compliance</li> <li>Update slack integration documentation</li> <li>Add tutorials for authentication configuration on CI/CD servers</li> </ul>"},{"location":"CHANGELOG/#410o-2023-11-04","title":"[4.10.O] 2023-11-04","text":"<ul> <li>Allow to deploy in delta during PR checks between minor and major branches<ul> <li>To activate it, define <code>useDeltaDeployment: true</code> in <code>.sfdx-hardis.yml</code>, or set env variable USE_DELTA_DEPLOYMENT with value <code>true</code></li> <li>Make sure your GitHub, Gitlab, Azure or Bitbucket yaml workflows are up to date</li> </ul> </li> <li>Overwrite management: Rename packageDeployOnce.xml into package-no-overwrite.xml (compatibility with packageDeployOnce.xml file name is kept)</li> </ul>"},{"location":"CHANGELOG/#492-2023-10-31","title":"[4.9.2] 2023-10-31","text":"<ul> <li>Improve GitHub monitoring Workflow</li> <li>Enhance monitoring documentation</li> </ul>"},{"location":"CHANGELOG/#491-2023-10-31","title":"[4.9.1] 2023-10-31","text":"<ul> <li>New deployment error tips:<ul> <li>Invalid custom summary formula definition</li> </ul> </li> <li>Add artifacts config on bitbucket-pipelines.yml</li> <li>Add more comments in Monitoring workflows</li> </ul>"},{"location":"CHANGELOG/#490-2023-10-30","title":"[4.9.0] 2023-10-30","text":"<ul> <li>Refactor Monitoring configuration and execution (beta)<ul> <li>If you already have a monitoring v1 repository, deprecate it and create a new one with the new monitoring setup and pipelines</li> <li>Send slack notifications<ul> <li>Latest updates detected in org</li> <li>Failing apex tests, or insufficient code coverage</li> <li>Deprecated API calls detected</li> </ul> </li> <li>Full setup documentation<ul> <li>GitHub Actions</li> <li>Gitlab CI</li> <li>Azure Pipelines</li> <li>Bitbucket Pipelines</li> </ul> </li> <li>Totally rewritten command sfdx hardis:org:configure:monitoring</li> <li>New command sfdx hardis:org:monitor:backup</li> <li>New command sfdx hardis:org:monitor:all</li> </ul> </li> <li>Simplify <code>sfdx hardis:project:configure:auth</code> (Configure Org CI Authentication)</li> <li>Disable auto-update for .gitignore &amp; .forceignore</li> <li>Improve documentation related to pull and commit</li> </ul>"},{"location":"CHANGELOG/#481-2023-10-28","title":"[4.8.1] 2023-10-28","text":"<ul> <li>Catch \"Cannot start the OAuth redirect server on port 1717\" and give instructions to user to kill the process</li> </ul>"},{"location":"CHANGELOG/#480-2023-10-25","title":"[4.8.0] 2023-10-25","text":"<ul> <li>Allow to use Device login for Code Builder compatibility</li> <li>New option to clear cache if an authenticated org does not appear in the choices</li> </ul>"},{"location":"CHANGELOG/#470-2023-10-24","title":"[4.7.0] 2023-10-24","text":"<ul> <li>hardis:org:files:export: New configuration available to export files: outputFileNameFormat, with available values:<ul> <li>title (default)</li> <li>title_id</li> <li>id_title</li> <li>id</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#466-2023-10-20","title":"[4.6.6] 2023-10-20","text":"<ul> <li>Fix crash when converting orgCoverage to string</li> </ul>"},{"location":"CHANGELOG/#465-2023-10-17","title":"[4.6.5] 2023-10-17","text":"<ul> <li>Do not use direct call to jsforce dependency to avoid crash ! ( related to https://github.com/forcedotcom/cli/issues/2508#issuecomment-1760274510 )</li> <li>Update documentation</li> <li>Update comparative table in doc</li> </ul>"},{"location":"CHANGELOG/#464-2023-09-28","title":"[4.6.4] 2023-09-28","text":"<ul> <li>hardis:work:save : Fix issue when there is an empty commit because of pre-commit hooks</li> </ul>"},{"location":"CHANGELOG/#463-2023-09-27","title":"[4.6.3] 2023-09-27","text":"<ul> <li>Add installation video tutorial: https://www.youtube.com/watch?v=LA8m-t7CjHA</li> </ul>"},{"location":"CHANGELOG/#462-2023-09-26","title":"[4.6.2] 2023-09-26","text":"<ul> <li>Fix return code for wrapper commands force:source:deploy, force:source:push and force:mdapi:deploy</li> <li>Fix --skipauth not taken in account with @salesforce/cli</li> <li>Fixed PR coverage to use float over string</li> </ul>"},{"location":"CHANGELOG/#461-2023-09-26","title":"[4.6.1] 2023-09-26","text":"<ul> <li>Fix auth issue with force:source &amp; force:mdapi wrapper sfdx-hardis commands</li> </ul>"},{"location":"CHANGELOG/#460-2023-09-20","title":"[4.6.0] 2023-09-20","text":"<ul> <li> <p>sfdx-hardis &amp; Slack Integration</p> <ul> <li>Easy configuration</li> <li>Deployment notifications to a common channel, and also to git branch dedicated channel</li> </ul> </li> </ul> <ul> <li> <p>Native BitBucket CI/CD Pipeline for PR deployment checks and deployments to major orgs after merge</p> <ul> <li>PR comments are not implemented yet but BitBucket can already be used for production</li> </ul> </li> </ul> <ul> <li> <p>hardis:project:deploy:dx enhancements:</p> <ul> <li>Added new option --testlevel RunRepositoryTests which will dynamically detect all GIT repository test classes and runs the deployment with found tests. This will speed up the validation/deployment on cases where GIT repository module contains subset of all tests found in the org</li> <li>Added --runtests support in order to pass certain APEX test classes when --testlevel RunSpecifiedTests is used</li> </ul> </li> </ul> <ul> <li>Embed Dreamforce 23 slides in documentation</li> </ul>"},{"location":"CHANGELOG/#451-2023-09-11","title":"[4.5.1] 2023-09-11","text":"<ul> <li>GitHub Integration: Fix Quick Deploy on Pull Requests</li> </ul>"},{"location":"CHANGELOG/#450-2023-09-11","title":"[4.5.0] 2023-09-11","text":"<ul> <li>GitHub Integration: Implement automated comments &amp; Quick Deploy on Pull Requests</li> </ul>"},{"location":"CHANGELOG/#440-2023-09-10","title":"[4.4.0] 2023-09-10","text":"<ul> <li>Make sfdx-hardis CI/CD Pipelines natively compliant with GitHub Actions , by @legetz</li> <li>Create sfdx project: Change defaut first major branch name to <code>integration</code> (it was previously <code>develop</code>)</li> <li>Update default API version to 58.0</li> <li>Fix bug when user email is input the first time</li> </ul>"},{"location":"CHANGELOG/#432-2023-09-08","title":"[4.3.2] 2023-09-08","text":"<ul> <li>Updates new task, commit &amp; save task documentation &amp; screenshots</li> </ul>"},{"location":"CHANGELOG/#431-2023-09-07","title":"[4.3.1] 2023-09-07","text":"<ul> <li>Improve message when deploying metadata to org from local sfdx-hardis</li> <li>Improve documentation to handle merge requests and display links at the end of hardis:work:save</li> </ul>"},{"location":"CHANGELOG/#430-2023-09-05","title":"[4.3.0] 2023-09-05","text":"<ul> <li>Back to normal since https://github.com/forcedotcom/cli/issues/2445 is fixed</li> </ul>"},{"location":"CHANGELOG/#425-2023-09-05","title":"[4.2.5] 2023-09-05","text":"<ul> <li>Downgrade to sfdx-cli until https://github.com/forcedotcom/cli/issues/2445 is solved.</li> </ul>"},{"location":"CHANGELOG/#424-2023-09-05","title":"[4.2.4] 2023-09-05","text":"<ul> <li>Downgrade @salesforce/plugin-deploy-retrieve to v1.17.6 as workaround for SF cli bug https://github.com/forcedotcom/cli/issues/2445</li> </ul>"},{"location":"CHANGELOG/#423-2023-09-04","title":"[4.2.3] 2023-09-04","text":"<ul> <li>Fix issues with Org monitoring when there are issues with Legacy API</li> </ul>"},{"location":"CHANGELOG/#422-2023-09-01","title":"[4.2.2] 2023-09-01","text":"<ul> <li>Fix upgrade warning message that should not appear when there is no upgrade to perform (detected by @mamasse19)</li> </ul>"},{"location":"CHANGELOG/#421-2023-08-30","title":"[4.2.1] 2023-08-30","text":"<ul> <li>Fix issue in sfdx commands wrapping following the use of @salesforce/cli</li> <li>Config auth: phrases in bold when needing to relaunch the same command after org selection</li> </ul>"},{"location":"CHANGELOG/#420-2023-08-30","title":"[4.2.0] 2023-08-30","text":"<ul> <li>Simplify UX of hardis:project:configure:auth</li> <li>Factorize prompting of email</li> <li>Expire sfdx-hardis connected app token after 3h</li> <li>Update documentation to add workaround in case there is a crash when retrieving all sources when initializing a DX project from an existing org</li> <li>Add output to explain how to not use QuickDeploy if not wanted</li> <li>Update Quick Deploy documentation</li> </ul>"},{"location":"CHANGELOG/#412-2023-08-24","title":"[4.1.2] 2023-08-24","text":"<ul> <li>When there is a crash in forceinstalled:list , do not crash but return empty array and display an error message</li> </ul>"},{"location":"CHANGELOG/#411-2023-08-23","title":"[4.1.1] 2023-08-23","text":"<ul> <li>Improve error message when Git Provider not available</li> <li>Update default azure-pipelines-deployment.yml to add mandatory variables for QuickDeploy</li> </ul> <pre><code>SYSTEM_ACCESSTOKEN: $(System.AccessToken)\nCI_SFDX_HARDIS_AZURE_TOKEN: $(System.AccessToken)\nSYSTEM_COLLECTIONURI: $(System.CollectionUri)\nBUILD_REPOSITORY_ID: $(Build.Repository.ID)\n</code></pre>"},{"location":"CHANGELOG/#410-2023-08-22","title":"[4.1.0] 2023-08-22","text":"<ul> <li>Manage QuickDeploy when available (disable by defining env var <code>SFDX_HARDIS_QUICK_DEPLOY=false</code>)</li> </ul>"},{"location":"CHANGELOG/#401-2023-08-18","title":"[4.0.1] 2023-08-18","text":"<p>BREAKING CHANGE: If you are not using sfdx-hardis docker images, you need to manually update your CI/CD pipelines scripts using sfdx-hardis (gitlab-ci.yml, azure-pipelines.yml...) to:</p> <ul> <li>replace <code>sfdx-cli</code> by <code>@salesforce/cli</code></li> <li>Add <code>sf plugins install @salesforce/plugin-packaging</code> just after <code>npm install @salesforce/cli --global</code></li> </ul> <p>Other upgrades</p> <ul> <li>Upgrade CI/CD scripts and sfdx-hardis docker images from sfdx-cli to @salesforce/cli (sfdx commands remain called in background), and add <code>@salesforce/plugin-packaging</code> by default</li> <li>Now also release sfdx-hardis images on GitHub Packages (ghcr.io)</li> <li>Internal CI refactorization<ul> <li>Secure releases with GitHub Actions permissions &amp; environments</li> <li>Switch to official docker build &amp; push action</li> <li>Upgrade MegaLinter</li> <li>Upgrade npm dependencies</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#3194-2023-07-18","title":"[3.19.4] 2023-07-18","text":"<ul> <li>Add confirmation before resetting a git branch from VsCode command \"Reset selected list of items to merge\" (from an original idea of @derroman)</li> </ul>"},{"location":"CHANGELOG/#3193-2023-07-10","title":"[3.19.3] 2023-07-10","text":"<ul> <li>Allow to disable red colors for force:source:deploy output using env variable SFDX_HARDIS_DEPLOY_ERR_COLORS=false</li> </ul>"},{"location":"CHANGELOG/#3192-2023-07-06","title":"[3.19.2] 2023-07-06","text":"<ul> <li>Add packaging in online doc menu</li> </ul>"},{"location":"CHANGELOG/#3191-2023-07-05","title":"[3.19.1] 2023-07-05","text":"<ul> <li>Add Hotfix management (BUILD vs RUN) in CI/CD documentation</li> <li>Add Packaging &amp; package version instructions in documentation</li> </ul>"},{"location":"CHANGELOG/#3190-2023-07-03","title":"[3.19.0] 2023-07-03","text":"<ul> <li>Monitoring: Do not exclude custom fields on managed objects   -ex: Remove <code>Ns__Object__c.Ns__Field__c</code>, but keep <code>Ns__Object__c.Field__c</code></li> </ul>"},{"location":"CHANGELOG/#3181-2023-06-13","title":"[3.18.1] 2023-06-13","text":"<ul> <li>QuickFix hardis:work:save when branch has not been created on the computer</li> </ul>"},{"location":"CHANGELOG/#3180-2023-06-07","title":"[3.18.0] 2023-06-07","text":"<ul> <li>Clean entitlement items, by @yamioliva in https://github.com/hardisgroupcom/sfdx-hardis/pull/381</li> </ul>"},{"location":"CHANGELOG/#3170-2022-05-30","title":"[3.17.0] 2022-05-30","text":"<ul> <li>New command hardis:org:generate:packagexmlfull to generate the full package.xml of a selected Salesforce org</li> </ul>"},{"location":"CHANGELOG/#3161-2022-05-29","title":"[3.16.1] 2022-05-29","text":"<ul> <li>Also remove standard fields when running hardis:project:clean:standarditems</li> <li>New Deployment tips<ul> <li>Wrong api Version of a Metadata</li> <li>Unknown user</li> </ul> </li> <li>Upgrade to MegaLinter v7</li> </ul>"},{"location":"CHANGELOG/#3160-2022-05-24","title":"[3.16.0] 2022-05-24","text":"<ul> <li>New ENV variables to override default wait on retrieve/deploy/test commands<ul> <li>SFDX_RETRIEVE_WAIT_MINUTES</li> <li>SFDX_DEPLOY_WAIT_MINUTES</li> <li>SFDX_TEST_WAIT_MINUTES</li> </ul> </li> <li>Update default .forceignore content</li> </ul>"},{"location":"CHANGELOG/#3150-2022-05-11","title":"[3.15.0] 2022-05-11","text":"<ul> <li>Allow to define property availableProjects so when user clicks on New task (hardis:work:new), he/she is asked to select a project, that will be used to build the new git branch name</li> <li>When creating new task, store the target branch so it is not prompted again when waiting to save/publish the task.</li> </ul>"},{"location":"CHANGELOG/#3142-2022-05-03","title":"[3.14.2] 2022-05-03","text":"<ul> <li>More explicit text to ask user if he/she wants to update its selected sandbox while creating a new task</li> <li>Do not ask to change default target branch if there are multiple available branches</li> </ul>"},{"location":"CHANGELOG/#3141-2022-04-19","title":"[3.14.1] 2022-04-19","text":"<ul> <li>Allow to override the default deployment wait time (60) using variable SFDX_DEPLOY_WAIT_MINUTES</li> <li>Update JSON schema to add customOrgColors</li> </ul>"},{"location":"CHANGELOG/#3140-2022-04-14","title":"[3.14.0] 2022-04-14","text":"<ul> <li>Fix breaking change of sfdx-git-delta (many thanks @scolladon !)</li> <li>Deploy tips<ul> <li>Invalid report type</li> <li>Missing report</li> <li>Update missing email template message</li> </ul> </li> <li>Add more space between error lines in PR/MR comments</li> <li>Upgrade xml2js dependency</li> <li>Update call to MegaLinter in Azure integrations</li> </ul>"},{"location":"CHANGELOG/#3131-2022-04-12","title":"[3.13.1] 2022-04-12","text":"<ul> <li>Fix missing sfdx-git-delta in Docker image</li> </ul>"},{"location":"CHANGELOG/#3130-2022-04-06","title":"[3.13.0] 2022-04-06","text":"<ul> <li>Change defaut package install mode to AdminsOnly</li> <li>When minimizing Profiles, do not remove the personAccountDefault=true elements</li> <li>Add new deploy tip: Error parsing file</li> </ul>"},{"location":"CHANGELOG/#3123-2022-04-04","title":"[3.12.3] 2022-04-04","text":"<ul> <li>Do not add EmailTemplate and Flows as separate items in deploymentPlan, as metadata API now can handle their deployment with the rest of the sources</li> <li>Add new deployTip: Missing multi-currency field</li> <li>Update label when creating a new task using an existing sandbox</li> </ul>"},{"location":"CHANGELOG/#3122-2022-03-30","title":"[3.12.2] 2022-03-30","text":"<ul> <li>New deployment error tips<ul> <li>SortOrder must be in sequential order from 1. (Duplicate Rules issue)</li> <li>Invalid field:ACCOUNT.NAME in related list:RelatedContactAccountRelationList</li> </ul> </li> <li>Add more matchers for duplicate detector</li> </ul>"},{"location":"CHANGELOG/#3121-2022-03-29","title":"[3.12.1] 2022-03-29","text":"<ul> <li>Fix false positive error in deployment job when there is no related Pull/Merge request</li> </ul>"},{"location":"CHANGELOG/#3120-2022-03-23","title":"[3.12.0] 2022-03-23","text":"<ul> <li>Integration with Azure Pipelines Pull Request threads</li> <li>hardis:work:new: Allow to select no org even of sandbox or scratch is forced on the project using config property allowedOrgTypes</li> <li>Doc: rename User Guide into Contributor Guide</li> </ul>"},{"location":"CHANGELOG/#3111-2022-03-20","title":"[3.11.1] 2022-03-20","text":"<ul> <li>Better fix for root path issues (internal error)</li> </ul>"},{"location":"CHANGELOG/#3110-2022-03-20","title":"[3.11.0] 2022-03-20","text":"<ul> <li>Fix root path issues (internal error)</li> </ul>"},{"location":"CHANGELOG/#3102-2022-03-16","title":"[3.10.2] 2022-03-16","text":"<ul> <li>Fix sandbox check when calling hardis:source:push</li> </ul>"},{"location":"CHANGELOG/#3101-2022-03-15","title":"[3.10.1] 2022-03-15","text":"<ul> <li>Quick fix Gitlab integration when there is no MR associated to a deployment</li> </ul>"},{"location":"CHANGELOG/#3100-2022-03-15","title":"[3.10.0] 2022-03-15","text":"<ul> <li>Post a Gitlab Merge Request note when checking a deployment (beta)<ul> <li>Deployment errors with resolution tips</li> <li>Failing test classes</li> <li>Code coverage</li> </ul> </li> <li>Do not remove then restore lookup filters when source:push on a source-tracked sandbox</li> <li>Catch and display errors when caused by internet connection issue</li> </ul>"},{"location":"CHANGELOG/#392-2022-03-09","title":"[3.9.2] 2022-03-09","text":"<ul> <li>Update deploy tips for error Unknown user permission: SendExternalEmailAvailable</li> </ul>"},{"location":"CHANGELOG/#391-2022-03-08","title":"[3.9.1] 2022-03-08","text":"<ul> <li>Improve logs for false positive after package installation failure</li> <li>Remove useless and scary log after a successful login :)</li> <li>Remove npm cache from Docker image</li> </ul>"},{"location":"CHANGELOG/#390-2022-03-08","title":"[3.9.0] 2022-03-08","text":"<ul> <li>New task with source tracked sandbox:<ul> <li>Do not allow to select a major org for dev or config</li> <li>Open SF org if selected from the already connected list</li> <li>Init packages only if defined in config</li> <li>Enhance labels</li> </ul> </li> <li>Save task: Notify that once the merge request is merged, you must create a new task that will create a new branch</li> <li>Improve login error messages</li> <li>Use latest version of MegaLinter</li> </ul>"},{"location":"CHANGELOG/#380-2022-03-03","title":"[3.8.0] 2022-03-03","text":"<ul> <li>Manage deprecation of force:mdapi:legacy:deploy, replaced by force:mdapi:deploy</li> <li>Update default packageDeployOnce.xml when creating a new project (related to Overwrite management)</li> <li>Update CI/CD documentation<ul> <li>Initialize orgs</li> </ul> </li> <li>Update labels of prompts when creating a new sfdx-hardis project</li> </ul>"},{"location":"CHANGELOG/#371-2022-02-27","title":"[3.7.1] 2022-02-27","text":"<ul> <li>Use tooling API to retrieve ApexLogs for deletion, by @thvd in https://github.com/hardisgroupcom/sfdx-hardis/pull/321</li> </ul>"},{"location":"CHANGELOG/#370-2022-02-27","title":"[3.7.0] 2022-02-27","text":"<ul> <li>Add demo video about configuring authentication between CI and Salesforce orgs</li> <li>Update CI/CD documentation</li> <li>Update branding</li> </ul>"},{"location":"CHANGELOG/#360-2022-02-23","title":"[3.6.0] 2022-02-23","text":"<ul> <li>Add sfdx sources to monitoring for better readability</li> <li>Change example of email addresses for prompts</li> <li>Update CI/CD recommendations in documentation</li> </ul>"},{"location":"CHANGELOG/#350-2022-02-22","title":"[3.5.0] 2022-02-22","text":"<ul> <li>Update default overwrite config (<code>packageDeployOnce.xml</code>)</li> <li>Setup CI: Define default Azure pipelines YML files</li> <li>Fix notification logs for Azure Pipelines</li> </ul>"},{"location":"CHANGELOG/#340-2022-02-21","title":"[3.4.0] 2022-02-21","text":"<ul> <li>Move documentation to https://sfdx-hardis.cloudity.com</li> </ul>"},{"location":"CHANGELOG/#332-2022-02-17","title":"[3.3.2] 2022-02-17","text":"<ul> <li>Fix default monitoring for Azure pipelines</li> <li>Update CI documentation (Azure)</li> </ul>"},{"location":"CHANGELOG/#331-2022-02-16","title":"[3.3.1] 2022-02-16","text":"<ul> <li>Fix check of newer package installed</li> </ul>"},{"location":"CHANGELOG/#330-2022-02-14","title":"[3.3.0] 2022-02-14","text":"<ul> <li>Compliance of monitoring setup with Azure Pipelines</li> <li>hardis:org:retrieve:source:metadata enhancements<ul> <li>new option --includemanaged, disabled by default, to avoid having too many items to retrieve during monitoring job</li> <li>allow to force monitoring additional tasks using env var SFDX_HARDIS_MONITORING set to \"true\"</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#320-2022-02-10","title":"[3.2.0] 2022-02-10","text":"<ul> <li>Fix issue when logging to a new org during command hardis:source:retrieve</li> <li>Implement check of code coverage when calling sfdx hardis:project:deploy:sources:dx --check<ul> <li>75% minimum by default, overridable in property apexTestsMinCoverageOrgWide in .sfdx-hardis.yml, or using env var APEX_TESTS_MIN_COVERAGE_ORG_WIDE</li> </ul> </li> <li>Add --checkcoverage option to wrapper command hardis:source:deploy<ul> <li>Example: <code>sfdx hardis:source:deploy -x manifest/package.xml --wait 60 --ignorewarnings --testlevel RunLocalTests --postdestructivechanges ./manifest/destructiveChanges.xml --targetusername nicolas.vuillamy@cloudity.com --checkonly --checkcoverage --verbose --coverageformatters json-summary</code></li> </ul> </li> </ul>"},{"location":"CHANGELOG/#310-2022-02-07","title":"[3.1.0] 2022-02-07","text":"<ul> <li>Reset local sfdx tracking when reusing a sandbox for a new task</li> </ul>"},{"location":"CHANGELOG/#300-2022-02-07","title":"[3.0.0] 2022-02-07","text":"<ul> <li>Breaking change: SFDX_HARDIS_DEPLOY_IGNORE_SPLIT_PACKAGES is now \"true\" by default. If you want to apply the deploymentPlan in .sfdx-hardis, you need to define variable SFDX_HARDIS_DEPLOY_IGNORE_SPLIT_PACKAGES=\"false\"</li> </ul>"},{"location":"CHANGELOG/#21000-2022-02-07","title":"[2.100.0] 2022-02-07","text":"<ul> <li>hardis:work:new:: When creating a new task and using a source-tracked sandbox, ask user to push sources, assign permission sets and load data to initialize it.</li> <li>Add explicit error message when scratch org creation is caused by a limit reach</li> <li>Update default API version to 56.0</li> <li>Improve labels when prompting to select an org</li> <li>Update CI/CD documentation</li> </ul>"},{"location":"CHANGELOG/#2991-2022-01-31","title":"[2.99.1] 2022-01-31","text":"<ul> <li>Fix <code>hardis:project:clean:hiddenitems</code> when multiple files in the same folder match the same glob pattern</li> <li>Update documentation, fix typos and dead links</li> </ul>"},{"location":"CHANGELOG/#2990-2022-01-30","title":"[2.99.0] 2022-01-30","text":"<ul> <li>Replace prompts library by inquirer, because prompts is buggy</li> <li>Dockerfile: Workaround for https://github.com/forcedotcom/salesforcedx-apex/issues/213 (force:apex:test:run with code coverage crashing on some Gitlab runners with Invalid time value)</li> <li>Allow to override the proposed branch names when calling hardis:work:new, using property branchPrefixChoices</li> <li>hardis:project:clean:hiddenitems: Also clean LWC with hidden content</li> <li>Add yarn in dockerfile</li> </ul>"},{"location":"CHANGELOG/#2981-2022-01-23","title":"[2.98.1] 2022-01-23","text":"<ul> <li>Fix hardis:org:purge:flow when flow prompt selection is <code>all</code></li> </ul>"},{"location":"CHANGELOG/#2980-2022-01-23","title":"[2.98.0] 2022-01-23","text":"<ul> <li>Documentation: Add CI/CD user guide and release manager guide, available at https://sfdx-hardis.cloudity.com/salesforce-ci-cd-home/</li> <li>New .sfdx-hardis.yml config property allowedOrgTypes, allowing to define the type(s) or org that can be used for implementation: (sandbox and/or scratch)</li> </ul>"},{"location":"CHANGELOG/#2973-2022-11-30","title":"[2.97.3] 2022-11-30","text":"<ul> <li>QuickFix System.debug removal</li> </ul>"},{"location":"CHANGELOG/#2972-2022-11-30","title":"[2.97.2] 2022-11-30","text":"<ul> <li>QuickFix</li> </ul>"},{"location":"CHANGELOG/#2971-2022-11-30","title":"[2.97.1] 2022-11-30","text":"<ul> <li>QuickFix hardis:lint:access</li> </ul>"},{"location":"CHANGELOG/#2970-2022-11-30","title":"[2.97.0] 2022-11-30","text":"<ul> <li>New command hardis:lint:access to analyze of items in sources are not present within profiles and/or permission sets</li> </ul>"},{"location":"CHANGELOG/#2961-2022-11-17","title":"[2.96.1] 2022-11-17","text":"<ul> <li>Fix error when assigning already existing PS</li> <li>Update default CI config</li> </ul>"},{"location":"CHANGELOG/#2960-2022-11-09","title":"[2.96.0] 2022-11-09","text":"<ul> <li>Replace <code>sfdx force:package:install</code> with <code>sfdx force:package:beta:install</code></li> <li>Do not cause deployment to fail when a deploying an older managed package version<ul> <li>Instead, deployment will assume the newer version meets the requirement</li> </ul> </li> <li>hardis:scratch:create : Avoid error in case of already existing assignment of PermissionSet SfdxHardisDeferSharingRecalc</li> <li>Update Node.js minimum version to 16.x</li> </ul>"},{"location":"CHANGELOG/#2952-2022-10-19","title":"[2.95.2] 2022-10-19","text":"<ul> <li>Replace use of sfpowerkit by default command <code>sfdx force:source:manifest:create</code></li> <li>Manage cache for listing orgs</li> <li>Update hardisversion:create to allow to<ul> <li>install it later on an org</li> <li>immediately delete it</li> </ul> </li> <li>New command hardis:project:metadata:findduplicates to detect when git messed during an automated merging of conflicts</li> <li>Factorize check of sfdx project existence</li> <li>Fix default gitlab-ci default pipeline</li> <li>Replace supportsDevhubUsername by requiresDevhubUsername in command classes when necessary</li> <li>Add parameters <code>skipauth</code> and <code>websocket</code> on <code>sfdx hardis:project:metadata:duplicate</code></li> <li>Add missing parameter <code>skipauth</code> on <code>sfdx hardis:package:install</code></li> </ul>"},{"location":"CHANGELOG/#2943-2022-09-15","title":"[2.94.3] 2022-09-15","text":"<ul> <li>Automate SSL certificate generation + force:source:deploy replaced by force:source:legacy:deploy</li> </ul>"},{"location":"CHANGELOG/#2942-2022-09-09","title":"[2.94.2] 2022-09-09","text":"<ul> <li>hardis:project:clean:minimizeprofiles: Do not strip tabVisibilities from Profiles</li> </ul>"},{"location":"CHANGELOG/#2941-2022-09-01","title":"[2.94.1] 2022-09-01","text":"<ul> <li>Lock sfpowerkit dependency to 4.2.13 to avoid error caused by deprecation of sfpowerkit:org:build:manifest</li> </ul>"},{"location":"CHANGELOG/#2940-2022-08-31","title":"[2.94.0] 2022-08-31","text":"<ul> <li>Update documentation to initialize scratch org</li> <li>Update JSON schema to add <code>scratchOrgInitApexScripts</code></li> <li>Fix execution of scripts defined in <code>scratchOrgInitApexScripts</code></li> </ul>"},{"location":"CHANGELOG/#2930-2022-08-02","title":"[2.93.0] 2022-08-02","text":"<ul> <li>Fix handling of new sfdx error format so we can again identify deployment tips</li> <li>New deployment tips:<ul> <li>Cannot update a field to a Summary from something else</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2920-2022-07-29","title":"[2.92.0] 2022-07-29","text":"<ul> <li>New command hardis:org:retrieve:source:analytics to retrieve all analytics (CRM Analytics/TCRM) sources</li> <li>New deployment tips (Wave analytics)</li> <li>Fix writePackageXml method when there is not an existing file</li> </ul>"},{"location":"CHANGELOG/#2910-2022-07-15","title":"[2.91.0] 2022-07-15","text":"<ul> <li>Fix issue when force:source command wrappers arguments contain spaces (#269))</li> <li>Upgrade MegaLinter to v6</li> <li>Upgrade yarn dependencies</li> </ul>"},{"location":"CHANGELOG/#2900-2022-06-24","title":"[2.90.0] 2022-06-24","text":"<ul> <li>Events to open generated files when called from VsCode SFDX Hardis</li> <li>New deployTips</li> </ul>"},{"location":"CHANGELOG/#2893-2022-06-21","title":"[2.89.3] 2022-06-21","text":"<ul> <li>Fix exported file extension (#266)</li> </ul>"},{"location":"CHANGELOG/#2892-2022-06-17","title":"[2.89.2] 2022-06-17","text":"<ul> <li>Build full manifest using sfpowerkit excluding <code>ManagedContentTypeBundle</code> because it is not managed by retrieve</li> </ul>"},{"location":"CHANGELOG/#2891-2022-06-16","title":"[2.89.1] 2022-06-16","text":"<ul> <li>Auto-update gitlab-ci.yml only if variable <code>AUTO_UPDATE_GITLAB_CI_YML</code> is set</li> </ul>"},{"location":"CHANGELOG/#2890-2022-06-12","title":"[2.89.0] 2022-06-12","text":"<ul> <li>hardismergexml: New command to merge package.Xml files</li> </ul>"},{"location":"CHANGELOG/#2880-2022-06-11","title":"[2.88.0] 2022-06-11","text":"<ul> <li>hardis:project:clean:systemdebug: New command to comment or remove all System.debug from apex and triggers</li> </ul>"},{"location":"CHANGELOG/#2875-2022-05-18","title":"[2.87.5] 2022-05-18","text":"<ul> <li>toml2csv: Allow <code>hardcoded</code> values for concat</li> <li>Refactor internal CI to use 7.148.3 as recommended version</li> </ul>"},{"location":"CHANGELOG/#2874-2022-05-18","title":"[2.87.4] 2022-05-18","text":"<ul> <li>Fix configure org CI</li> <li>Hide auth info from console logs</li> <li>Fix Bulk Update job not closed</li> </ul>"},{"location":"CHANGELOG/#2873-2022-05-12","title":"[2.87.3] 2022-05-12","text":"<ul> <li>Auto-update <code>.gitlab-ci.yml</code> if a newest version exists</li> </ul>"},{"location":"CHANGELOG/#2872-2022-05-11","title":"[2.87.2] 2022-05-11","text":"<ul> <li>Refactor report directory management</li> </ul>"},{"location":"CHANGELOG/#2871-2022-05-11","title":"[2.87.1] 2022-05-11","text":"<ul> <li>Fix monitoring default pipeline</li> </ul>"},{"location":"CHANGELOG/#2870-2022-05-08","title":"[2.87.0] 2022-05-08","text":"<ul> <li>New command hardis:project:clean:xml allowing to automate the manual cleaning in the XML files using glob pattern and xPath</li> <li>Reorganize work:save command code + add auto mode</li> <li>Call Save command from Retrofit command to update package.xml files and make sure sources have been cleaned</li> </ul>"},{"location":"CHANGELOG/#2861-2022-05-06","title":"[2.86.1] 2022-05-06","text":"<ul> <li>hardis:work:new : Propose to reuse current scratch org when it is not in the local list</li> <li>hardis:work:save : Propose to push git branch on server when it is still untracked</li> </ul>"},{"location":"CHANGELOG/#2860-2022-05-03","title":"[2.86.0] 2022-05-03","text":"<ul> <li>New wrapper command: sfdx hardis:source:retrieve</li> <li>Quickfix toml2csv</li> </ul>"},{"location":"CHANGELOG/#2852-2022-05-02","title":"[2.85.2] 2022-05-02","text":"<ul> <li>Fix toml2csv error log</li> <li>Deployment tips<ul> <li>Allow deployment with pending Apex Jobs</li> <li>Update Can not find folder</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2851-2022-04-27","title":"[2.85.1] 2022-04-27","text":"<ul> <li>Enhance sfdx hardis:org:retrieve:sources:retrofit command + JSON schema updates</li> </ul>"},{"location":"CHANGELOG/#2850-2022-04-27","title":"[2.85.0] 2022-04-27","text":"<ul> <li>Enhance sfdx hardis:org:retrieve:sources:retrofit command</li> <li>Ad deployment tip: Invalid field in related list</li> </ul>"},{"location":"CHANGELOG/#2840-2022-04-27","title":"[2.84.0] 2022-04-27","text":"<ul> <li>Update deployTips: improve unknown custom field message</li> <li>New command sfdx hardis:doc:extract:permsetgroups to generate permission set groups documentation</li> </ul>"},{"location":"CHANGELOG/#2836-2022-04-26","title":"[2.83.6] 2022-04-26","text":"<ul> <li>Fix hardis:work:save who sometimes forgot to ask to push commits</li> </ul>"},{"location":"CHANGELOG/#2835-2022-04-24","title":"[2.83.5] 2022-04-24","text":"<ul> <li>Update deployment tips</li> </ul>"},{"location":"CHANGELOG/#2830-2022-04-20","title":"[2.83.0] 2022-04-20","text":"<ul> <li>New deployment tips:<ul> <li>Not valid sharing model</li> </ul> </li> <li>Improve purge flows for manual users</li> <li>Improve badwords detector</li> <li>Open scratch org when reusing one</li> <li>Hide prompt result when it contains sensitive information</li> </ul>"},{"location":"CHANGELOG/#2822-2022-04-19","title":"[2.82.2] 2022-04-19","text":"<ul> <li>New deployTip: Can not change type due to existing data</li> <li>Do not replace ListView Everything by Mine when we are just simulating deployment</li> </ul>"},{"location":"CHANGELOG/#2821-2022-04-16","title":"[2.82.1] 2022-04-16","text":"<ul> <li>QuickFix platform compatibility for <code>sfdx hardis:org:fix:listviewmine</code></li> </ul>"},{"location":"CHANGELOG/#2820-2022-04-16","title":"[2.82.0] 2022-04-16","text":"<ul> <li>New command <code>sfdx hardis:org:fix:listviewmine</code> as a workaround to force:source:deploy not allowing ListView with scope Mine</li> </ul>"},{"location":"CHANGELOG/#2810-2022-04-15","title":"[2.81.0] 2022-04-15","text":"<ul> <li>New property <code>autoRetrieveWhenPull</code> to always retrieve some sources when calling hardis:source:pull (useful when sfdx tracking forgets some updates)</li> </ul>"},{"location":"CHANGELOG/#2800-2022-04-15","title":"[2.80.0] 2022-04-15","text":"<ul> <li>Simplify and document more hardis:work:new , hardis:work:pull and hardis:work:save</li> <li>Open org in browser when fetched from scratch org pool</li> <li>More deploymentTips</li> <li>Add <code>customPlugins</code> definition in json schema</li> </ul>"},{"location":"CHANGELOG/#2790-2022-04-10","title":"[2.79.0] 2022-04-10","text":"<ul> <li>New property <code>extends</code> in <code>.sfdx-hardis.yml</code>, to allow local config file to extend from remote file</li> <li>Add <code>customCommands</code> definition in json schema</li> </ul>"},{"location":"CHANGELOG/#2784-2022-04-09","title":"[2.78.4] 2022-04-09","text":"<ul> <li>Update documentation</li> </ul>"},{"location":"CHANGELOG/#2783-2022-04-08","title":"[2.78.3] 2022-04-08","text":"<ul> <li>Add a retrofit command to retrieve changes made directly in an org</li> </ul>"},{"location":"CHANGELOG/#2782-2022-04-08","title":"[2.78.2] 2022-04-08","text":"<ul> <li>Fix legacy API command display (#225)</li> </ul>"},{"location":"CHANGELOG/#2781-2022-04-07","title":"[2.78.1] 2022-04-07","text":"<ul> <li>Fix CI &amp; remove docker image with sfdx-cli@stable as it does not exists anymore</li> </ul>"},{"location":"CHANGELOG/#2780-2022-04-07","title":"[2.78.0] 2022-04-07","text":"<ul> <li>New parameter --skipauth on all hardis commands, to allow the auth check when a default username is required (allows advanced users to improve performances)</li> <li>Set user email when fetching a scratch org from scratch org pool</li> </ul>"},{"location":"CHANGELOG/#2772-2022-04-07","title":"[2.77.2] 2022-04-07","text":"<ul> <li>Fix bug when subtracting a package.xml from another</li> </ul>"},{"location":"CHANGELOG/#2771-2022-04-07","title":"[2.77.1] 2022-04-07","text":"<ul> <li>Fix error in packageDeployOnce.xml document (sfdx hardis:project:deploy:sources:dx)</li> </ul>"},{"location":"CHANGELOG/#2770-2022-04-05","title":"[2.77.0] 2022-04-05","text":"<ul> <li>Generate deployment tips documentation</li> <li>hardis:org:user:activateinvalid : new --profiles argument</li> <li>Update MsTeams WebHooks ENV variables<ul> <li>MS_TEAMS_WEBHOOK_URL_CRITICAL</li> <li>MS_TEAMS_WEBHOOK_URL_SEVERE</li> <li>MS_TEAMS_WEBHOOK_URL_WARNING</li> <li>MS_TEAMS_WEBHOOK_URL_INFO</li> </ul> </li> <li>Allow to install packages during deployment check using INSTALL_PACKAGES_DURING_CHECK_DEPLOY=true env variable</li> <li>Enhance prompt org labels</li> </ul>"},{"location":"CHANGELOG/#2762-2022-04-04","title":"[2.76.2] 2022-04-04","text":"<ul> <li>Improve activate invalid users commands (allow to select by profile(s))</li> </ul>"},{"location":"CHANGELOG/#2761-2022-04-04","title":"[2.76.1] 2022-04-04","text":"<ul> <li>Improve activate invalid users commands</li> </ul>"},{"location":"CHANGELOG/#2760-2022-04-03","title":"[2.76.0] 2022-04-03","text":"<ul> <li>New command sfdx hardis:org:user:activateinvalid to activate invalid emails in sandbox</li> <li>Fix CI org authentication in case the default username is not the org that we want to configure</li> <li>Bypass error with force:source:legacy:pull / push</li> <li>hardis:work:save : Propose to manually commit files</li> <li>Fix hardis:org:select alias &amp; user config</li> <li>Colorize command lines in logs</li> <li>Enhance new task with sandbox (not fully stable yet)</li> <li>New deployTips<ul> <li>Please choose a different name</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2750-2022-03-28","title":"[2.75.0] 2022-03-28","text":"<ul> <li>Property <code>availableTargetBranches</code> can be defined in <code>.sfdx-hardis.yml</code> to list the possible target branches for merge requests</li> <li>fix hardis:work:save to propose a git push when the current branch is ahead of origin branch</li> <li>New deployTips<ul> <li>XML item appears more than once</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2742-2022-03-26","title":"[2.74.2] 2022-03-26","text":"<ul> <li>Update legacy API detection labels</li> </ul>"},{"location":"CHANGELOG/#2741-2022-03-25","title":"[2.74.1] 2022-03-25","text":"<ul> <li>Manage crash when retrieving metadatas from CI jobs</li> </ul>"},{"location":"CHANGELOG/#2740-2022-03-24","title":"[2.74.0] 2022-03-24","text":"<ul> <li>Enhance hardis:work:save to request if the files has already been staged and committed</li> <li>Deploy manifest and destructive change in the same sfdx force:source:deploy call thanks to new argument postdestructivechanges</li> <li>More deployTips</li> <li>Improve MsTeams notifications management</li> </ul>"},{"location":"CHANGELOG/#2730-2022-03-21","title":"[2.73.0] 2022-03-21","text":"<ul> <li>Improve tips about how to fix deployments directly within error messages</li> <li>Wrapper commands to display tips in error logs<ul> <li>force:source:deploy can be wrapped using hardis:source:deploy</li> <li>force:source:push can be wrapped using hardis:source:push</li> <li>force:mdapi:deploy can be wrapped using hardis:mdapi:deploy</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2720-2022-03-21","title":"[2.72.0] 2022-03-21","text":"<ul> <li>Include tips about how to fix deployments directly within error messages</li> </ul>"},{"location":"CHANGELOG/#2712-2022-03-17","title":"[2.71.2] 2022-03-17","text":"<ul> <li>Update JSON schema for customCommands (used by VsCode SFDX Hardis)</li> <li>New property for scratch org pool config: maxScratchOrgsNumberToCreateOnce (max number of scratch orgs to create during one CI job)</li> </ul>"},{"location":"CHANGELOG/#2710-2022-03-15","title":"[2.71.0] 2022-03-15","text":"<ul> <li>New command hardis:org:data:delete to manage delete data workspaces of sfdmu</li> <li>New command hardis:scratch:pool:reset to delete all scratch orgs from a scratch orgs pool (like when a new project-scratch-def is delivered)</li> </ul>"},{"location":"CHANGELOG/#2700-2022-03-10","title":"[2.70.0] 2022-03-10","text":"<ul> <li>hardis:org:apex:test : allow command to succeed when no tests are present in the project, useful for new environments initialization</li> </ul>"},{"location":"CHANGELOG/#2690-2022-03-02","title":"[2.69.0] 2022-03-02","text":"<ul> <li>Scratch org pool: add history (fetch,auth) on ActiveScratchOrg devhub record</li> </ul>"},{"location":"CHANGELOG/#2686-2022-02-22","title":"[2.68.6] 2022-02-22","text":"<ul> <li>remove <code>DEPLOY PROGRESS</code> noisy lines from logs</li> </ul>"},{"location":"CHANGELOG/#2685-2022-02-18","title":"[2.68.5] 2022-02-18","text":"<ul> <li>Update mkdocs</li> <li>fix commit of files with spaces</li> </ul>"},{"location":"CHANGELOG/#2684-2022-02-18","title":"[2.68.4] 2022-02-18","text":"<ul> <li>hardisinstall<ul> <li>Add -k, --installationkey CLI param and prompts user for it if not supplied</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2683-2022-02-18","title":"[2.68.3] 2022-02-18","text":"<ul> <li>Fix hardisversion:promote --auto</li> </ul>"},{"location":"CHANGELOG/#2682-2022-02-15","title":"[2.68.2] 2022-02-15","text":"<ul> <li>Fix minimize profiles command</li> </ul>"},{"location":"CHANGELOG/#2681-2022-02-02","title":"[2.68.1] 2022-02-02","text":"<ul> <li>Allow property autoRemoveUserPermissions in .sfdx-hardis.yml to clean profiles</li> <li>toml2csv:<ul> <li>Add concatComposite option for column</li> <li>Add recordType option for column</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2680-2022-01-31","title":"[2.68.0] 2022-01-31","text":"<ul> <li>Do not create log files in the current directory if it is empty</li> <li>More deployTips</li> <li>Clean MDAPI output logs from progression lines</li> <li>Add listViewMine in cleaning references</li> <li>toml2csv updates</li> </ul>"},{"location":"CHANGELOG/#2671-2022-01-20","title":"[2.67.1] 2022-01-20","text":"<ul> <li>Enhance documentation for hardis:scratch:pool:create command</li> <li>Fixes and enhancements on toml2csv command</li> </ul>"},{"location":"CHANGELOG/#2670-2022-01-18","title":"[2.67.0] 2022-01-18","text":"<ul> <li>hardis:misc:toml2csv enhancements (rename and copy files)</li> <li>fix minimizing of profiles</li> <li>new command hardis:project:clean:listview</li> </ul>"},{"location":"CHANGELOG/#2662-2022-01-13","title":"[2.66.2] 2022-01-13","text":"<ul> <li>hardis:misc:toml2csv enhancements</li> </ul>"},{"location":"CHANGELOG/#2661-2022-01-11","title":"[2.66.1] 2022-01-11","text":"<ul> <li>minimizeProfiles: do not remove userPermissions if profile is default Admin profile</li> </ul>"},{"location":"CHANGELOG/#2660-2022-01-07","title":"[2.66.0] 2022-01-07","text":"<ul> <li>Check deployment with metadata project</li> </ul>"},{"location":"CHANGELOG/#2650-2022-01-05","title":"[2.65.0] 2022-01-05","text":"<ul> <li>Fix contribution install by upgrading dependencies</li> <li>Use soqlQuery method everywhere</li> <li>Set devhub alias when available</li> </ul>"},{"location":"CHANGELOG/#2641-2021-12-29","title":"[2.64.1] 2021-12-29","text":"<ul> <li>Update default apiVersion to 53.0</li> <li>Option to not remove empty types when subtracting package.xml</li> </ul>"},{"location":"CHANGELOG/#2640-2021-12-24","title":"[2.64.0] 2021-12-24","text":"<ul> <li>New command hardis:clean:minimizeprofiles</li> <li>New deployTip <code>duplicate-value-platform-action-id-list</code></li> <li>Apply packageDeployOnce.xml and packageDeployOnChange.xml in all contexts</li> <li>Package.xml mixing: fix wildcard <code>&lt;members&gt;*&lt;/members&gt;</code> management</li> <li>List metadatas of target org: complete with what sfpowerkit commands does not return (ListView,CustomLabel)</li> </ul>"},{"location":"CHANGELOG/#2630-2021-12-21","title":"[2.63.0] 2021-12-21","text":"<ul> <li>New event message refreshPlugins (used by VsCodeSFDX Hardis)</li> <li>Display Error message when unable to delete a temporary directory</li> </ul>"},{"location":"CHANGELOG/#2620-2021-12-14","title":"[2.62.0] 2021-12-14","text":"<ul> <li>Fix hardis:work:save crash when rebuilding deploymentPlan</li> <li>Fix XML indentation (#51). Can also be overridden by using env variable <code>SFDX_XML_INDENT</code> (ex: <code>SFDX_INDENT='  '</code>)</li> </ul>"},{"location":"CHANGELOG/#2610-2021-12-02","title":"[2.61.0] 2021-12-02","text":"<ul> <li>Use same XML indentation than Salesforce (#51) (requires also upgrade of sfdx-essentials, using <code>sfdx plugins:install sfdx-essentials</code>)</li> </ul>"},{"location":"CHANGELOG/#2603-2021-11-08","title":"[2.60.3] 2021-11-08","text":"<ul> <li>Fix hardis:source:pull when there are errors</li> </ul>"},{"location":"CHANGELOG/#2602-2021-11-06","title":"[2.60.2] 2021-11-06","text":"<ul> <li>Allow to input URL to use to login</li> </ul>"},{"location":"CHANGELOG/#2601-2021-11-05","title":"[2.60.1] 2021-11-05","text":"<ul> <li>Fix hardis:scratch:pool:view when DevHub authentication is expired</li> </ul>"},{"location":"CHANGELOG/#2600-2021-11-03","title":"[2.60.0] 2021-11-03","text":"<ul> <li>Deployment failure: Tuning of error message + display of direct link to Deployment Status page in console logs</li> <li>When not in CI, prompt for the org to use to simulate deployments</li> </ul>"},{"location":"CHANGELOG/#2590-2021-11-03","title":"[2.59.0] 2021-11-03","text":"<ul> <li>(ALPHA,not really usable yet) Allow to use sandboxes for new task (create from production org, or clone from other sandbox)</li> <li>Fixes about scratch org initialization and JWT auth configuration</li> </ul>"},{"location":"CHANGELOG/#2583-2021-10-23","title":"[2.58.3] 2021-10-23","text":"<ul> <li>hardis:org:files:export: Fix file paths in logs</li> </ul>"},{"location":"CHANGELOG/#2582-2021-10-18","title":"[2.58.2] 2021-10-18","text":"<ul> <li>org:user:freeze : Prevent to freeze all profiles and current user profile</li> </ul>"},{"location":"CHANGELOG/#2581-2021-10-18","title":"[2.58.1] 2021-10-18","text":"<ul> <li>org:retrieve:sources:metadata : Manage locally defined <code>remove-items-package.xml</code> (that can handle wildcard members)</li> </ul>"},{"location":"CHANGELOG/#2580-2021-10-16","title":"[2.58.0] 2021-10-16","text":"<ul> <li>org:retrieve:sources:metadata : Run apex tests and legacy api check if we are in CI and in a repository named with <code>monitoring</code></li> <li>Teams notifications for apex tests and legacy api failure</li> </ul>"},{"location":"CHANGELOG/#2572-2021-10-13","title":"[2.57.2] 2021-10-13","text":"<ul> <li>hardis:org:files:export<ul> <li>Add file extension when missing</li> <li>replace .snote by .txt</li> <li>replace special characters in parent folder name and file name</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2571-2021-10-12","title":"[2.57.1] 2021-10-12","text":"<ul> <li>Retry when BULK API Query returns a timeout</li> <li>hardis:org:files:export<ul> <li>Use node-fetch-retry for direct downloads (retry up to 30 seconds by default)</li> <li>New argument <code>--startchunknumber</code> to start files extraction from a chunk position</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2570-2021-10-11","title":"[2.57.0] 2021-10-11","text":"<ul> <li>Make hardis:org:user:freeze and hardis:org:user:unfreeze can now handle large volume of users, using Bulk API</li> </ul>"},{"location":"CHANGELOG/#2560-2021-10-10","title":"[2.56.0] 2021-10-10","text":"<ul> <li>Update auto-generated documentation to add a commands.md + its link in the menu</li> </ul>"},{"location":"CHANGELOG/#2553-2021-10-05","title":"[2.55.3] 2021-10-05","text":"<ul> <li>When not in CI, disable auto-update of .gitignore and .forceignore files because of a prompt library issue. To enable it, define AUTO_UPDATE env variable to \"true\"</li> </ul>"},{"location":"CHANGELOG/#2552-2021-10-03","title":"[2.55.2] 2021-10-03","text":"<ul> <li>Fix link to https://nicolas.vuillamy.fr/handle-salesforce-api-versions-deprecation-like-a-pro-335065f52238</li> </ul>"},{"location":"CHANGELOG/#2551-2021-10-01","title":"[2.55.1] 2021-10-01","text":"<ul> <li>SFDX_HARDIS_DEBUG_ENV. If set to true, display env vars at startup</li> </ul>"},{"location":"CHANGELOG/#2550-2021-10-01","title":"[2.55.0] 2021-10-01","text":"<ul> <li>Manage env var SFDX_HARDIS_DEPLOY_IGNORE_SPLIT_PACKAGES. If \"true\", package.xmls are not split with deploymentPlan</li> </ul>"},{"location":"CHANGELOG/#2540-2021-09-27","title":"[2.54.0] 2021-09-27","text":"<ul> <li>Allow to override force:org:create waiting time using SCRATCH_ORG_WAIT en variable (default: 15mn)</li> <li>hardis:org:select : new parameter <code>--scratch</code> to allow to list only scratch orgs related to current Dev Hub</li> <li>hardis:org:retrieve:sources:dx2 : New parameter <code>--template</code> to use default package.xml files (ex: <code>wave</code>)</li> <li>Scratch org pool: automatically delete too old ready-to-use scratch orgs</li> <li>Deploy Tips<ul> <li>Wave deployment error</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2531-2021-09-14","title":"[2.53.1] 2021-09-14","text":"<ul> <li>Update Object deployed when configuring scratch org pool (replace Html by LongTextArea)</li> </ul>"},{"location":"CHANGELOG/#2530-2021-09-14","title":"[2.53.0] 2021-09-14","text":"<ul> <li>Additional docker images, to use when stable and latest sfdx-cli versions arr broken<ul> <li>hardisgroupcom/sfdx-hardis:latest-sfdx-recommended</li> <li>hardisgroupcom/sfdx-hardis:beta-sfdx-recommended</li> <li>hardisgroupcom/sfdx-hardis:alpha-sfdx-recommended</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2520-2021-09-14","title":"[2.52.0] 2021-09-14","text":"<ul> <li>New command hardis:project:fix:v53flexipages to fix v53.0 broken ascending compatibility</li> <li>New command hardis:project:audit:duplicatefiles to detect doubling files in wrong sfdx folders</li> </ul>"},{"location":"CHANGELOG/#2516-2021-09-10","title":"[2.51.6] 2021-09-10","text":"<ul> <li>Take in account parameter <code>--ignore-whitespace</code> of sfdx-git-delta for packageOnChange.xml</li> </ul>"},{"location":"CHANGELOG/#2515-2021-09-10","title":"[2.51.5] 2021-09-10","text":"<ul> <li>hardis:org:diagnose:legacyapi: Provide additional report with unique list of ips, hostnames (when available) , and number of calls</li> <li>Fix hardisversion:promote</li> </ul>"},{"location":"CHANGELOG/#2514-2021-09-03","title":"[2.51.4] 2021-09-03","text":"<ul> <li>hardis:org:diagnose:legacyapi: Allow to override default output reportfile with <code>--outputfile</code> argument</li> </ul>"},{"location":"CHANGELOG/#2513-2021-09-02","title":"[2.51.3] 2021-09-02","text":"<ul> <li>Improve authentication log + less cases when launching again the same command can be necessary</li> <li>if you define <code>forceRestDeploy: true</code> in config, <code>restDeploy: false</code> won't be set automatically anymore</li> </ul>"},{"location":"CHANGELOG/#2512-2021-08-31","title":"[2.51.2] 2021-08-31","text":"<ul> <li>Quick fixes hardis:doc:plugin:generate<ul> <li>Fix crash when there are no license &amp; changelog</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2511-2021-08-31","title":"[2.51.1] 2021-08-31","text":"<ul> <li>Quick fixes hardis:doc:plugin:generate<ul> <li>Handle when command.title or command.description is empty</li> <li>Add <code># Commands</code> to the README.md truncate markers</li> </ul> </li> <li>Fix hardis:org:retrieve:sources:dx<ul> <li>Empty temp directories at the beginning of the command</li> <li>Add ForecastingType in the list of ignored metadatas for conversion to sfdx sources</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2510-2021-08-31","title":"[2.51.0] 2021-08-31","text":"<ul> <li>Update hardis:doc:plugin:generate so main README part is displayed on doc index.md</li> </ul>"},{"location":"CHANGELOG/#2500-2021-08-30","title":"[2.50.0] 2021-08-30","text":"<ul> <li>New commands to freeze users before deployment then unfreeze users after deployment<ul> <li>sfdx hardis:org:user:freeze</li> <li>sfdx hardis:org:user:unfreeze</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2491-2021-08-30","title":"[2.49.1] 2021-08-30","text":"<ul> <li>QuickFix scratch org auth during CI</li> </ul>"},{"location":"CHANGELOG/#2490-2021-08-30","title":"[2.49.0] 2021-08-30","text":"<ul> <li>Manage scratch org pools to enhance performances<ul> <li>Initialize configuration with hardis:scratch:pool:configure</li> <li>Fetch a new scratch org from the pool when requesting creation of a new scratch org</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2481-2021-08-27","title":"[2.48.1] 2021-08-27","text":"<ul> <li>QuickFix hardis:org:files:export</li> </ul>"},{"location":"CHANGELOG/#2480-2021-08-27","title":"[2.48.0] 2021-08-27","text":"<ul> <li>New command hardis:org:files:export to download all files (ContentVersion) attached to records (ex: Opportunity)</li> <li>Generate text log file in hardis-report/commands when sfdx-hardis is not run from CI</li> <li>hardis:org:diagnose:legacyapi : simpler logs</li> </ul>"},{"location":"CHANGELOG/#2473-2021-08-23","title":"[2.47.3] 2021-08-23","text":"<ul> <li>hardis:org:diagnose:legacyapi: Add more summary and statistics</li> </ul>"},{"location":"CHANGELOG/#2472-2021-08-23","title":"[2.47.2] 2021-08-23","text":"<ul> <li>Fix hardis:org:diagnose:legacyapi (display raw logs when CSV builder is crashing) , using papaparse instead of objects-to-csv package</li> </ul>"},{"location":"CHANGELOG/#2471-2021-08-19","title":"[2.47.1] 2021-08-19","text":"<ul> <li>Use --permissivediff to call sfdx-git-delta if the argument is available</li> <li>Manage env vars SKIP_PACKAGE_DEPLOY_ON_CHANGE and SKIP_PACKAGE_DEPLOY_ONCE . If set to true, related packageDeployOnChange.xml and packageDeployOnce.xml are ignored</li> <li>Define locally method to remove package.xml from another, to improve performances</li> </ul>"},{"location":"CHANGELOG/#2470-2021-08-19","title":"[2.47.0] 2021-08-19","text":"<ul> <li>New feature: use packageDeployOnChange.xml, to skip deployment of items that has not been updated since last update</li> <li>Create docker images with sfdx-cli@stable version<ul> <li>alpha-sfdx-stable</li> <li>beta-sfdx-stable</li> <li>latest-sfdx-stable</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2460-2021-08-16","title":"[2.46.0] 2021-08-16","text":"<ul> <li>Allow to run git delta command on local updates</li> <li>Update labels of hardis:data commands</li> <li>New technical command: hardis:work:ws , to call VsCode Extension refresh from CLI</li> </ul>"},{"location":"CHANGELOG/#2450-2021-08-15","title":"[2.45.0] 2021-08-15","text":"<ul> <li>Refactor hardis:org:diagnose:legacyapi with jsforce to handle more log entries</li> <li>Do not display <code>git branch -v</code> in logs</li> </ul>"},{"location":"CHANGELOG/#2440-2021-08-14","title":"[2.44.0] 2021-08-14","text":"<ul> <li>New command hardis:org:diagnose:legacyapi : Detect use of deprecated API versions in production org</li> </ul>"},{"location":"CHANGELOG/#2431-2021-07-23","title":"[2.43.1] 2021-07-23","text":"<ul> <li>Update deployTips</li> <li>Update json schema</li> </ul>"},{"location":"CHANGELOG/#2430-2021-07-22","title":"[2.43.0] 2021-07-22","text":"<ul> <li>Better split of elements during hardis:work:save</li> <li>Display elapsed time for long running commands</li> </ul>"},{"location":"CHANGELOG/#2422-2021-07-20","title":"[2.42.2] 2021-07-20","text":"<ul> <li>Use relative path for sfdmu data import/export</li> </ul>"},{"location":"CHANGELOG/#2421-2021-07-19","title":"[2.42.1] 2021-07-19","text":"<ul> <li>Fix data import &amp; export commands when spaces in folder names</li> </ul>"},{"location":"CHANGELOG/#2420-2021-07-12","title":"[2.42.0] 2021-07-12","text":"<ul> <li>New command sfdx hardis:project:lint</li> <li>Update .sfdx-hardis.yml configuration JsonSchema</li> </ul>"},{"location":"CHANGELOG/#2412-2021-07-12","title":"[2.41.2] 2021-07-12","text":"<ul> <li>QuickFix case when title is not set (use first line of description)</li> </ul>"},{"location":"CHANGELOG/#2411-2021-07-12","title":"[2.41.1] 2021-07-12","text":"<ul> <li>Quickfix default mkdocs.yml</li> </ul>"},{"location":"CHANGELOG/#2410-2021-07-12","title":"[2.41.0] 2021-07-12","text":"<ul> <li>Add JSON Schema for <code>.sfdx-hardis.yml</code> configuration files</li> <li>Automatic SFDX Plugin documentation generation for any SFDX Plugin</li> </ul>"},{"location":"CHANGELOG/#2400-2021-07-08","title":"[2.40.0] 2021-07-08","text":"<ul> <li>hardis:scratch:create: Initialize data using SFDMU, if defined in .sfdx-hardis.json <code>dataPackages</code> property with <code>importInScratchOrgs: true</code><ul> <li>Example</li> </ul> </li> </ul> <pre><code>dataPackages:\n  - dataPath: scripts/data/LightningSchedulerConfig\n    importInScratchOrgs: true\n</code></pre> <ul> <li>Propose to update or not default target git branch</li> <li>List target git branches if defined in .sfdx-hardis.json <code>availableTargetBranches</code> property</li> <li>hardis:scratch:delete: Propose only scratch orgs related to currently selected Dev Hub</li> <li>New command hardis:org:configure:data to initialize a SFDMU project, sfdx-hardis flavored</li> <li>Display data package label &amp; description, from SFDMU folder config.json properties <code>sfdxHardisLabel</code> and <code>sfdxHardisDescription</code></li> <li>hardis:org:data:import &amp; hardis:org:data:import: Allow to select current org or another when running data import/export commands</li> <li>Display Dev Hub username when listing orgs for selection</li> </ul>"},{"location":"CHANGELOG/#2311-2021-07-02","title":"[2.31.1] 2021-07-02","text":"<ul> <li>hardis:scratch:delete : Display instanceUrl &amp; last usage of scratch orgs displayed before deletion</li> </ul>"},{"location":"CHANGELOG/#2310-2021-07-02","title":"[2.31.0] 2021-07-02","text":"<ul> <li>New command hardis:scratch:delete to delete scratch orgs locally referenced.</li> </ul>"},{"location":"CHANGELOG/#2301-2021-06-30","title":"[2.30.1] 2021-06-30","text":"<ul> <li>hardis:org:connect : Propose user to open org in browser if not in CI</li> </ul>"},{"location":"CHANGELOG/#2300-2021-06-30","title":"[2.30.0] 2021-06-30","text":"<ul> <li>Update hardis:org:retrieve:packageconfig so it allows to select an org, and to update sfdx-hardis configuration</li> </ul>"},{"location":"CHANGELOG/#2290-2021-06-29","title":"[2.29.0] 2021-06-29","text":"<ul> <li>New command hardis:org:retrieve:sources:dx2 to assist call to force:source:retrieve using a package.xml file</li> <li>Improve hardis:project:generate:gitdelta by allowing to select commits from their description</li> <li>Use magenta to display config file updates</li> </ul>"},{"location":"CHANGELOG/#2280-2021-06-23","title":"[2.28.0] 2021-06-23","text":"<ul> <li>CI: Check Docker image security with trivy</li> <li>Avoid git error when development branch is updated</li> </ul>"},{"location":"CHANGELOG/#2271-2021-06-21","title":"[2.27.1] 2021-06-21","text":"<ul> <li>Fix CountryCode when updating scratch org user. Default FR - France, can be updated with config defaultCountry and defaultCountryCode in .sfdx-hardis.yml</li> </ul>"},{"location":"CHANGELOG/#2270-2021-06-20","title":"[2.27.0] 2021-06-20","text":"<ul> <li>Clean Lookup filters before force:source:push, then restore them and push again</li> <li>Manage <code>gitRootFolderPrefix</code> config property, in case the root of git repository is at a parent level than sfdx project root</li> <li>Allow to override separate deployments using config property <code>separateDeploymentsConfig</code></li> <li>Set git config core.quotepath to false to manage special characters in git files / folders</li> <li>Run sfdx git delta at the root of the git repository</li> <li>Rename DeferSharingCalc permission set into SfdxHardisDeferSharingCalc</li> <li>New Deployment tips</li> <li>Contributing documentation</li> </ul>"},{"location":"CHANGELOG/#2264-2021-06-18","title":"[2.26.4] 2021-06-18","text":"<ul> <li>Do not write user config when current folder is empty</li> </ul>"},{"location":"CHANGELOG/#2261-2021-06-17","title":"[2.26.1] 2021-06-17","text":"<ul> <li>Take in account testLevel from <code>.sfdx-hardis.yml</code> in deployments</li> </ul>"},{"location":"CHANGELOG/#2260-2021-06-16","title":"[2.26.0] 2021-06-16","text":"<ul> <li>New command hardis:project:generate:gitdelta to generate the package.xml calculated between two commits</li> <li>New command hardis:org:connect to connect to an org without selecting it (can be used to refresh expired token)</li> <li>Propose choice to to skip .gitignore &amp; .forceignore files auto-update</li> <li>Define triggerNotification on Command class to trigger MsTeams notifs</li> <li>Update org type selection message</li> </ul>"},{"location":"CHANGELOG/#2253-2021-06-14","title":"[2.25.3] 2021-06-14","text":"<ul> <li>Fix bug when selecting an org from outside a SFDX project folder</li> </ul>"},{"location":"CHANGELOG/#2252-2021-06-14","title":"[2.25.2] 2021-06-14","text":"<ul> <li>Refresh VsCode Sfdx Hardis UI when creating / loading a SFDX Project</li> </ul>"},{"location":"CHANGELOG/#2251-2021-06-13","title":"[2.25.1] 2021-06-13","text":"<ul> <li>Check if folder is a git repo before updating git config</li> </ul>"},{"location":"CHANGELOG/#2250-2021-06-12","title":"[2.25.0] 2021-06-12","text":"<ul> <li>New parameter keepmetadatatypes for hardis:org:retrieve:sources:dx</li> <li>Check dependencies<ul> <li>Improve performances</li> <li>Check application dependencies (git,openssl)</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2240-2021-06-10","title":"[2.24.0] 2021-06-10","text":"<ul> <li>New command hardis:org:purge:apexlog to purge all Apex Logs of selected org</li> </ul>"},{"location":"CHANGELOG/#2230-2021-06-07","title":"[2.23.0] 2021-06-07","text":"<ul> <li>Manage installation key for unlocked packages installation</li> <li>Deployment: manage --canmodify SFDMU argument (define sfdmuCanDeploy in sfdx-hardis branch config file)</li> </ul>"},{"location":"CHANGELOG/#2220-2021-06-03","title":"[2.22.0] 2021-06-03","text":"<ul> <li>New command hardis:project:clean:orgmissingitems : Remove elements that are not existing in target org (only in ReportType for now)</li> <li>hardis:project:clean:references : Remove cleaned items from package.xml files</li> <li>Externalization of method to select an org (+ reorder of list of displayed orgs)</li> </ul>"},{"location":"CHANGELOG/#2210-2021-06-02","title":"[2.21.0] 2021-06-02","text":"<ul> <li>hardis:project:clean:references: Improve performances for removing files</li> <li>hardis:scratch:create : Shorten scratch org auto-generated name</li> <li>Authenticate to an org: Request user to set alias if not provided</li> <li>Update default gitlab-ci.yml</li> <li>New method promptProfiles</li> </ul>"},{"location":"CHANGELOG/#2203-2021-05-26","title":"[2.20.3] 2021-05-26","text":"<ul> <li>Set prompt UI timeout to 2h instead of 5mn</li> </ul>"},{"location":"CHANGELOG/#2202-2021-05-25","title":"[2.20.2] 2021-05-25","text":"<ul> <li>Fix call to sfdmu (add --noprompt)</li> </ul>"},{"location":"CHANGELOG/#2201-2021-05-23","title":"[2.20.1] 2021-05-23","text":"<ul> <li>Fix scratch org listing</li> </ul>"},{"location":"CHANGELOG/#2200-2021-05-21","title":"[2.20.0] 2021-05-21","text":"<ul> <li>hardis:work:save : Prompt user to pull from scratch org or not before saving</li> <li>Do not update package.json anymore</li> <li>hardis:scratch:create : Fix reuse scratch org prompt</li> </ul>"},{"location":"CHANGELOG/#2190-2021-05-20","title":"[2.19.0] 2021-05-20","text":"<ul> <li>Detect when auth token is expired</li> <li>More deploy tips</li> <li>Clean ProductRequest items</li> </ul>"},{"location":"CHANGELOG/#2180-2021-05-18","title":"[2.18.0] 2021-05-18","text":"<ul> <li> <p>New commands</p> <ul> <li>hardis:org:retrieve:packageconfig: Retrieves .sfdx-hardis.yml property installedPackaged from an existing org</li> <li>hardis:project:clean:emptyitems: Delete empty items from SFD project</li> <li>hardis:project:clean:hiddenitems: Delete hidden items (from managed packages) from SFDX project</li> </ul> </li> </ul> <ul> <li>Update default values for JWT connected app creation</li> <li>Manage <code>--targetusername</code> to be taken in account for all sfdx hardis commands</li> <li>More deployment tips</li> <li>hardis:project:clean:manageditems: New <code>--namespace</code> argument</li> <li>org:retrieve:source:dx : Do not erase .gitignore, .forceignore , README.md and project-scratch-def is already existing locally</li> <li>Remove shape temp folder to avoid a force:org:create bug</li> </ul>"},{"location":"CHANGELOG/#2173-2021-05-18","title":"[2.17.3] 2021-05-18","text":"<ul> <li>Fix .gitignore automatic update constraint</li> </ul>"},{"location":"CHANGELOG/#2172-2021-05-10","title":"[2.17.2] 2021-05-10","text":"<ul> <li>Default init scratch org using push and not deploy</li> <li>QuickFix mergeRequest links local storage</li> </ul>"},{"location":"CHANGELOG/#2170-2021-05-10","title":"[2.17.0] 2021-05-10","text":"<ul> <li>New command hardis:project:convert:profilestopermsets to convert all profiles into permission sets</li> <li>hardis:scratch:create : Fix permission set auto assignment when creating a scratch org (use property initPermissionSets in .sfdx-hardis.yml)</li> </ul>"},{"location":"CHANGELOG/#2161-2021-05-09","title":"[2.16.1] 2021-05-09","text":"<ul> <li>hardis:work:save : Fix storage in config file of Merge Request info</li> <li>Update deploy tips</li> </ul>"},{"location":"CHANGELOG/#2160-2021-05-08","title":"[2.16.0] 2021-05-08","text":"<ul> <li>hardis:project:clean:manageditems : Clean SFDX project from managed classes</li> <li>hardis:project:clean:retrievefolders: Clean/Complete SFDX project with missing folders (dashboard,email,reports)</li> <li>hardis:project:clean:standarditems : Clean SFDX project from objects with no custom within</li> <li>More deployment error tips</li> <li>New parameter websocket for all commands</li> <li>Indicating in logs when deployment is a simulation</li> </ul>"},{"location":"CHANGELOG/#2151-2021-05-02","title":"[2.15.1] 2021-05-02","text":"<ul> <li>QuickFix hardis:work:save</li> </ul>"},{"location":"CHANGELOG/#2150-2021-04-30","title":"[2.15.0] 2021-04-30","text":"<ul> <li>hardis:project:clean:references : New cleaning module dashboards removing reference to users in Dashboards sources</li> </ul>"},{"location":"CHANGELOG/#2140-2021-04-29","title":"[2.14.0] 2021-04-29","text":"<ul> <li>Manage manifest/packageDeployOnce.xml : all its items that are already present in target org will not be deployed again</li> </ul>"},{"location":"CHANGELOG/#2134-2021-04-26","title":"[2.13.4] 2021-04-26","text":"<ul> <li>New deploy tips</li> <li>Do not update local files when calling configure commands</li> <li>hardis:work:save : Fix branch update issue</li> </ul>"},{"location":"CHANGELOG/#2133-2021-04-23","title":"[2.13.3] 2021-04-23","text":"<ul> <li>Remove PMD rule :<ul> <li>CyclomaticComplexity</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#2132-2021-04-22","title":"[2.13.2] 2021-04-22","text":"<ul> <li>QuickFix hardisversion:promote --auto</li> </ul>"},{"location":"CHANGELOG/#2130-2021-04-21","title":"[2.13.0] 2021-04-21","text":"<ul> <li>hardis:work:save<ul> <li>New parameter --nogit for expert developers who want to manage git operations themselves</li> <li>New parameter --noclean for expert developers who want to manage clean operations themselves</li> </ul> </li> <li>Update default Mega-Linter config</li> </ul>"},{"location":"CHANGELOG/#2120-2021-04-19","title":"[2.12.0] 2021-04-19","text":"<ul> <li>New variable CI_DEPLOY_QUICK_ACTIONS_DUMMY<ul> <li>set to \"true\" in CI variables when there are QuickActions dependent of Flows that are later in publication plan</li> <li>then set again to \"false\" and the deployment will pass :)</li> </ul> </li> <li>hardis:project:clean:references : now deletes obsolete objects and objectTranslations</li> <li>hardis:work:save : More categories in interactive git add</li> <li>Improve authentication check performances</li> <li>New command hardis:config:get to return all config for project, branch or user</li> <li>New deployment errors tips</li> </ul>"},{"location":"CHANGELOG/#2110-2021-04-15","title":"[2.11.0] 2021-04-15","text":"<ul> <li>Delete scratch org when its initialization has failed during CI</li> <li>Clean obsolete object fields and objectTranslations</li> </ul>"},{"location":"CHANGELOG/#2104-2021-04-15","title":"[2.10.4] 2021-04-15","text":"<ul> <li>Provide password to user when creating new scratch org</li> <li>Update CI default config to allow to not delete scratch orgs (define <code>CI_DELETE_SCRATCH_ORG: \"true\"</code> in gitlab-ci-config.yml)</li> <li>New deploy tips: record type not found, picklist value not found</li> </ul>"},{"location":"CHANGELOG/#2103-2021-04-14","title":"[2.10.3] 2021-04-14","text":"<ul> <li>Allow advanced user to bypass auth check (set <code>skipAuthCheck:true</code> in config/user/***.sfdx-hardis.yml)</li> <li>Optimize check of <code>force:config:set restDeploy: false</code></li> <li>hardisversion:create : Store package installation password in project config + fixes</li> </ul>"},{"location":"CHANGELOG/#2102-2021-04-14","title":"[2.10.2] 2021-04-14","text":"<ul> <li>hardis:work:refresh : Make sure the user saved his work (commit) before merging another branch in current branch</li> </ul>"},{"location":"CHANGELOG/#2101-2021-04-11","title":"[2.10.1] 2021-04-11","text":"<ul> <li>hardis:org:test:apex : Fix regex to new Apex Test results stdout format</li> </ul>"},{"location":"CHANGELOG/#2100-2021-04-11","title":"[2.10.0] 2021-04-11","text":"<ul> <li>hardis:work:save : Automatic generation of split package.xml and deploymentPlan in .sfdx-hardis.yml</li> <li>hardis:work:save : Propose to export data when saving</li> <li>Remove duplicates from .gitignore and .forceignore</li> <li>Add chromium in dockerfile</li> </ul>"},{"location":"CHANGELOG/#294-2021-04-09","title":"[2.9.4] 2021-04-09","text":"<ul> <li>Fix refresh</li> <li>Update project cleaning references</li> </ul>"},{"location":"CHANGELOG/#293-2021-04-08","title":"[2.9.3] 2021-04-08","text":"<ul> <li>hardis:work:refresh : allow to refresh from another branch</li> </ul>"},{"location":"CHANGELOG/#292-2021-04-08","title":"[2.9.2] 2021-04-08","text":"<ul> <li>hardis:work:save : Fix issue when trying to stage &amp; commit ignored files after project cleaning</li> <li>hardis:project:configure:auth Improve error message when unable to upload ConnectedApp on production environment</li> <li>Update default Apex PMD ruleset</li> <li>Use replace and not replaceAll for node14 compatibility</li> </ul>"},{"location":"CHANGELOG/#291-2021-04-07","title":"[2.9.1] 2021-04-07","text":"<ul> <li>Clean git reset before save</li> <li>Clean git stash before new task</li> </ul>"},{"location":"CHANGELOG/#290-2021-04-06","title":"[2.9.0] 2021-04-06","text":"<ul> <li>New command hardis:project:create</li> <li>Refactor project cleaning and allow to use external config files (destructiveChanges-like.xml or json)</li> <li>Fixes<ul> <li>hardis:work:save : Create destructiveChanges.xml if not existing</li> <li>hardis:work:save : call forceSourcePull method to propose to update .forceignore if errors are found</li> <li>hardis:project:configure:auth: call mdapi:deploy with RunLocalTests to manage production environments</li> <li>authentication: auth only to devHub if --devhub sent</li> <li>Disable spinner for restDeploy check</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#285-2021-04-06","title":"[2.8.5] 2021-04-06","text":"<ul> <li>QuickFix question icon</li> </ul>"},{"location":"CHANGELOG/#284-2021-04-06","title":"[2.8.4] 2021-04-06","text":"<ul> <li>Allow to skip pull before save</li> <li>New deployTip: code coverage items with 0%</li> <li>Fix DevHub auth when credential out of date</li> <li>Use latest sfdx-cli package</li> <li>Init git config only if we are not in CI</li> </ul>"},{"location":"CHANGELOG/#283-2021-04-01","title":"[2.8.3] 2021-04-01","text":"<ul> <li>Fix package creation</li> <li>When using VsCode UI via WebSocket, display selected values in console logs</li> </ul>"},{"location":"CHANGELOG/#282-2021-04-01","title":"[2.8.2] 2021-04-01","text":"<ul> <li>hardis:work:save : reset ongoing merge if existing</li> <li>Fix git reset call</li> </ul>"},{"location":"CHANGELOG/#280-2021-03-31","title":"[2.8.0] 2021-03-31","text":"<ul> <li>Define git user.name and user.email if not set</li> <li>Define VsCode as git merge/diff tool if none is defined</li> <li>Unstash changes (git reset) at the beginning of hardis:work:save</li> <li>Deploy destructive changes after real deployment</li> <li>hardis:project:clean:references now works also to remove references to content of manifest/destructiveChanges.xml</li> <li>hardis:work:save: Clean sfdx project while saving it</li> <li>Factorize temp directory creation</li> </ul>"},{"location":"CHANGELOG/#272-2021-03-30","title":"[2.7.2] 2021-03-30","text":"<ul> <li>Check user is sure to want to reuse an existing scratch org</li> <li>Fix hardis:work:refresh</li> </ul>"},{"location":"CHANGELOG/#271-2021-03-29","title":"[2.7.1] 2021-03-29","text":"<ul> <li>Fix auto-fix of .gitignore and .forceignore</li> <li>Propose to auto-update .force ignore when there is a pull issue</li> </ul>"},{"location":"CHANGELOG/#270-2021-03-29","title":"[2.7.0] 2021-03-29","text":"<ul> <li>Communicate with VsCode SFDX Hardis extension via WebSocket if server is found</li> <li>Send user input prompts to VsCode UI if WebSocket server found</li> <li>Send refreshStatus notifications when context is updated</li> <li>Arrange some messages for better display on UI</li> </ul>"},{"location":"CHANGELOG/#260-2021-03-28","title":"[2.6.0] 2021-03-28","text":"<ul> <li>New command hardis:project:clean:references to clean SFDX project from data.com license references</li> <li>hardis:scratch:create: Load sfdmu workspace <code>scripts/data/ScratchInit</code> if existing in , to initialize scratch org data</li> </ul>"},{"location":"CHANGELOG/#250-2021-03-28","title":"[2.5.0] 2021-03-28","text":"<ul> <li>New command hardis:source:push</li> <li>New command hardis:source:pull</li> <li>Various mini-fixes</li> <li>Move deploymentPlan.json within .sfdx-hardis.json</li> <li>Retry management for execCommand function. ex: <code>retry: {retryDelay: 30,retryStringConstraint: 'some string present in output', retryMaxAttempts: 5}</code></li> </ul>"},{"location":"CHANGELOG/#240-2021-03-27","title":"[2.4.0] 2021-03-27","text":"<ul> <li>Add sfdmu &amp; sfdx-git-delta in dependencies &amp; Dockerfile</li> <li>Import data with sfdmu</li> <li>Manage data import steps in <code>deploymentPlan.json</code></li> <li>New command hardis:org:data:export</li> <li>New command hardis:org:data:import</li> </ul>"},{"location":"CHANGELOG/#230-2021-03-26","title":"[2.3.0] 2021-03-26","text":"<ul> <li>hardis:work:save: Do not git add manifest files when they have not been updated</li> <li>Select type of org to connect: enhance label</li> <li>Multi-Select default to 9999 items displayed</li> <li>Display tips about deployment failures when they happen</li> <li>Create scratch org: When DeferSharingCalc in features, suspend and resume sharing calc during force:source:push</li> <li>Allow to define a file <code>manifest/deploymentPlan.json</code> to split the deployment into separate package.xml files</li> </ul> <p>Example:</p> <pre><code>{\n  \"packages\": [\n    {\n      \"label\": \"SharingRulesAccount\",\n      \"packageXmlFile\": \"splits/packageXmlSharingRulesAccount.xml\",\n      \"order\": 10,\n      \"waitAfter\": 60\n    },\n    {\n      \"label\": \"SharingRulesVisit__c\",\n      \"packageXmlFile\": \"splits/packageXmlSharingRulesAccountVisit__c.xml\",\n      \"order\": 10\n    }\n  ]\n}\n</code></pre>"},{"location":"CHANGELOG/#221-2021-03-23","title":"[2.2.1] 2021-03-23","text":"<ul> <li>QuickFix 2.2.1</li> <li>Use RunLocalTests when deploying ConnectedApp metadata to production org</li> </ul>"},{"location":"CHANGELOG/#220-2021-03-23","title":"[2.2.0] 2021-03-23","text":"<ul> <li>Enhance security by encrypting SSH private key</li> </ul>"},{"location":"CHANGELOG/#217-2021-03-22","title":"[2.1.7] 2021-03-22","text":"<ul> <li>More categories for Interactive Git Add (Aura,LWC, Tech Config)</li> <li>Auto-update .forceignore</li> <li>Fix <code>hardis:org:test:apex</code></li> </ul>"},{"location":"CHANGELOG/#216-2021-03-20","title":"[2.1.6] 2021-03-20","text":"<ul> <li>Fix org authentication check</li> </ul>"},{"location":"CHANGELOG/#215-2021-03-19","title":"[2.1.5] 2021-03-19","text":"<ul> <li>Unlimited list of items displayed during interactive git add</li> <li>Uniformize prompts to user</li> </ul>"},{"location":"CHANGELOG/#214-2021-03-17","title":"[2.1.4] 2021-03-17","text":"<ul> <li>Deploy with --ignorewarnings</li> </ul>"},{"location":"CHANGELOG/#213-2021-03-17","title":"[2.1.3] 2021-03-17","text":"<ul> <li>Fix hardis:retrieve:sources:dx when not in a DX project</li> <li>Fix deloyment of Connected App in production</li> <li>Display more options by page during interactive git add</li> <li>Sort files to git add by group and manage preselection</li> </ul>"},{"location":"CHANGELOG/#212-2021-03-14","title":"[2.1.2] 2021-03-14","text":"<ul> <li>Improve package installation<ul> <li>Allow to install a package not listed in sfdx-hardis</li> <li>Allow to configure automatic installation during deployments, or not</li> <li>Allow to configure automatic installation during scratch org initialisation, or not</li> </ul> </li> <li>Reformat strings when no spaces are allowed in a user input</li> </ul>"},{"location":"CHANGELOG/#211-2021-03-12","title":"[2.1.1] 2021-03-12","text":"<ul> <li>Fix hardis:scratch:create when initDataRequests</li> </ul>"},{"location":"CHANGELOG/#210-2021-03-10","title":"[2.1.0] 2021-03-10","text":"<ul> <li>New command hardis:data:tree:export</li> <li>scratch:create: Import init data using .sfdx-hardis.yml <code>initDataRequests</code> property</li> <li>scratch:create: Assign to permission set (or PS groups) using .sfdx-hardis.yml <code>initPermissionSets</code> property</li> </ul>"},{"location":"CHANGELOG/#200-2021-03-09","title":"[2.0.0] 2021-03-09","text":"<ul> <li>New command hardiscreate to create Managed and Unlocked packages</li> <li>Migrate from tslint to eslint</li> <li>Fix dependencies hell</li> <li>Fix hardis:org:purge:flow with new result format (#49)</li> </ul>"},{"location":"CHANGELOG/#161-2021-03-09","title":"[1.6.1] 2021-03-09","text":"<ul> <li>Update sfdx-project.json when installing a package</li> <li>Refresh env &amp; scratch org if same scratch org is reused</li> <li>Update default files for CI &amp; monitoring projects</li> <li>Do not deploy packages from hardis:project:deploy:sources:dx when we are in --check mode !</li> <li>Better output display for hardis:org:test:apex</li> </ul>"},{"location":"CHANGELOG/#160-2021-03-08","title":"[1.6.0] - 2021-03-08","text":"<ul> <li>New package commands<ul> <li>hardisinstall</li> <li>hardisversion:create</li> <li>hardisversion:list</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#151-2021-03-07","title":"[1.5.1] - 2021-03-07","text":"<ul> <li>Use shared Mega-Linter configuration</li> </ul>"},{"location":"CHANGELOG/#150-2021-03-05","title":"[1.5.0] 2021-03-05","text":"<ul> <li>New command hardis:org:select</li> <li>New command hardis:work:resetselection</li> <li>hardis:work:save: Upgrade package.xml and destructiveChanges.xml from git diff</li> <li>Improve console logging of git operations</li> </ul>"},{"location":"CHANGELOG/#141-2021-03-03","title":"[1.4.1] 2021-03-03","text":"<ul> <li>Update default gitlab-ci.yml</li> <li>rename commands:<ul> <li>hardis:work:new</li> <li>hardis:work:refresh</li> <li>hardis:work:save</li> </ul> </li> <li>cosmetic enhancements</li> </ul>"},{"location":"CHANGELOG/#140-2021-02-28","title":"[1.4.0] 2021-02-28","text":"<ul> <li>New work commands to make easier non technical users to use Hardis CI<ul> <li>hardis:work:task:new</li> <li>hardis:work:task:save</li> <li>hardis:work:task:refresh</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#136-2021-02-26","title":"[1.3.6] 2021-02-26","text":"<ul> <li>Quick fix hardis:org:configure:monitoring + colors</li> </ul>"},{"location":"CHANGELOG/#135-2021-02-26","title":"[1.3.5] 2021-02-26","text":"<ul> <li>Workaround when --soapdeploy argument is not available</li> </ul>"},{"location":"CHANGELOG/#134-2021-02-25","title":"[1.3.4] 2021-02-25","text":"<ul> <li>Reuse msTeamsWebhookUrl during sfdx:org:configure:monitoring prompts</li> <li>Allow to override CONFIG_BRANCH to get forced .sfdx.hardis.BRANCH.yml</li> </ul>"},{"location":"CHANGELOG/#133-2021-02-24","title":"[1.3.3] 2021-02-24","text":"<ul> <li>Soap option for force:mdapi:deploy</li> </ul>"},{"location":"CHANGELOG/#132-2021-02-24","title":"[1.3.2] 2021-02-24","text":"<ul> <li>Guide user to assign rights to Connected App in sfdx:org:configure:monitoring</li> </ul>"},{"location":"CHANGELOG/#131-2021-02-24","title":"[1.3.1] 2021-02-24","text":"<ul> <li>Manage git clone &amp; push for sfdx:org:configure:monitoring</li> <li>Manage upload of connected app metadata for sfdx:org:configure:monitoring</li> </ul>"},{"location":"CHANGELOG/#130-2021-02-23","title":"[1.3.0] 2021-02-23","text":"<ul> <li>New command sfdx:project:deploy:sources:metadata</li> <li>Generate .cache folder only when necessary</li> <li>New command sfdx:org:configure:monitoring</li> </ul>"},{"location":"CHANGELOG/#30-remove-use-of-sfdx-node","title":"30: Remove use of sfdx-node","text":""},{"location":"CHANGELOG/#120-2021-02-21","title":"[1.2.0] 2021-02-21","text":"<ul> <li>Auto-generate alpha version of plugin package and associated docker image when publishing from branch alpha</li> <li>Manage cache storage for CI dependent jobs (cache, artifacts)<ul> <li>.cache/sfdx-hardis/.sfdx</li> <li>.sfdx</li> <li>config/user</li> </ul> </li> <li>Improve org authentication</li> <li>New command hardis:org:test<ul> <li>Test org coverage and fail if &lt; 75%</li> </ul> </li> <li>Installed package management<ul> <li>Factorize method</li> <li>Install packages during hardis:project:deploy:sources:dx</li> </ul> </li> <li>Allow to reuse scratch org if previous creation failed. Force using --forcenew</li> <li>Improve auto-update of local project sfdx-hardis files</li> <li>Improve console logs</li> <li>Allow to store DevHubSfdxClientId in user sfdx-hardis.yml ( in /user folder)</li> </ul>"},{"location":"CHANGELOG/#24-change-the-way-of-listing-installed-packages","title":"24: Change the way of listing installed packages","text":""},{"location":"CHANGELOG/#26-new-command-sfdx-hardisprojectconfiguredeployments-to-configure-connected-app","title":"26: New command sfdx hardis:project:configure:deployments to configure Connected app","text":""},{"location":"CHANGELOG/#27-check-in-manifest-folder-for-packagexml","title":"27: Check in manifest folder for package.xml","text":""},{"location":"CHANGELOG/#113-2021-02-17","title":"[1.1.3] 2021-02-17","text":"<ul> <li>Fix cases when directory is not git</li> </ul>"},{"location":"CHANGELOG/#110-2021-02-17","title":"[1.1.0] 2021-02-17","text":"<ul> <li>New command hardis:project:deploy:sources:dx (alpha)</li> <li>New command hardis:project:audit:apiversion</li> </ul>"},{"location":"CHANGELOG/#101-2021-02-15","title":"[1.0.1] 2021-02-15","text":"<ul> <li>Fix auth:login to avoid DevHub auth when not necessary</li> </ul>"},{"location":"CHANGELOG/#100-2021-02-15","title":"[1.0.0] 2021-02-15","text":"<ul> <li>New command hardis:scratch:create</li> <li>Advanced project initialization using <code>--shape</code> argument for <code>sfdx hardis:org:retrieve:sources:dx</code></li> <li>Automatic generation of .sfdx-hardis*.yml configuration files</li> <li>Automatic update of project package.json to add sfdx-hardis utilities</li> </ul>"},{"location":"CHANGELOG/#0510-2021-02-12","title":"[0.5.10] 2021-02-12","text":"<ul> <li>Allow purges to fail without making sfdx command fail</li> </ul>"},{"location":"CHANGELOG/#055-2021-02-10","title":"[0.5.5] 2021-02-10","text":"<ul> <li>Check if installed sfdx-hardis is the latest version, else display a message to advise the user to upgrade to latest</li> </ul>"},{"location":"CHANGELOG/#054-2021-02-09","title":"[0.5.4] 2021-02-09","text":"<ul> <li>Fixes:<ul> <li><code>hardis:org:purge:flow</code>: Do not crash in case the Flow is not deletable</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#052-2021-02-07","title":"[0.5.2] 2021-02-07","text":"<ul> <li>Fixes:<ul> <li><code>--no-prompt</code> argument is ignored</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#051-2021-02-04","title":"[0.5.1] 2021-02-04","text":"<ul> <li>Fixes:<ul> <li>Add more items to metadatas not convertible to sfdx sources</li> <li>Issue when using --sandbox argument</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#050-2021-02-03","title":"[0.5.0] 2021-02-03","text":"<ul> <li>New command <code>hardis:project:audit:callincallout</code>: Audit sfdx project (or metadatas) sources to list all CallIns and CallOuts from Apex / Triggers code parsing</li> <li>New command <code>hardis:project:audit:remotesites</code>: Audit sfdx project (or metadatas) sources to list all remote site settings of an org</li> </ul>"},{"location":"CHANGELOG/#041-2021-02-01","title":"[0.4.1] 2021-02-01","text":"<ul> <li>Fix: Manage Hooks only from hardis namespace commands</li> </ul>"},{"location":"CHANGELOG/#040-2021-02-01","title":"[0.4.0] 2021-02-01","text":"<ul> <li>Send MS Teams notifications if set environment variable MS_TEAMS_WEBHOOK_URL or msTeamsWebhookUrl in .sfdx-hardis.yml</li> </ul>"},{"location":"CHANGELOG/#031-2021-01-31","title":"[0.3.1] 2021-01-31","text":"<ul> <li>Always regenerate full package.xml before retrieving metadatas</li> </ul>"},{"location":"CHANGELOG/#030-2021-01-31","title":"[0.3.0] 2021-01-31","text":"<ul> <li>Build and upload nvuillam/sfdx-hardis docker image when releasing a new version</li> <li>New command force:auth:login + manage login using JWT for CI</li> </ul>"},{"location":"CHANGELOG/#020-2021-01-31","title":"[0.2.0] 2021-01-31","text":"<ul> <li>New command sfdx hardis:org:retrieve:sources:metadata : Retrieve all metadata from an org</li> </ul>"},{"location":"CHANGELOG/#011-2021-01-31","title":"[0.1.1] 2021-01-31","text":"<ul> <li>New command sfdx hardis:org:retrieve:sources:dx : Create SFDX project from remote org</li> </ul>"},{"location":"CHANGELOG/#001-2021-01-26","title":"[0.0.1] 2021-01-26","text":"<ul> <li>New command sfdx hardis:org:purge:flow : Purge Obsolete flow versions to avoid the 50 max versions limit</li> </ul>"},{"location":"SECURITY/","title":"Security","text":""},{"location":"SECURITY/#security-policy","title":"Security Policy","text":""},{"location":"SECURITY/#introduction","title":"Introduction","text":"<p>Salesforce orgs contain critical data, so we are very serious regarding the security around the use of sfdx-hardis locally or from CI/CD servers.</p>"},{"location":"SECURITY/#supported-versions","title":"Supported Versions","text":"<p>Always use the latest sfdx-hardis version to be up to date with security updates.</p>"},{"location":"SECURITY/#supply-chain-security","title":"Supply Chain Security","text":""},{"location":"SECURITY/#continuous-scanning","title":"Continuous Scanning","text":"<p>All development and release workflows contain security checks using Trivy</p> <ul> <li>Scan npm package files</li> </ul> <ul> <li>Scan docker images</li> </ul> <p>Some exceptions has been added in .trivyignore config file, with comments explaining why these CVE are not risky within sfdx-hardis usage.</p> <p>You can find security scan results and SBOM (Software Build Of Materials) in CycloneDX and SPDX formats in the artifacts of release workflows or directly at the end of the Release notes.</p> <p></p>"},{"location":"SECURITY/#dependencies","title":"Dependencies","text":"<p>We are using dependabot to keep dependencies up to date.</p>"},{"location":"SECURITY/#architecture","title":"Architecture","text":"<ul> <li>sfdx-hardis plugin is built using the latest sfdx-plugin framework provided by Salesforce, including the use of official CI/CD workflows used by official Salesforce CLI plugins.</li> </ul> <ul> <li>Authentication between sfdx-hardis and Salesforce orgs are performed using a Connect App created during configuration. Each connection requires 2 secured environment variables: one with the connected app Client Id, and one used to decrypt \"on the fly\" an encrypted self-signed certificate stored in the repository.</li> </ul> <ul> <li>There is no embedded telemetry: sfdx-hardis maintainers have 0 information about sfdx-hardis command line usage, and it is by design.</li> </ul>"},{"location":"SECURITY/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>In case of detected vulnerability, please write directly to Nicolas Vuillamy on LinkedIn</p>"},{"location":"all-env-variables/","title":"All Environment Variables","text":""},{"location":"all-env-variables/#all-environment-variables","title":"All Environment Variables","text":"<p>Here is a comprehensive list of all environment variables that can be used in sfdx-hardis source code.</p> <p>This list has been generated with GitHub Copilot so if you see any incoherence please raise an issue :)</p>"},{"location":"all-env-variables/#table-of-contents","title":"Table of Contents","text":"<ul> <li>All Environment Variables</li> <li>Table of Contents</li> </ul> <ul> <li> <p>Custom sfdx-hardis Variables</p> <ul> <li>Salesforce Configuration</li> <li>Deployment Control</li> <li>Monitoring &amp; Debugging</li> <li>System Configuration</li> <li>Bulk API Settings</li> </ul> </li> </ul> <ul> <li>Tool-Specific Variables<ul> <li>Azure DevOps</li> <li>GitLab</li> <li>GitHub</li> <li>Bitbucket</li> <li>JIRA Integration</li> <li>Slack Integration</li> <li>AI Common variables</li> <li>MegaLinter LLM Advisor</li> <li>Agentforce (Salesforce) integration</li> <li>LangChain integration (OpenAI, Anthropic, Gemini...)</li> <li>OpenAI (direct) variables</li> <li>Email Notifications</li> <li>Browser Automation</li> <li>Generic Ticketing</li> <li>Generic CI/CD</li> </ul> </li> </ul> <ul> <li>Summary</li> </ul>"},{"location":"all-env-variables/#custom-sfdx-hardis-variables","title":"Custom sfdx-hardis Variables","text":"<p>These variables control specific behaviors and configurations within sfdx-hardis itself.</p>"},{"location":"all-env-variables/#salesforce-configuration","title":"Salesforce Configuration","text":"Variable Name Description Default Value Possible Values Usage Location CI_SCRATCH_MODE Mode for scratch org in CI (e.g., 'deploy') <code>undefined</code> <code>'deploy'</code>, any string (e.g., <code>'test'</code>, <code>'dev'</code>) <code>src/common/utils/orgUtils.ts</code> DEVHUB_ALIAS Alias for the Salesforce DevHub org <code>undefined</code> Any valid org alias (e.g., <code>'MyDevHub'</code>, <code>'production-devhub'</code>) Multiple files in config, hooks, and auth INSTANCE_URL Salesforce instance URL for authentication <code>undefined</code> Valid Salesforce instance URLs (e.g., <code>'https://mycompany.my.salesforce.com'</code>, <code>'https://test.salesforce.com'</code>) <code>src/common/utils/authUtils.ts</code> NOT_IMPACTING_METADATA_TYPES Comma-separated list of metadata types that don't impact deployments Predefined list Comma-separated metadata type names (e.g., <code>'Document,StaticResource,Report'</code>) <code>src/config/index.ts</code> ORG_ALIAS Alias for the target Salesforce org <code>undefined</code> Any valid org alias (e.g., <code>'staging'</code>, <code>'production'</code>, <code>'sandbox1'</code>) Multiple files in hooks and auth SFDX_API_VERSION Salesforce API version to use <code>'62.0'</code> Valid Salesforce API versions (e.g., <code>'62.0'</code>) <code>src/config/index.ts</code> SFDX_AUTH_URL_DEV_HUB Salesforce auth URL for DevHub <code>undefined</code> Valid Salesforce auth URLs (e.g., <code>'force://PlatformCLI::5Aep8614XXXXXXXXXXXX...'</code>) <code>src/common/utils/authUtils.ts</code> SFDX_AUTH_URL_TECHNICAL_ORG Salesforce auth URL for technical org <code>undefined</code> Valid Salesforce auth URLs (e.g., <code>'force://PlatformCLI::5Aep8614XXXXXXXXXXXX...'</code>) <code>src/commands/hardis/auth/login.ts</code> SFDX_CLIENT_ID Salesforce connected app client ID <code>undefined</code> Valid connected app client IDs (e.g., <code>'3MVG9CEn_O3jvv0XXXXXXXXXXXX...'</code>) <code>src/common/utils/authUtils.ts</code> SFDX_CLIENT_KEY Salesforce connected app client key <code>undefined</code> Valid connected app client keys (e.g., <code>'/path/to/server.key'</code>, certificate content) <code>src/common/utils/authUtils.ts</code> SFDX_ENV Salesforce CLI environment setting Set to <code>'development'</code> when debug is enabled <code>'development'</code>, <code>'production'</code> <code>src/hooks/init/log.ts</code> SFDX_XML_INDENT Indentation string for XML formatting <code>'    '</code> (4 spaces) Any string (e.g., <code>'    '</code> for 4 spaces, <code>'\\t'</code> for tabs, <code>'  '</code> for 2 spaces) <code>src/common/utils/xmlUtils.ts</code> SKIP_TECHNICAL_ORG Skip technical org connection <code>undefined</code> <code>'true'</code>, <code>'false'</code> <code>src/common/utils/orgUtils.ts</code> TARGET_USERNAME Target Salesforce username for operations <code>undefined</code> Valid Salesforce usernames (e.g., <code>'admin@mycompany.com'</code>, <code>'test-user@example.com.sandbox'</code>) <code>src/common/utils/authUtils.ts</code> TECHNICAL_ORG_ALIAS Alias for technical Salesforce org <code>undefined</code> Any valid org alias (e.g., <code>'technical-org'</code>, <code>'monitoring-org'</code>) <code>src/commands/hardis/auth/login.ts</code>"},{"location":"all-env-variables/#deployment-control","title":"Deployment Control","text":"Variable Name Description Default Value Possible Values Usage Location AUTO_UPDATE Enable automatic update of .gitignore and .forceignore files when not in CI <code>undefined</code> <code>'true'</code>, <code>'false'</code> Found in changelog SFDX_DEPLOY_WAIT_MINUTES Minutes to wait for deployment completion <code>120</code> Positive integers (e.g., <code>'120'</code>, <code>'60'</code>) Multiple files in deployUtils and Azure config SFDX_DISABLE_FLOW_DIFF Disable Flow Visual Git Diff calculation in PR comments <code>undefined</code> <code>'true'</code>, <code>'false'</code> <code>src/common/utils/gitUtils.ts</code> SFDX_HARDIS_DEPLOY_BEFORE_MERGE Deploy before merge in CI/CD <code>undefined</code> <code>'true'</code>, <code>'false'</code> <code>src/common/gitProvider/index.ts</code> SFDX_HARDIS_DEPLOY_IGNORE_SPLIT_PACKAGES Ignore splitting of package.xml files during deployment <code>'true'</code> <code>'true'</code>, <code>'false'</code> <code>src/common/utils/deployUtils.ts</code>"},{"location":"all-env-variables/#monitoring-debugging","title":"Monitoring &amp; Debugging","text":"Variable Name Description Default Value Possible Values Usage Location DEBUG Enable debug logging output <code>undefined</code> <code>'true'</code>, <code>'false'</code> <code>src/common/websocketClient.ts</code> DEBUG_DEPLOY Enable debug logging for deployment operations <code>undefined</code> <code>'true'</code>, <code>'false'</code> <code>src/common/utils/orgUtils.ts</code> MONITORING_BACKUP_SKIP_METADATA_TYPES Metadata types to skip during backup monitoring <code>undefined</code> Comma-separated metadata type names (e.g., <code>'Document,Report,Dashboard'</code>) Found in changelog and documentation SFDX_HARDIS_DEBUG_ENV Enable debug environment for sfdx-hardis <code>undefined</code> <code>'true'</code>, <code>'false'</code> <code>src/hooks/init/log.ts</code> SFDX_HARDIS_MONITORING Indicates if running a monitoring job <code>undefined</code> <code>'true'</code>, <code>'false'</code> <code>src/common/utils/index.ts</code>"},{"location":"all-env-variables/#system-configuration","title":"System Configuration","text":"Variable Name Description Default Value Possible Values Usage Location CONFIG_BRANCH Override for configuration branch name Current git branch Any valid git branch name (e.g., <code>'main'</code>, <code>'develop'</code>, <code>'config-override'</code>) <code>src/config/index.ts</code> FORCE_COLOR Control color output in terminal commands <code>'0'</code> <code>'0'</code>, <code>'1'</code>, <code>'2'</code>, <code>'3'</code> <code>src/common/utils/index.ts</code> GIT_FETCH_EXTRA_FLAGS Extra flags for git fetch operations <code>undefined</code> Valid git fetch flags (e.g., <code>'--depth=1'</code>, <code>'--quiet'</code>, <code>'--prune'</code>) Found in documentation MERMAID_MODES Modes for Mermaid diagram generation <code>undefined</code> Mermaid mode values (e.g., <code>'dark'</code>, <code>'light'</code>, <code>'forest'</code>) Found in Dockerfile NODE_OPTIONS Node.js runtime options Cleared if contains <code>--inspect-brk</code> Valid Node.js options (e.g., <code>'--max-old-space-size=4096'</code>, <code>'--experimental-modules'</code>) <code>src/common/utils/index.ts</code> PROJECT_NAME Name of the sfdx-hardis project <code>undefined</code> Any project name string (e.g., <code>'My Salesforce Project'</code>, <code>'CRM-Development'</code>) <code>src/config/index.ts</code> SFDX_HARDIS_WEBSOCKET_PORT Port for sfdx-hardis WebSocket server <code>2702</code> Valid port numbers (e.g., <code>2702</code>) <code>src/common/websocketClient.ts</code>"},{"location":"all-env-variables/#bulk-api-settings","title":"Bulk API Settings","text":"Variable Name Description Default Value Possible Values Usage Location BULKAPIV2_POLL_INTERVAL Override BulkApiV2 Poll interval <code>5000</code> Any number <code>src/common/utils/apiUtils.ts</code> BULKAPIV2_POLL_TIMEOUT Override BulkApiV2 Poll Timeout <code>60000</code> Any number <code>src/common/utils/apiUtils.ts</code>"},{"location":"all-env-variables/#tool-specific-variables","title":"Tool-Specific Variables","text":"<p>These variables integrate sfdx-hardis with external tools and platforms.</p>"},{"location":"all-env-variables/#azure-devops","title":"Azure DevOps","text":"Variable Name Description Default Value Possible Values Usage Location BUILD_BUILD_ID Azure build ID for CI/CD pipeline identification <code>undefined</code> Numeric build IDs (e.g., <code>'12345'</code>, <code>'987654'</code>) <code>src/common/gitProvider/azureDevops.ts</code> BUILD_REPOSITORY_ID Azure repository ID for accessing repository information <code>undefined</code> Valid Azure repository GUIDs (e.g., <code>'550e8400-e29b-41d4-a716-446655440000'</code>) <code>src/common/gitProvider/azureDevops.ts</code>, <code>src/common/ticketProvider/azureBoardsProvider.ts</code> BUILD_REPOSITORYNAME Azure repository name for building URLs and references <code>undefined</code> Valid Azure repository names (e.g., <code>'my-salesforce-project'</code>, <code>'CRM-Repository'</code>) <code>src/common/gitProvider/azureDevops.ts</code> BUILD_SOURCEBRANCHNAME Azure source branch name for the current build <code>undefined</code> Valid git branch names (e.g., <code>'main'</code>, <code>'feature/new-component'</code>, <code>'develop'</code>) <code>src/common/gitProvider/azureDevops.ts</code> CI_SFDX_HARDIS_AZURE_TOKEN Custom Azure DevOps token for sfdx-hardis integration <code>SYSTEM_ACCESSTOKEN</code> Valid Azure DevOps personal access tokens (e.g., <code>'eyJ0eXAiOiJKV1QiLCJhbGciOiXXXXXXXXXXXX...'</code>) <code>src/common/gitProvider/index.ts</code>, <code>src/common/ticketProvider/azureBoardsProvider.ts</code> SYSTEM_ACCESSTOKEN Azure DevOps system access token <code>undefined</code> Valid Azure DevOps access tokens (e.g., <code>'eyJ0eXAiOiJKV1QiLCJhbGciOiXXXXXXXXXXXX...'</code>) <code>src/common/gitProvider/index.ts</code>, <code>src/common/ticketProvider/azureBoardsProvider.ts</code> SYSTEM_COLLECTIONURI Azure DevOps collection URI <code>undefined</code> Valid Azure DevOps collection URIs (e.g., <code>'https://dev.azure.com/myorganization/'</code>) <code>src/common/gitProvider/index.ts</code>, <code>src/common/gitProvider/azureDevops.ts</code>, <code>src/common/ticketProvider/azureBoardsProvider.ts</code> SYSTEM_JOB_DISPLAY_NAME Azure DevOps job display name <code>undefined</code> Valid job display names (e.g., <code>'Build and Test'</code>, <code>'Deploy to Staging'</code>) <code>src/common/gitProvider/azureDevops.ts</code> SYSTEM_JOB_ID Azure DevOps job ID <code>undefined</code> Valid Azure job IDs (e.g., <code>'550e8400-e29b-41d4-a716-446655440000'</code>) <code>src/common/gitProvider/azureDevops.ts</code> SYSTEM_PULLREQUEST_PULLREQUESTID Azure DevOps pull request ID <code>undefined</code> Valid pull request IDs (e.g., <code>'123'</code>, <code>'456'</code>) <code>src/common/gitProvider/azureDevops.ts</code> SYSTEM_TEAMPROJECT Azure DevOps team project name <code>undefined</code> Valid Azure DevOps project names (e.g., <code>'MyProject'</code>, <code>'Salesforce-Development'</code>) <code>src/common/gitProvider/index.ts</code>, <code>src/common/gitProvider/azureDevops.ts</code>, <code>src/common/ticketProvider/azureBoardsProvider.ts</code>"},{"location":"all-env-variables/#gitlab","title":"GitLab","text":"Variable Name Description Default Value Possible Values Usage Location CI_JOB_TOKEN GitLab CI job token for API authentication <code>undefined</code> Valid GitLab job tokens (e.g., <code>'glcbt-64chars_token_XXXXXXXXXXXXXXXXXXXX'</code>) <code>src/common/gitProvider/index.ts</code> CI_PROJECT_ID GitLab project ID <code>undefined</code> Valid GitLab project IDs (e.g., <code>'123456'</code>, <code>'42'</code>) <code>src/common/gitProvider/gitlab.ts</code> CI_PROJECT_URL GitLab project URL for building branch URLs <code>undefined</code> Valid GitLab project URLs (e.g., <code>'https://gitlab.com/myuser/myproject'</code>) <code>src/common/gitProvider/gitlab.ts</code> CI_SFDX_HARDIS_GITLAB_TOKEN Custom GitLab token for sfdx-hardis integration <code>ACCESS_TOKEN</code> Valid GitLab access tokens (e.g., <code>'glpat-XXXXXXXXXXXXXXXXXXXX'</code>) <code>src/common/gitProvider/index.ts</code>"},{"location":"all-env-variables/#github","title":"GitHub","text":"Variable Name Description Default Value Possible Values Usage Location GITHUB_TOKEN GitHub token for API authentication <code>undefined</code> Valid GitHub personal access tokens (e.g., <code>'ghp_XXXXXXXXXXXXXXXXXXXX'</code>, <code>'github_pat_XXXXXXXXXXXX'</code>) <code>src/common/gitProvider/index.ts</code>"},{"location":"all-env-variables/#bitbucket","title":"Bitbucket","text":"Variable Name Description Default Value Possible Values Usage Location BITBUCKET_WORKSPACE Bitbucket workspace identifier for Bitbucket provider detection <code>undefined</code> Valid Bitbucket workspace names (e.g., <code>'mycompany'</code>, <code>'my-team-workspace'</code>) <code>src/common/gitProvider/index.ts</code> CI_SFDX_HARDIS_BITBUCKET_TOKEN Custom Bitbucket token for sfdx-hardis integration <code>undefined</code> Valid Bitbucket app passwords or tokens (e.g., <code>'ATBBXXXXXXXXXXXXXXXXXXXX'</code>) <code>src/common/gitProvider/index.ts</code>"},{"location":"all-env-variables/#jira-integration","title":"JIRA Integration","text":"Variable Name Description Default Value Possible Values Usage Location JIRA_EMAIL JIRA user email for authentication <code>undefined</code> Valid email addresses (e.g., <code>'admin@mycompany.com'</code>, <code>'jira-user@example.org'</code>) <code>src/common/ticketProvider/jiraProvider.ts</code> JIRA_HOST JIRA server hostname <code>\"https://define.JIRA_HOST.in.cicd.variables/\"</code> Valid JIRA server URLs (e.g., <code>'https://mycompany.atlassian.net'</code>, <code>'https://jira.mycompany.com'</code>) <code>src/common/ticketProvider/jiraProvider.ts</code> JIRA_PAT JIRA Personal Access Token for authentication <code>undefined</code> Valid JIRA personal access tokens (e.g., <code>'ATATTXXXXXXXXXXXXXXXXXXXX'</code>) <code>src/common/ticketProvider/jiraProvider.ts</code> JIRA_TICKET_REGEX Regular expression for JIRA ticket references <code>\"(?&lt;=[^a-zA-Z0-9_-]|^)([A-Za-z0-9]{2,10}-\\\\d{1,6})(?=[^a-zA-Z0-9_-]|$)\"</code> Valid regular expressions (e.g., <code>'PROJ-\\\\d+'</code>, <code>'[A-Z]+-\\\\d{1,4}'</code>) <code>src/common/ticketProvider/jiraProvider.ts</code> JIRA_TOKEN JIRA API token for authentication <code>undefined</code> Valid JIRA API tokens (e.g., <code>'ATATT3xFfGF0T4JVXXXXXXXXXXXXXXXXXXXX'</code>) <code>src/common/ticketProvider/jiraProvider.ts</code>"},{"location":"all-env-variables/#slack-integration","title":"Slack Integration","text":"Variable Name Description Default Value Possible Values Usage Location SLACK_CHANNEL_ID Slack channel ID for notifications <code>undefined</code> Valid Slack channel IDs (e.g., <code>'C1234567890'</code>, <code>'C0123456789'</code>) <code>src/common/notifProvider/slackProvider.ts</code> SLACK_CHANNEL_ID_ERRORS_WARNINGS Slack channel ID for error and warning notifications <code>undefined</code> Valid Slack channel IDs (e.g., <code>'C1234567890'</code>, <code>'C9876543210'</code>) <code>src/common/notifProvider/slackProvider.ts</code> SLACK_CHANNEL_ID_{BRANCH} Branch-specific Slack channel ID <code>undefined</code> Valid Slack channel IDs (e.g., <code>'C1234567890'</code> for main branch) <code>src/common/notifProvider/slackProvider.ts</code> SLACK_TOKEN Slack API token for notifications <code>undefined</code> Valid Slack bot tokens (e.g., <code>'xoxb-XXXXXXXXXXXXXXXXXXXXXXXX'</code>) <code>src/common/notifProvider/slackProvider.ts</code>, <code>src/common/notifProvider/utils.ts</code>"},{"location":"all-env-variables/#ai-common-variables","title":"AI Common variables","text":"Variable Name Description Default Value Possible Values Usage Location AI_MAXIMUM_CALL_NUMBER Maximum allowed number of calls to AI Providers during a single command <code>10000</code> Any positive integer (e.g., <code>1000</code>, <code>10000</code>) <code>src/common/aiProvider/aiProviderRoot.ts</code> PROMPTS_LANGUAGE Language to use for prompts results (<code>en</code>,<code>fr</code>, ISO codes) <code>en</code> Any ISO language code (e.g., <code>en</code>, <code>fr</code>, <code>de</code>) Prompt templates &amp; generation code DEBUG_PROMPTS Show prompt requests/responses in logs (useful for debugging) <code>false</code> <code>'true'</code>, <code>'false'</code> AI prompt/debug flows MAX_DEPLOYMENT_TIPS_AI_CALLS Max number of deployment errors analyzed by AI for a single Pull Request <code>20</code> Positive integers (e.g., <code>5</code>, <code>20</code>) <code>src/common/utils/deployTips.ts</code> DISABLE_AI Disable external AI API calls while keeping configuration <code>false</code> <code>'true'</code>, <code>'false'</code> All AI provider selection logic IGNORE_AI_CACHE Disable use of AI prompt cache files to force fresh API calls <code>false</code> <code>'true'</code>, <code>'false'</code> Features that cache AI results AI_MAX_TIMEOUT_MINUTES Maximum timeout in minutes for AI operations <code>30</code> (in CI), <code>0</code> (local) Positive integers (e.g., <code>30</code>, <code>60</code>) <code>src/common/aiProvider/index.ts</code>"},{"location":"all-env-variables/#megalinter-llm-advisor","title":"MegaLinter LLM Advisor","text":"Variable Name Description Default Possible Values Usage Location LLM_ADVISOR_ENABLED Toggle enabling the external LLM advisor used by linters/workflows <code>undefined</code> <code>'true'</code>, <code>'false'</code> <code>.github/workflows/mega-linter.yml</code>, linters LLM_ADVISOR_LEVEL Advisor severity level for linter suggestions <code>undefined</code> <code>info</code>, <code>warning</code>, <code>error</code> <code>.mega-linter.yml</code> LLM_PROVIDER Name of the LLM provider used by linters/CI <code>undefined</code> <code>openai</code>, <code>anthropic</code>, <code>google-genai</code>, <code>ollama</code>, etc. <code>.mega-linter.yml</code>, CI configs LLM_MODEL_NAME Model identifier used by the LLM advisor <code>undefined</code> Provider-specific model names (e.g., <code>gpt-4o</code>, <code>claude-2</code>) <code>.mega-linter.yml</code>, CI configs LLM_MAX_TOKENS Maximum tokens to use for LLM advisor requests <code>undefined</code> Positive integer <code>.mega-linter.yml</code>, CI configs LLM_TEMPERATURE Sampling temperature for LLM advisor requests <code>undefined</code> 0..1 <code>.mega-linter.yml</code>, CI configs LLM_ADVISOR_WITH_METADATAS Opt-in: include Salesforce metadata file contents when calling the LLM advisor <code>false</code> <code>'true'</code>, <code>'false'</code> <code>src/common/utils/deployTipJson.ts</code> (opt-in behavior; requires enabling in CI or env) LLM_METADATA_SEARCH_PATHS Optional: comma-separated additional paths to search for metadata files <code>undefined</code> Comma-separated paths (e.g., <code>config/,src/</code>) Used by metadata-aware AI flows to extend search roots (suggested usage)"},{"location":"all-env-variables/#agentforce-salesforce-integration","title":"Agentforce (Salesforce) integration","text":"Variable Name Description Default Possible Values Usage Location USE_AGENTFORCE Enable use of Agentforce prompts (Salesforce-hosted prompts) <code>false</code> <code>'true'</code>, <code>'false'</code> <code>src/common/aiProvider/agentforceProvider.ts</code> GENERIC_AGENTFORCE_PROMPT_TEMPLATE Name of Agentforce prompt template (Flex) to use <code>SfdxHardisGenericPrompt</code> Any Agentforce prompt template name Agentforce integration GENERIC_AGENTFORCE_PROMPT_URL Override URL for the Agentforce prompt generation endpoint <code>/services/data/v{{API_VERSION}}/einstein/prompt-templates/{{GENERIC_AGENTFORCE_PROMPT_TEMPLATE}}/generations</code> URL string Agentforce integration SFDX_AUTH_URL_TECHNICAL_ORG (Optional) Auth URL for a technical org to use when calling Agentforce <code>undefined</code> Salesforce auth URL Agentforce / auth flows"},{"location":"all-env-variables/#langchain-integration-openai-anthropic-gemini","title":"LangChain integration (OpenAI, Anthropic, Gemini...)","text":"Variable Name Description Default Possible Values Usage Location USE_LANGCHAIN_LLM Enable LangChain-based LLM provider integration <code>false</code> <code>'true'</code>, <code>'false'</code> <code>src/common/aiProvider/langchainProvider.ts</code> LANGCHAIN_LLM_PROVIDER LangChain provider to use (e.g., <code>ollama</code>, <code>openai</code>, <code>anthropic</code>, <code>google-genai</code>) <code>ollama</code>, <code>openai</code>, <code>anthropic</code>, <code>google-genai</code> LangChain configuration LANGCHAIN_LLM_MODEL Model identifier to use with the selected provider Provider-specific model names (e.g., <code>gpt-4o</code>, <code>qwen2.5-coder:14b</code>) LangChain configuration LANGCHAIN_LLM_MODEL_API_KEY API key / credentials for the chosen LangChain provider API key string LangChain configuration LANGCHAIN_LLM_TEMPERATURE Sampling temperature for LangChain requests 0..1 LangChain configuration LANGCHAIN_LLM_MAX_TOKENS Maximum tokens to generate for LangChain responses Positive integer LangChain configuration LANGCHAIN_LLM_MAX_RETRIES Number of retries for failed LangChain requests Positive integer LangChain configuration LANGCHAIN_LLM_BASE_URL Base URL for LangChain HTTP-based providers (e.g., Ollama) <code>http://localhost:11434</code> URL string LangChain / Ollama examples"},{"location":"all-env-variables/#openai-direct-variables","title":"OpenAI (direct) variables","text":"Variable Name Description Default Possible Values Usage Location OPENAI_API_KEY OpenAI API key for AI operations <code>undefined</code> Valid OpenAI API keys <code>src/common/aiProvider/index.ts</code> OPENAI_MODEL OpenAI model to use for prompts <code>gpt-4o-mini</code> OpenAI model names (e.g., <code>gpt-4o-mini</code>, <code>gpt-4o</code>, <code>gpt-4o-mini-3b</code>) OpenAI-specific configuration"},{"location":"all-env-variables/#email-notifications","title":"Email Notifications","text":"Variable Name Description Default Value Possible Values Usage Location MS_TEAMS_WEBHOOK_URL Microsoft Teams webhook URL for notifications (deprecated) <code>undefined</code> Valid MS Teams webhook URLs (e.g., <code>'https://outlook.office.com/webhook/XXXXXXXXXXXX...'</code>) <code>src/common/notifProvider/utils.ts</code> NOTIF_EMAIL_ADDRESS Email address for notifications <code>undefined</code> Valid email addresses (e.g., <code>'notifications@mycompany.com'</code>, <code>'alerts@example.org'</code>) <code>src/common/notifProvider/emailProvider.ts</code>, <code>src/common/notifProvider/utils.ts</code> NOTIF_EMAIL_ADDRESS_{BRANCH} Branch-specific email address for notifications <code>undefined</code> Valid email addresses (e.g., <code>'prod-alerts@mycompany.com'</code> for main branch) <code>src/common/notifProvider/emailProvider.ts</code>"},{"location":"all-env-variables/#browser-automation","title":"Browser Automation","text":"Variable Name Description Default Value Possible Values Usage Location CHROMIUM_PATH Path to Chromium executable for Puppeteer <code>undefined</code> Valid file system paths (e.g., <code>'/usr/bin/chromium'</code>, <code>'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'</code>) Found in deployment documentation PUPPETEER_EXECUTABLE_PATH Path to Chrome/Chromium executable for Puppeteer Auto-detected Valid file system paths (e.g., <code>'/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'</code>) <code>src/common/utils/orgConfigUtils.ts</code>"},{"location":"all-env-variables/#generic-ticketing","title":"Generic Ticketing","text":"Variable Name Description Default Value Possible Values Usage Location GENERIC_TICKETING_PROVIDER_REGEX Regular expression for generic ticketing provider ticket references <code>undefined</code> Valid regular expressions (e.g., <code>'TICKET-\\\\d+'</code>, <code>'[A-Z]{2,5}-\\\\d{1,6}'</code>, <code>'#\\\\d+'</code>) <code>src/common/ticketProvider/genericProvider.ts</code> GENERIC_TICKETING_PROVIDER_URL_BUILDER URL template for generic ticketing provider <code>undefined</code> Valid URL templates with placeholders (e.g., <code>'https://tickets.mycompany.com/{ticketId}'</code>, <code>'https://helpdesk.example.com/ticket/{ticketId}'</code>) <code>src/common/ticketProvider/genericProvider.ts</code>"},{"location":"all-env-variables/#generic-cicd","title":"Generic CI/CD","text":"Variable Name Description Default Value Possible Values Usage Location CI Indicates if running in a Continuous Integration environment <code>undefined</code> <code>'true'</code>, <code>'false'</code> <code>src/common/utils/index.ts</code> CI_COMMIT_REF_NAME Current git branch name in CI environment Current git branch Valid git branch names (e.g., <code>'main'</code>, <code>'develop'</code>, <code>'feature/new-feature'</code>, <code>'hotfix/urgent-fix'</code>) <code>src/common/utils/index.ts</code>, <code>src/common/utils/filesUtils.ts</code>, <code>src/common/gitProvider/gitlab.ts</code>, <code>src/common/gitProvider/azureDevops.ts</code>"},{"location":"all-env-variables/#summary","title":"Summary","text":"<p>This documentation covers 182 environment variables used throughout sfdx-hardis:</p> <ul> <li>Custom sfdx-hardis Variables: 26 variables controlling native behavior</li> <li>Tool-Specific Variables: 156 variables for external integrations</li> </ul> <p>The variables are organized by functionality to help developers and administrators understand their purpose and configure them appropriately for their environments.</p>"},{"location":"articles-videos/","title":"Articles & Videos","text":""},{"location":"articles-videos/#web-articles","title":"Web Articles","text":"<p>Here are some articles about sfdx-hardis</p> <ul> <li>English</li> </ul> <p> </p> <ul> <li>French<ul> <li>Versions d'API Salesforce d\u00e9commissionn\u00e9es: Que faire ?</li> <li>Exporter en masse les fichiers d\u2019une org Salesforce</li> <li>Suspendre l\u2019acc\u00e8s aux utilisateurs lors d\u2019une mise en production Salesforce</li> </ul> </li> </ul>"},{"location":"articles-videos/#recorded-conferences","title":"Recorded Conferences","text":""},{"location":"articles-videos/#dreamforce-sessions","title":"Dreamforce Sessions","text":"<ul> <li>Dreamforce 2024 - Save the Day by Monitoring Your Org with Open-Source Tools (with Olga Shirikova)</li> </ul> <ul> <li>Dreamforce 2023 - Easy Salesforce CI/CD with open-source and clicks only thanks to sfdx-hardis! (with Jean-Pierre Rizzi)</li> </ul>"},{"location":"articles-videos/#community-events","title":"Community Events","text":"<ul> <li>Wir Sind Ohana 2024 - Automate the Monitoring of your Salesforce orgs with open-source tools only! (with Yosra Saidani)</li> </ul>"},{"location":"articles-videos/#podcasts","title":"Podcasts","text":"<ul> <li>Apex Hours 2025 - Org monitoring with Grafana + AI generated doc</li> </ul> <ul> <li>Salesforce Way Podcast #102 - Sfdx-hardis with Nicolas Vuillamy</li> </ul> <ul> <li>Salesforce Developers Podcast Episode 182: SFDX-Hardis with Nicolas Vuillamy</li> </ul>"},{"location":"articles-videos/#sfdx-hardis-usage","title":"sfdx-hardis Usage","text":""},{"location":"articles-videos/#features-overview","title":"Features Overview","text":"<ul> <li>sfdx-hardis 2025 new features overview</li> </ul> <ul> <li>SFDX-HARDIS \u2013 A demo with Nicolas Vuillamy from Cloudity</li> </ul>"},{"location":"articles-videos/#installation-setup","title":"Installation &amp; Setup","text":"<ul> <li>Complete installation tutorial for sfdx-hardis - \ud83d\udcd6 Documentation</li> </ul>"},{"location":"articles-videos/#cicd-workflows","title":"CI/CD Workflows","text":"<ul> <li>Complete CI/CD workflow for Salesforce projects - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>How to start a new User Story in sandbox - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>How to commit updates and create merge requests - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>How to resolve git merge conflicts in Visual Studio Code - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>How to install packages in your org - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>Configure CI server authentication to Salesforce orgs - \ud83d\udcd6 Documentation</li> </ul>"},{"location":"articles-videos/#monitoring","title":"Monitoring","text":"<ul> <li>How to configure monitoring for your Salesforce org - \ud83d\udcd6 Documentation</li> </ul>"},{"location":"articles-videos/#integrations","title":"Integrations","text":"<ul> <li>Configure Slack integration for deployment notifications - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>How to create a Personal Access Token in GitLab - \ud83d\udcd6 Documentation</li> </ul>"},{"location":"articles-videos/#documentation","title":"Documentation","text":"<ul> <li>How to generate AI-enhanced Salesforce project documentation - \ud83d\udcd6 Documentation</li> </ul> <ul> <li>Host your documentation on Cloudflare free tier - \ud83d\udcd6 Documentation</li> </ul>"},{"location":"cloudity-consulting-partner/","title":"Work with Cloudity","text":""},{"location":"cloudity-consulting-partner/#your-expert-salesforce-partner","title":"Your Expert Salesforce Partner","text":"<p>At Cloudity, we love sharing our technical expertise, such as sfdx-hardis as Open-Source, but that's just a small part of everything we do !</p> <p>We provide end-to-end digitalization services for companies, combining technical skills and business expertise to deliver solutions that set the bar high for quality. With the backing of our talented people, we\u2019re aiming to grow our influence and spread our culture based on trust, ambition and empowerment.</p> <p>By end-2025, our goal is to grow our workforce to more than 500 employees, to sustain profitability and to make Cloudity a go-to market player for top companies and for our partners, Salesforce and Meta.</p> <p>With experts from Hardis Group, Carrenet and Cloudity having joined forces, we now have more than 350 employees in four countries, serving customers across 30 countries (Europe + US).</p> <p>Want to know more ? Contact us on our WebSite !</p>"},{"location":"commands/","title":"All commands","text":""},{"location":"commands/#commands","title":"Commands","text":""},{"location":"commands/#hardisauth","title":"hardis:auth","text":"Command Title hardis:auth:login"},{"location":"commands/#hardiscache","title":"hardis:cache","text":"Command Title hardis:cache:clear"},{"location":"commands/#hardisconfig","title":"hardis:config","text":"Command Title hardis:config:get"},{"location":"commands/#hardisdeploy","title":"hardis:deploy","text":"Command Title hardis:deploy:quick hardis:deploy:start hardis:deploy:validate"},{"location":"commands/#hardisdoc","title":"hardis:doc","text":"Command Title hardis:doc:extract:permsetgroups hardis:doc:fieldusage hardis:doc:flow2markdown hardis:doc:mkdocs-to-cf hardis:doc:mkdocs-to-salesforce hardis:doc:override-prompts hardis:doc:packagexml2markdown hardis:doc:plugin:generate hardis:doc:project2markdown"},{"location":"commands/#hardisgit","title":"hardis:git","text":"Command Title hardis:git:pull-requests:extract"},{"location":"commands/#hardislint","title":"hardis:lint","text":"Command Title hardis:lint:access hardis:lint:metadatastatus hardis:lint:missingattributes hardis:lint:unusedmetadatas"},{"location":"commands/#hardismdapi","title":"hardis:mdapi","text":"Command Title hardis:mdapi:deploy"},{"location":"commands/#hardismisc","title":"hardis:misc","text":"Command Title hardis:misc:custom-label-translations hardis:misc:purge-references hardis:misc:servicenow-report hardis:misc:toml2csv"},{"location":"commands/#hardisorg","title":"hardis:org","text":"Command Title hardis:org:community:update hardis:org:configure:data hardis:org:configure:files hardis:org:configure:monitoring hardis:org:connect hardis:org:create hardis:org:data:delete hardis:org:data:export hardis:org:data:import hardis:org:diagnose:audittrail hardis:org:diagnose:instanceupgrade hardis:org:diagnose:legacyapi hardis:org:diagnose:licenses hardis:org:diagnose:releaseupdates hardis:org:diagnose:storage-stats hardis:org:diagnose:unsecure-connected-apps hardis:org:diagnose:unused-apex-classes hardis:org:diagnose:unused-connected-apps hardis:org:diagnose:unusedlicenses hardis:org:diagnose:unusedusers hardis:org:files:export hardis:org:files:import hardis:org:fix:listviewmine hardis:org:generate:packagexmlfull hardis:org:monitor:all hardis:org:monitor:backup hardis:org:monitor:limits hardis:org:multi-org-query hardis:org:purge:apexlog hardis:org:purge:flow hardis:org:refresh:after-refresh hardis:org:refresh:before-refresh hardis:org:retrieve:packageconfig hardis:org:retrieve:sources:analytics hardis:org:retrieve:sources:dx hardis:org:retrieve:sources:dx2 hardis:org:retrieve:sources:metadata hardis:org:retrieve:sources:retrofit hardis:org:select hardis:org:test:apex hardis:org:user:activateinvalid hardis:org:user:freeze hardis:org:user:unfreeze"},{"location":"commands/#hardispackage","title":"hardis:package","text":"Command Title hardiscreate hardisinstall hardismergexml hardisversion:create hardisversion:list hardisversion:promote"},{"location":"commands/#hardispackagexml","title":"hardis:packagexml","text":"Command Title hardis:packagexml:append hardis:packagexml:remove"},{"location":"commands/#hardisproject","title":"hardis:project","text":"Command Title hardis:project:audit:apiversion hardis:project:audit:callincallout hardis:project:audit:duplicatefiles hardis:project:audit:remotesites hardis:project:clean:emptyitems hardis:project:clean:filter-xml-content hardis:project:clean:flowpositions hardis:project:clean:hiddenitems hardis:project:clean:listviews hardis:project:clean:manageditems hardis:project:clean:minimizeprofiles hardis:project:clean:orgmissingitems hardis:project:clean:references hardis:project:clean:retrievefolders hardis:project:clean:sensitive-metadatas hardis:project:clean:standarditems hardis:project:clean:systemdebug hardis:project:clean:xml hardis:project:configure:auth hardis:project:convert:profilestopermsets hardis:project:create hardis:project:deploy:notify hardis:project:deploy:quick hardis:project:deploy:simulate hardis:project:deploy:smart hardis:project:deploy:sources:dx hardis:project:deploy:sources:metadata hardis:project:deploy:start hardis:project:deploy:validate hardis:project:fix:profiletabs hardis:project:fix:v53flexipages hardis:project:generate:bypass hardis:project:generate:flow-git-diff hardis:project:generate:gitdelta hardis:project:lint hardis:project:metadata:activate-decomposed hardis:project:metadata:findduplicates"},{"location":"commands/#hardisscratch","title":"hardis:scratch","text":"Command Title hardis:scratch:create hardis:scratch:delete hardis:scratch:pool:create hardis:scratch:pool:localauth hardis:scratch:pool:refresh hardis:scratch:pool:reset hardis:scratch:pool:view hardis:scratch:pull hardis:scratch:push"},{"location":"commands/#hardissource","title":"hardis:source","text":"Command Title hardis:source:deploy hardis:source:push hardis:source:retrieve"},{"location":"commands/#hardiswork","title":"hardis:work","text":"Command Title hardis:work:new hardis:work:refresh hardis:work:resetselection hardis:work:save hardis:work:ws"},{"location":"commands/#helloworld","title":"hello:world","text":"Command Title hello:world"},{"location":"contributing/","title":"Contributing","text":"<p>Everyone is welcome to contribute to sfdx-hardis (even juniors: we'll assist you !)</p>"},{"location":"contributing/#salesforce-cli-plugin-sfdx-hardis","title":"Salesforce CLI Plugin: sfdx-hardis","text":"<ul> <li>Install Node.js (recommended version)</li> <li>Install typescript by running <code>npm install typescript --global</code></li> <li>Install yarn by running <code>npm install yarn --global</code></li> <li>Install Salesforce DX by running <code>npm install @salesforce/cli --global</code> command line</li> <li>Fork https://github.com/hardisgroupcom/sfdx-hardis and clone it (or just clone if you are an internal contributor)</li> <li>At the root of the repository:<ul> <li>Run <code>yarn</code> to install dependencies</li> <li>Run <code>sf plugins link</code> to link the local sfdx-hardis to SFDX CLI</li> <li>Run <code>tsc --watch</code> to transpile typescript into js everytime you update a TS file</li> </ul> </li> <li>Debug commands using <code>NODE_OPTIONS=--inspect-brk sf hardis:somecommand --someparameter somevalue</code> (you can also debug commands using VsCode Sfdx-Hardis setting)</li> </ul>"},{"location":"contributing/#vscode-extension-vscode-sfdx-hardis","title":"VsCode Extension: vscode-sfdx-hardis","text":"<ul> <li>Install Node.js (recommended version)</li> <li>Install typescript by running <code>npm install typescript --global</code></li> <li>Install yarn by running <code>npm install yarn --global</code></li> <li>Install Visual Studio Code Insiders (download here)</li> <li>Fork https://github.com/hardisgroupcom/vscode-sfdx-hardis and clone it (or just clone if you are an internal contributor)</li> <li>At the root of the repository:<ul> <li>Run <code>yarn</code> to install dependencies</li> </ul> </li> <li>To test your code in the VsCode Extension:<ul> <li>Open the <code>vscode-sfdx-hardis</code> folder in VsCode Insiders</li> <li>Press <code>F5</code> to open a new VsCode window with the extension loaded (or menu Run -&gt; Start Debugging)</li> <li>In the new window, open a Salesforce DX project</li> <li>Run commands from the command palette (Ctrl+Shift+P) or use the buttons in the panel or webviews</li> </ul> </li> </ul>"},{"location":"contributors/","title":"Meet the team","text":""},{"location":"contributors/#organization","title":"Organization","text":"<p>sfdx-hardis is primarily led by Nicolas Vuillamy &amp; Cloudity, but has many external contributors that we cant thank enough !</p>"},{"location":"contributors/#pull-requests-authors","title":"Pull Requests Authors","text":""},{"location":"contributors/#special-thanks","title":"Special Thanks","text":"<ul> <li>Roman Hentschke, for building the BitBucket CI/CD integration</li> <li>Leo Jokinen, for building the GitHub CI/CD integration</li> <li>Mariia Pyvovarchuk, for her work about generating automations documentation</li> <li>Matheus Delazeri, for the PDF output of documentation</li> <li>Taha Basri, for his work about generating documentation of LWC</li> <li>Anush Poudel, for integrating sfdx-hardis with multiple LLMs using langchainJs</li> <li>Sebastien Colladon, for providing sfdx-git-delta which is highly used within sfdx-hardis</li> <li>Stepan Stepanov, for implementing the deployment mode delta with dependencies</li> <li>Shamina Mossodeean, for automating SF decomposed metadata</li> <li>Michael Havrilla, for the integration with Vector.dev allowing to provide monitoring logs to external systems like DataDog</li> </ul>"},{"location":"events/","title":"Community Events","text":""},{"location":"events/#coming-soon-devops-dreamin-25-london","title":"Coming soon: DevOps Dreamin '25, London","text":"<p>Why you don't need DevOps vendors tools</p> <p></p>"},{"location":"events/#coming-soon-french-touch-dreamin-25-paris","title":"Coming soon: French Touch Dreamin '25, Paris","text":"<p>Refresh your full sandboxes without needing to reconfigure everything, with Mehdi Abdennasser</p> <p></p>"},{"location":"events/#trailblazer-user-group-25-casablanca","title":"Trailblazer User Group '25, Casablanca","text":"<p>Salesforce Org Documentation with Open-Source and Agentforce, by Taha Basri</p> <p></p>"},{"location":"events/#trailblazer-developer-group-25-berlin-online","title":"Trailblazer Developer Group '25, Berlin (online)","text":"<p>Summer of Docs \u2013 Auto-Document Your Salesforce Org Like a Pro, by Mariia Pyvovarchuk (Aspect) and Roman Hentschke</p> <p></p>"},{"location":"events/#londons-calling-25-london","title":"London's Calling '25, London","text":"<p>Auto-generate your SF project Documentation site with open-source and Agentforce</p> <p></p>"},{"location":"events/#czech-dreamin-25-prague","title":"Czech Dreamin '25, Prague","text":"<p>Auto-generate your SF project Documentation site with open-source and Agentforce, with Mariia Pyvovarchuk</p> <p></p>"},{"location":"events/#trailblazer-admin-group-25-lyon","title":"Trailblazer Admin Group '25, Lyon","text":"<p>Techs for Admins: Afterwork Salesforce Inspector Reloaded &amp; sfdx-hardis, with Thomas Prouvot</p> <p></p>"},{"location":"events/#dreamforce-2024-san-francisco","title":"Dreamforce 2024, San Francisco","text":"<p>Save the Day by Monitoring Your Org with Open-Source Tools, with Olga Shirikova</p> <p></p>"},{"location":"events/#wir-sind-ohana-24-berlin","title":"Wir Sind Ohana '24, Berlin","text":"<p>Automate the Monitoring of your Salesforce orgs with open-source tools only!, with Yosra Saidani</p> <p></p>"},{"location":"events/#polish-dreamin-24-wroclaw-poland","title":"Polish Dreamin '24, Wroclaw, Poland","text":"<p>Easy and complete Salesforce CI/CD with open-source only!, with Wojciech Suwi\u0144ski</p> <p></p>"},{"location":"events/#french-touch-dreamin-23-paris","title":"French Touch Dreamin '23, Paris","text":"<p>Automate the Monitoring of your Salesforce orgs with open-source tools only!, with Maxime Guenego</p> <p></p>"},{"location":"events/#dreamforce-2023-san-francisco","title":"Dreamforce 2023, San Francisco","text":"<p>Easy Salesforce CI/CD with open-source and clicks only thanks to sfdx-hardis!, with Jean-Pierre Rizzi</p> <p></p>"},{"location":"events/#yeur-dreamin-2023-brussels","title":"Yeur Dreamin' 2023, Brussels","text":"<p>An easy and complete Salesforce CI/CD release management with open-source only !, with Ang\u00e9lique Picoreau</p> <p></p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#with-ide","title":"With IDE","text":"<p>You can install Visual Studio Code, then VSCode Extension VsCode SFDX Hardis</p> <p>Once installed, click on  in VsCode left bar, click on Install dependencies and follow the additional installation instructions :)</p> <p></p> <p></p> <p>When you are all green, you are all good \ud83d\ude0a</p> <p>You can also watch the video tutorial below</p> <p></p>"},{"location":"installation/#as-sfdx-plugin","title":"As SFDX Plugin","text":""},{"location":"installation/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Install Node.js (recommended version)</li> <li>Install Salesforce DX by running <code>npm install @salesforce/cli --global</code> command line</li> </ul>"},{"location":"installation/#plugin-installation","title":"Plugin installation","text":"<pre><code>sf plugins install sfdx-hardis\n</code></pre> <p>For advanced use, please also install dependencies</p> <pre><code>sf plugins install @salesforce/plugin-packaging\nsf plugins install sfdx-git-delta\nsf plugins install sfdmu\n</code></pre> <p>If you are using CI/CD scripts, use <code>echo y | sf plugins install ...</code> to bypass prompt.</p>"},{"location":"installation/#docker","title":"Docker","text":"<p>You can use sfdx-hardis docker images to run in CI.</p> <p>All our Docker images are checked for security issues with MegaLinter by OX Security</p> <ul> <li> <p>Linux Alpine based images (works on Gitlab)</p> <ul> <li> <p>Docker Hub</p> <ul> <li>hardisgroupcom/sfdx-hardis:latest (with latest @salesforce/cli version)</li> <li>hardisgroupcom/sfdx-hardis:latest-sfdx-recommended (with recommended @salesforce/cli version, in case the latest version of @salesforce/cli is buggy)</li> </ul> </li> </ul> <ul> <li> <p>GitHub Packages (ghcr.io)</p> <ul> <li>ghcr.io/hardisgroupcom/sfdx-hardis:latest (with latest @salesforce/cli version)</li> <li>ghcr.io/hardisgroupcom/sfdx-hardis:latest-sfdx-recommended (with recommended @salesforce/cli version, in case the latest version of @salesforce/cli is buggy)</li> </ul> </li> </ul> </li> </ul> <p>See Dockerfile</p> <ul> <li> <p>Linux Ubuntu based images (works on GitHub, Azure &amp; Bitbucket)</p> <p>- hardisgroupcom/sfdx-hardis-ubuntu:latest (with latest @salesforce/cli version)   - hardisgroupcom/sfdx-hardis-ubuntu:latest-sfdx-recommended (with recommended @salesforce/cli version, in case the latest version of @salesforce/cli is buggy)</p> <ul> <li> <p>GitHub Packages (ghcr.io)</p> <ul> <li>ghcr.io/hardisgroupcom/sfdx-hardis-ubuntu:latest (with latest @salesforce/cli version)</li> <li>ghcr.io/hardisgroupcom/sfdx-hardis-ubuntu:latest-sfdx-recommended (with recommended @salesforce/cli version, in case the latest version of @salesforce/cli is buggy)</li> </ul> </li> </ul> </li> </ul> <p>See Dockerfile-ubuntu</p>"},{"location":"license/","title":"License","text":"<pre><code>                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate.  Many developers of free software are heartened and encouraged by the resulting cooperation.  However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community.  It requires the operator of a network server to provide the source code of the modified version running there to the users of that server.  Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals.  This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <p>0. Definitions.</p> <p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <p>1. Source Code.</p> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <p>2. Basic Permissions.</p> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <p>3. Protecting Users' Legal Rights From Anti-Circumvention Law.</p> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <p>4. Conveying Verbatim Copies.</p> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <p>5. Conveying Modified Source Versions.</p> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <p>6. Conveying Non-Source Forms.</p> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <p>7. Additional Terms.</p> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <p>8. Termination.</p> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <p>9. Acceptance Not Required for Having Copies.</p> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <p>10. Automatic Licensing of Downstream Recipients.</p> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <p>11. Patents.</p> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <p>12. No Surrender of Others' Freedom.</p> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <p>13. Remote Network Interaction; Use with the GNU General Public License.</p> <p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.  This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p> <p>14. Revised Versions of this License.</p> <p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <p>15. Disclaimer of Warranty.</p> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <p>16. Limitation of Liability.</p> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <p>17. Interpretation of Sections 15 and 16.</p> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source.  For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code.  There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"salesforce-ai-prompts/","title":"Sfdx-hardis prompt templates","text":"<p>Sfdx-hardis uses a set of predefined prompt templates to interact with AI providers for various Salesforce-related tasks. These prompts are designed to cover common use cases such as describing metadata, generating documentation, and solving deployment errors.</p>"},{"location":"salesforce-ai-prompts/#how-prompts-work","title":"How Prompts Work","text":"<p>Each prompt template defines a specific task and includes variables that are dynamically filled in at runtime. The templates are maintained in the codebase and are documented for transparency and customization.</p>"},{"location":"salesforce-ai-prompts/#overriding-prompts","title":"Overriding Prompts","text":"<p>You can override any predefined prompt template by providing a local text file with the same name as the template. This allows you to tailor the AI's behavior to your organization's needs without modifying the core plugin code.</p> <ul> <li>Place your custom prompt text files in the appropriate override directory as described in the documentation.</li> <li>The system will automatically use your custom version instead of the default if it is present.</li> </ul>"},{"location":"salesforce-ai-prompts/#example","title":"Example","text":"<p>Create a file <code>config/prompt-templates/PROMPT_DESCRIBE_APPROVAL_PROCESS.txt</code> with the following content.</p> <pre><code>Describe Salesforce Approval Process \"{{APPROVALPROCESS_NAME}}\".\n\n### Instructions:\n\n1. Some instructions that you'd like to use\n\n2. **Formatting Requirements**:\n    - Use markdown formatting suitable for embedding in a level 2 header (`##`).\n    - Add new lines before starting bullet lists so mkdocs-material renders them correctly, including nested lists.\n    - Add new lines after a header title so mkdocs-material can display the content correctly.\n    - Some other formatting requirements...\n\n### Reference Data:\n\n- The metadata XML for Approval Process \"{{APPROVALPROCESS_NAME}}\" is:\n{{APPROVALPROCESS_XML}}\n</code></pre>"},{"location":"salesforce-ai-prompts/#available-prompt-templates","title":"Available Prompt Templates","text":"<p>Below is the list of available prompt templates. Click on any template to view its documentation and variable details:</p> <ul> <li>Complete Object Attributes</li> <li>Describe Apex</li> <li>Describe Approval Process</li> <li>Describe Assignment Rules</li> <li>Describe AutoResponse Rules</li> <li>Describe Escalation Rules</li> <li>Describe Flow</li> <li>Describe Flow Diff</li> <li>Describe LWC</li> <li>Describe Object</li> <li>Describe Page</li> <li>Describe Permission Set</li> <li>Describe Permission Set Group</li> <li>Describe Profile</li> <li>Solve Deployment Error</li> </ul>"},{"location":"salesforce-ai-setup/","title":"Sfdx-hardis AI assistant setup","text":""},{"location":"salesforce-ai-setup/#setup-ai-for-sfdx-hardis","title":"Setup AI for sfdx-hardis","text":""},{"location":"salesforce-ai-setup/#security-considerations","title":"Security considerations","text":"<p>sfdx-hardis uses prompt via API to collect analysis: only Metadata XML or JSON deployment errors are sent in the prompts.</p> <p>If you follow Flows best practices and do not hardcode credentials / tokens in variables, there is no serious risk to send metadata XML to an external LLM (but be aware that you do !)</p> <p>You can see the prompts content if you set env variable <code>DEBUG_PROMPTS=true</code>.</p> <p>See the list of prompts used by sfdx-hardis , and how to override them.</p> <p>| If you use AI for generated project documentation, it is highly recommended to run it locally the first time to generate and commit AI cache, as it can make hundreds of API calls, so take some time.</p>"},{"location":"salesforce-ai-setup/#main-configuration","title":"Main configuration","text":"<p>You're lost ? Contact Cloudity, we can do it for you :)</p>"},{"location":"salesforce-ai-setup/#common-variables","title":"Common variables","text":"Variable Description Default AI_MAXIMUM_CALL_NUMBER Maximum allowed number of calls to AI Providers during a single sfdx-hardis command <code>10000</code> PROMPTS_LANGUAGE Language to use for prompts results (<code>en</code>,<code>fr</code>, or any ISO Language code) <code>en</code> DEBUG_PROMPTS Set to true if you want prompts requests and responses in logs <code>false</code> MAX_DEPLOYMENT_TIPS_AI_CALLS Maximum number of errors that will be analyzed by AI for a single Pull Request <code>20</code> DISABLE_AI In case you want to disable API calls to API without removing your configuration, set to true <code>false</code> IGNORE_AI_CACHE Some processes like Flow description use AI cache files to save calls to prompts API, disable by setting to true <code>false</code> AI_MAX_TIMEOUT_MINUTES If you are running sfdx-hardis from a CI/CD job, AI will stopped to be called after 30 minutes, to not mess with the timeouts of other jobs. You can increase this value to however minutes you want :) <code>30</code>"},{"location":"salesforce-ai-setup/#with-agentforce","title":"With Agentforce","text":"<ul> <li>Agentforce must be activated on the default org used when you call the sfdx-hardis command</li> </ul> <p>You can do that with Salesforce Freemium feature Salesforce Foundations, that offers 200000 Einstein Prompts</p> <p></p> <ul> <li>A prompt template SfdxHardisGenericPrompt (type <code>Flex</code>) must exist in the default org, with input variable PromptText (type <code>FreeText</code>)</li> <li>The connected used must be assigned to permission set Prompt Template User</li> </ul> Variable Description Default USE_AGENTFORCE Set to true to activate the use of Agentforce prompts false GENERIC_AGENTFORCE_PROMPT_TEMPLATE Set this variable to override default prompt template <code>SfdxHardisGenericPrompt</code> GENERIC_AGENTFORCE_PROMPT_URL Set this variable to override default prompt url <code>/services/data/v{{API_VERSION}}/einstein/prompt-templates/{{GENERIC_AGENTFORCE_PROMPT_TEMPLATE}}/generations</code> SFDX_AUTH_URL_TECHNICAL_ORG If you want to use another org to call Agentforce (like a Developer Org just to test the feature), you can define this variable (get Auth Url using <code>sf org display --verbose --json</code>) <p></p> <p></p>"},{"location":"salesforce-ai-setup/#with-langchain","title":"With LangChain","text":"<p>LangChainJs provides a unified interface to work with multiple LLM providers. This way to use AI provides better extensibility and future-proofing to extend support for more providers.</p> <p>Currently supported LangchainJS providers:</p> <ul> <li>Ollama</li> <li>OpenAI</li> <li>Anthropic</li> <li>Google GenAI</li> </ul> Variable Description Default USE_LANGCHAIN_LLM Set to true to use LangChain integration <code>false</code> LANGCHAIN_LLM_PROVIDER The LLM provider to use (currently supports <code>ollama</code>, <code>openai</code>, <code>anthropic</code> and <code>google-genai</code>) LANGCHAIN_LLM_MODEL The model to use with the selected provider (e.g. <code>gpt-4o</code>, <code>qwen2.5-coder:14b</code>) LANGCHAIN_LLM_MODEL_API_KEY API key for the selected provider (required for OpenAI, Anthropic and Gemini) LANGCHAIN_LLM_TEMPERATURE Controls randomness (0-1) LANGCHAIN_LLM_MAX_TOKENS Maximum number of tokens to generate LANGCHAIN_LLM_MAX_RETRIES Number of retries for failed requests LANGCHAIN_LLM_BASE_URL Base URL for the API (mainly for Ollama) Ollama: <code>http://localhost:11434</code>"},{"location":"salesforce-ai-setup/#example-configurations","title":"Example configurations","text":"<p>For Ollama:</p> <ul> <li>Visit Ollama's official website and download the appropriate version for your operating system</li> <li>Follow the installation instructions for your platform</li> <li>After installation, pull your preferred model e.g. <code>ollama pull qwen2.5-coder:14b</code> and start the Ollama service with <code>ollama serve</code></li> </ul> <pre><code>USE_LANGCHAIN_LLM=true\nLANGCHAIN_LLM_PROVIDER=ollama\nLANGCHAIN_LLM_MODEL=qwen2.5-coder:14b\nLANGCHAIN_LLM_TEMPERATURE=1\nLANGCHAIN_LLM_BASE_URL=http://localhost:11434\n</code></pre> <p>For OpenAI:</p> <pre><code>USE_LANGCHAIN_LLM=true\nLANGCHAIN_LLM_PROVIDER=openai\nLANGCHAIN_LLM_MODEL=gpt-4o-mini\nLANGCHAIN_LLM_MODEL_API_KEY=your-api-key\nLANGCHAIN_LLM_TEMPERATURE=0.7\nLANGCHAIN_LLM_MAX_TOKENS=2000\n</code></pre> <p>For Anthropic:</p> <pre><code>USE_LANGCHAIN_LLM=true\nLANGCHAIN_LLM_PROVIDER=anthropic\nLANGCHAIN_LLM_MODEL=claude-3.5-sonnet\nLANGCHAIN_LLM_MODEL_API_KEY=your-api-key\nLANGCHAIN_LLM_TEMPERATURE=0.7\nLANGCHAIN_LLM_MAX_TOKENS=2000\n</code></pre> <p>For Google Gen AI:</p> <pre><code>USE_LANGCHAIN_LLM=true\nLANGCHAIN_LLM_PROVIDER=google-genai\nLANGCHAIN_LLM_MODEL=gemini-1.5-pro\nLANGCHAIN_LLM_MODEL_API_KEY=your-api-key\n</code></pre>"},{"location":"salesforce-ai-setup/#with-openai-directly","title":"With OpenAI Directly","text":"<p>You need to define env variable OPENAI_API_KEY and make it available to your CI/CD workflow.</p> <p>To get an OpenAi API key , register on OpenAi Platform.</p> Variable Description Default OPENAI_API_KEY Your openai account API key OPENAI_MODEL OpenAi model used to perform prompts (see models list) <code>gpt-4o-mini</code>"},{"location":"salesforce-ai-setup/#templates","title":"Templates","text":"<p>You can override default prompts by defining the following environment variables.</p> Prompt Template Description Variables PROMPT_SOLVE_DEPLOYMENT_ERROR Ask AI about how to solve a deployment error ERROR PROMPT_DESCRIBE_FLOW Describe a flow from its XML FLOW_XML PROMPT_DESCRIBE_FLOW_DIFF Describe the differences between 2 flow versions by comparing their XML FLOW_XML_NEW, FLOW_XML_PREVIOUS PROMPT_DESCRIBE_OBJECT Describe Object using sfdx-hardis generated info based on project metadatas OBJECT_NAME, OBJECT_XML, ALL_OBJECTS_LIST, ALL_OBJECT_LINKS PROMPT_COMPLETE_OBJECT_ATTRIBUTES_MD Complete fields and validation rules descriptions in input markdown tables generated by sfdx-hardis OBJECT_NAME, MARKDOWN PROMPT_DESCRIBE_APEX Describe an Apex class from its code CLASS_NAME, APEX_CODE"},{"location":"salesforce-ci-cd-clone-repository/","title":"Clone git repository of a Salesforce project","text":"<ul> <li>Pre-requisites</li> <li>Clone the repository<ul> <li>From the Git server UI</li> <li>From Visual Studio Code</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-clone-repository/#pre-requisites","title":"Pre-requisites","text":"<p>You need to access to a Git repository and the url of the repository to clone.</p> <p>The release manager of the project can provide it.</p> <p>It looks like the following: <code>https://github.com/trailheadapps/dreamhouse-lwc.git</code></p>"},{"location":"salesforce-ci-cd-clone-repository/#clone-the-repository","title":"Clone the repository","text":"<p>If you don't have a folder for your git repositories, create a C:\\git folder and use it as destination for your git clones !</p>"},{"location":"salesforce-ci-cd-clone-repository/#from-the-git-server-ui","title":"From the Git server UI","text":"<p>Git providers UIs sometimes have a button Clone -&gt; Open In VsCode</p> <p>If you can use it, use it :)</p>"},{"location":"salesforce-ci-cd-clone-repository/#gitlab","title":"Gitlab","text":"<p>If later you are prompted for username and password, you might need to create a Personal Access Token (video tuto here) and use it as password.</p> <p>If later, it prompts several times the same password in VsCode, run the following command line</p> <p><code>git config --global credential.helper store</code></p>"},{"location":"salesforce-ci-cd-clone-repository/#azure","title":"Azure","text":""},{"location":"salesforce-ci-cd-clone-repository/#from-visual-studio-code","title":"From Visual Studio Code","text":"<ul> <li>In Visual Studio Code, hit CTRL+Shirt+P then look for command Git clone then click to select it.</li> </ul> <ul> <li>Paste the url of your git repository then hit ENTER<ul> <li>If you are asked for a directory and you don't have one yet, create an empty directory at the root of your hard drive, and select it (examples: <code>C:/git</code> or <code>D:/git</code> )</li> </ul> </li> </ul> <ul> <li>Click on the <code>Open</code> notification in VsCode</li> </ul> <ul> <li>You are now ready to create a new User Story !</li> </ul>"},{"location":"salesforce-ci-cd-config-cleaning/","title":"Configure a Salesforce CI/CD Cleaning using sfdx-hardis","text":"<ul> <li>Why cleaning sources ?</li> <li>Dashboards</li> <li>Destructive Changes</li> <li>List Views Mine</li> <li>Minimize Profiles</li> <li>System.debug</li> <li>Named metadatas<ul> <li>Case Entitlement</li> <li>DataDotCom</li> <li>Local Field</li> <li>Product Request</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-config-cleaning/#why-cleaning-sources","title":"Why cleaning sources ?","text":"<p>Salesforce CI/CD Pipelines does not natively work without many manual operations to update the XML... so the deployments passes !</p> <p>sfdx-hardis provides a set of commands to automate those boring XML updates that can be called every time a user prepares a merge request using command sf hardis:work:save</p> <p>Here is the list of available automated cleanings, that can also be called manually using command </p> <p>Example of cleaning config in a .sfdx-hardis.yml config file:</p> <pre><code>autoCleanTypes:\n  - destructivechanges\n  - datadotcom\n  - minimizeProfiles\n  - listViewsMine\n</code></pre>"},{"location":"salesforce-ci-cd-config-cleaning/#dashboards","title":"Dashboards","text":"<p>Property: dashboards</p> <p>Removes hardcoded user ids from Dashboards</p>"},{"location":"salesforce-ci-cd-config-cleaning/#destructive-changes","title":"Destructive Changes","text":"<p>Property: destructivechanges</p> <p>Any file corresponding to an element existing in manifest/destructiveChanges.xml is deleted.</p>"},{"location":"salesforce-ci-cd-config-cleaning/#list-views-mine","title":"List Views Mine","text":"<p>Property: listViewsMine</p> <p>List views with scope Mine can not be deployed.</p> <p>As a workaround, scope is set back to Everything in XML, but the list view reference is kept in a property listViewsToSetToMine in .sfdx-hardis.yml, and after deployment, manual clicks are simulated to set back their scope to Mine !</p>"},{"location":"salesforce-ci-cd-config-cleaning/#minimize-profiles","title":"Minimize Profiles","text":"<p>Property: minimizeProfiles</p> <p>It is a bad practice to define on Profiles elements that can be defined on Permission Sets.</p> <p>Salesforce will deprecate such capability in Spring 26.</p> <p>Don't wait for that, and use minimizeProfiles cleaning to automatically remove from Profiles any permission that exists on a Permission Set !</p> <p>The following XML tags are removed automatically:</p> <ul> <li>classAccesses</li> <li>customMetadataTypeAccesses</li> <li>externalDataSourceAccesses</li> <li>fieldPermissions</li> <li>objectPermissions</li> <li>pageAccesses</li> <li>userPermissions (except on Admin Profile)</li> </ul> <p>You can override this list by defining a property minimizeProfilesNodesToRemove in your .sfdx-hardis.yml config file.</p> <p>__</p>"},{"location":"salesforce-ci-cd-config-cleaning/#systemdebug","title":"System.debug","text":"<p>Property: systemDebug</p> <p>System.debug are useless, as explained in this article</p> <p>Comments automatically all System.debug in the code to enhance performances.</p>"},{"location":"salesforce-ci-cd-config-cleaning/#named-metadatas","title":"Named metadatas","text":"<p>Cleaning can remove files related to named elements.</p>"},{"location":"salesforce-ci-cd-config-cleaning/#case-entitlement","title":"Case Entitlement","text":"<p>Property: caseentitlement</p> <p>Removes all Case Entitlement related fields, like Case.EntitlementId and Case.MilestoneStatus</p>"},{"location":"salesforce-ci-cd-config-cleaning/#datadotcom","title":"DataDotCom","text":"<p>Property: datadotcom</p> <p>Removes all Case Data.com related fields, like Account.DandbCompanyId and Account.Jigsaw</p>"},{"location":"salesforce-ci-cd-config-cleaning/#local-field","title":"Local Field","text":"<p>Property: localfields</p> <p>Removes all Local fields, like Account.NameLocal and Lead.CompanyLocal</p>"},{"location":"salesforce-ci-cd-config-cleaning/#product-request","title":"Product Request","text":"<p>Property: productrequest</p> <p>Removes all Local fields, like ProductRequest.ShipToAddress and ProductRequest.ShipmentType</p>"},{"location":"salesforce-ci-cd-config-delta-deployment/","title":"Configure delta deployments on a Salesforce CI/CD Project","text":"<ul> <li>Delta deployments<ul> <li>Full mode</li> <li>Delta mode</li> <li>Delta with dependencies (beta)</li> </ul> </li> <li>Configuration<ul> <li>Base</li> <li>With Dependencies (beta)</li> <li>Miscellaneous</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-config-delta-deployment/#delta-deployments","title":"Delta deployments","text":""},{"location":"salesforce-ci-cd-config-delta-deployment/#full-mode","title":"Full mode","text":"<p>By default, all deployments job (check deploy &amp; process deploy) deploy the full content of the <code>package.xml</code> minus what is matching <code>package-no-overwrite.xml</code> (formerly <code>packageDeployOnce.xml</code>)</p> <p></p> <p>This is the safest way to deploy at each level</p> <ul> <li>major to major</li> <li>minor to major</li> </ul>"},{"location":"salesforce-ci-cd-config-delta-deployment/#delta-mode","title":"Delta mode","text":"<p>In order to improve performances on project with large metadata base, you can activate delta deployments for Pull Request/Merge Requests from a minor branch (examples: <code>feature/xxx</code>, <code>debug/xxx</code>) to a major branch (ex: <code>integration</code>, <code>uat</code>, <code>preprod</code>, <code>production</code>: sfdx-hardis will deploy only updated metadatas in the Pull Request / Merge Request.</p> <p></p> <p></p> <p>Merge Requests / Pull Request between major branches (ex: uat to preprod) remains in full deployment mode, to avoid issues with configuration which would have been done directly in the orgs (whereas it shouldn't be, except for Reports, Dashboards and a few metadata types)</p> <p>Examples:</p> <ul> <li>features/config/my-work to integration will be DELTA DEPLOYMENT</li> <li>integration to uat will be FULL DEPLOYMENT</li> <li>hotfixes/fix-stuff to preprod will be DELTA DEPLOYMENT</li> <li>preprod to production will be FULL DEPLOYMENT</li> </ul> <p>\ud83d\udca1 If you want to force the use of full deployment for a PR/MR on a delta project, add \"NO_DELTA\" in your latest commit title or text, or in your Pull Request description.</p>"},{"location":"salesforce-ci-cd-config-delta-deployment/#delta-with-dependencies-beta","title":"Delta with Dependencies (beta)","text":"<p>Sometimes, using pure delta deployment is not enough: for example, if you delete a picklist value, simple delta deployment will pass, but later full deployment will fail because some references to the deleted value are remaining, like in Record Types, translations...</p> <p>Stepan Stepanov implemented a smart way to handle that with sfdx-hardis: Delta with dependencies.</p> <p>Delta with dependencies mode leverages a set of processors defined in <code>src/common/utils/deltaUtils.ts</code> to automatically detect and include related metadata dependencies in your deployment package. These processors analyze changes and ensure that dependent components are also deployed, reducing the risk of deployment failures due to missing references.</p> <p>List of supported dependency processors:</p> <ul> <li>CustomFieldPicklistProcessor: Handles picklist value changes, ensuring related Record Types and translations are included.</li> <li>CustomFieldProcessor: Detects changes to custom fields and adds dependent layouts, validation rules, and field sets.</li> <li>ObjectProcessor: Manages object-level changes, including triggers, sharing rules, and compact layouts.</li> <li>ProfilePermissionProcessor: Ensures profile and permission set updates are deployed when related metadata changes.</li> <li>RecordTypeProcessor: Includes Record Type dependencies when fields or picklist values are modified.</li> <li>TranslationProcessor: Adds translation files for changed metadata, such as labels and picklist values.</li> <li>WorkflowProcessor: Handles workflow rule dependencies, including field updates and alerts.</li> <li>LayoutProcessor: Ensures layout changes are deployed when fields or objects are updated.</li> </ul> <p>\u2139\ufe0f The list of processors may evolve as new metadata types and dependency scenarios are supported. For the latest details, refer to the deltaUtils.ts source.</p> <p>How it works:</p> <p>When delta with dependencies is enabled, sfdx-hardis analyzes the changed files and applies each processor to detect and add required dependencies. This ensures that your deployment package contains all necessary components for a successful deployment, even in complex scenarios involving cross-referenced metadata.</p> <p>What it adds automatically (high level):</p> <ul> <li>Translations for every language present in your project's main package. If an object, label, picklist or other translatable item is changed or deleted, the related translation files are included so languages stay in sync.</li> <li>Related Record Types when a field or picklist value on an object is changed. This prevents later full deployments from failing because an object still references a removed or modified picklist value.</li> <li>All records for a Custom Metadata type when one of its records is modified. This keeps metadata records consistent during delta deployments.</li> <li>Object-level translations when objects, layouts or similar items are modified so users in all languages get the corresponding changes.</li> <li>A small set of related settings (for example lead-convert related settings) when the changed item can have cross-references in those settings.</li> <li>For deletions, the feature also tries to include related translations and entries so removing something in a delta won't break a future full deployment.</li> </ul> <p>Practical examples:</p> <ul> <li>You remove a picklist value in a feature branch. The delta will include any Record Types and translations that reference that value so later full deployments don't fail.</li> <li>You update a custom object or its layout. The delta will add object translations for all declared languages.</li> <li>You change a custom metadata record. The delta will include the other records of the same custom metadata type to keep the set consistent.</li> </ul> <p>How to validate in CI:</p> <ul> <li>When enabled, the pipeline publishes or logs the delta package that will be deployed \u2014 inspect the generated package.xml in the job output or artifacts to see the added entries.</li> <li>Start by enabling the feature on a non-critical branch (or for a single PR) to confirm the produced delta includes the expected additional metadata before rolling it out broadly.</li> </ul> <p>Note: This feature is provided in beta \u2014 it helps reduce deployment surprises but it's recommended to test it on your repository and workflows before relying on it for critical releases.</p>"},{"location":"salesforce-ci-cd-config-delta-deployment/#configuration","title":"Configuration","text":""},{"location":"salesforce-ci-cd-config-delta-deployment/#base","title":"Base","text":"<p>To activate delta deployments,you can:</p> <ul> <li>define <code>useDeltaDeployment: true</code> in config/.sfdx-hardis.yml</li> <li>define env variable <code>USE_DELTA_DEPLOYMENT=true</code></li> </ul> <p>In case of temporary deactivation of delta deployments, you can set variable <code>DISABLE_DELTA_DEPLOYMENT=true</code>, it has priority on other configurations.</p> <p>\ud83d\udca1If your sfdx-hardis installation is from before 4.10.0, you might need to update your CI/CD workflows</p> <p>Check updated versions in sfdx-hardis sources</p> <p>It is recommended to use opinionated default sfdx-hardis delta deployment configuration, but if you want to tweak the config you can use the following variables:</p>"},{"location":"salesforce-ci-cd-config-delta-deployment/#with-dependencies-beta","title":"With dependencies (beta)","text":"<p>Delta mode must be activated and applicable to allow delta with dependencies to be activated.</p> <p>You can either:</p> <ul> <li>Define <code>useDeltaDeploymentWithDependencies: true</code> in config/.sfdx-hardis.yml</li> <li>Define env var <code>USE_DELTA_DEPLOYMENT_WITH_DEPENDENCIES=true</code></li> </ul>"},{"location":"salesforce-ci-cd-config-delta-deployment/#miscellaneous","title":"Miscellaneous","text":"<p>Standard sfdx-hardis pipeline does not recommend to use these modes, but if you really know what you're doing, like the artists of BeyondTheCloud.dev, you can use them :)</p> <ul> <li>USE_DELTA_DEPLOYMENT_AFTER_MERGE<ul> <li>By default, after a merge sfdx-hardis will try to use QuickDeploy. If not available, it will perform a full deployment. If you want to use a delta deployment anyway, define <code>USE_DELTA_DEPLOYMENT_AFTER_MERGE=true</code></li> </ul> </li> </ul> <ul> <li>ALWAYS_ENABLE_DELTA_DEPLOYMENT<ul> <li>By default, delta deployment is allowed only from minor to major branches. You can force it for PR/MRs between major branches by defining variable <code>ALWAYS_ENABLE_DELTA_DEPLOYMENT=true</code></li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-config-home/","title":"Configure a Salesforce CI/CD Project using sfdx-hardis","text":"<ul> <li>New User Story Options(#new-user-story-options)</li> <li>package.xml<ul> <li>Overwrite Management</li> <li>Delta deployments</li> </ul> </li> <li>destructiveChanges.xml</li> <li>Automated sources cleaning</li> <li>Source retrieve issues</li> <li>All configuration properties</li> </ul>"},{"location":"salesforce-ci-cd-config-home/#new-user-story-options","title":"New User Story options","text":"<p>Look at all the Overwrite properties of new User Story command to define the appropriate values of your project.</p>"},{"location":"salesforce-ci-cd-config-home/#packagexml","title":"package.xml","text":"<p>A Salesforce CI/CD repository contains a file manifest/package.xml.</p> <ul> <li>It contains all metadatas that will be deployed by the CI server.</li> </ul> <ul> <li>It is automatically updated when preparing merge requests by command hardis:work:save</li> </ul>"},{"location":"salesforce-ci-cd-config-home/#overwrite-management","title":"Overwrite Management","text":"<ul> <li> <p>It is highly recommended to configure overwrite management, to avoid to overwrite metadatas that are maintained directly in production on purpose</p> <ul> <li>Dashboards</li> <li>Reports</li> <li>Remote site settings</li> <li>Named credentials</li> <li>...</li> </ul> <p>See Overwrite management configuration documentation</p> </li> </ul>"},{"location":"salesforce-ci-cd-config-home/#delta-deployments","title":"Delta deployments","text":"<ul> <li>You can also use delta deployments if your project is big and you have performances issues.</li> </ul>"},{"location":"salesforce-ci-cd-config-home/#source-retrieve-issues","title":"Source retrieve issues","text":"<p>Handle cases when force:source:pull does not retrieve every updated source.</p> <p>See how to force the retrieve of named sources</p>"},{"location":"salesforce-ci-cd-config-home/#destructivechangesxml","title":"destructiveChanges.xml","text":"<p>A Salesforce CI/CD repository contains a file manifest/destructiveChanges.xml.</p> <ul> <li>It contains all metadatas that will be deleted by the CI server.</li> </ul> <ul> <li>It is automatically updated when preparing merge requests by command hardis:work:save</li> </ul>"},{"location":"salesforce-ci-cd-config-home/#automated-sources-cleaning","title":"Automated sources cleaning","text":"<p>You can configure automated cleaning of sources before creating merge requests, using command hardis:work:save</p> <p>Those cleanings can be:</p> <ul> <li>Deletion of sources existing in <code>destructiveChanges.xml</code></li> <li>Remove from Profiles elements that are existing in Permission Sets, like Objects access configuration.</li> <li> <p>etc ...</p> <p>See Overwrite cleaning configuration documentation</p> </li> </ul>"},{"location":"salesforce-ci-cd-config-home/#all-configuration-properties","title":"All configuration properties","text":"<p>.sfdx-hardis.yml allows to make your project highly configuration. Have a look at its list of configuration properties !</p>"},{"location":"salesforce-ci-cd-config-overwrite/","title":"Configure overwrite management on a Salesforce CI/CD Project","text":"<ul> <li>package-no-overwrite.xml<ul> <li>Definition</li> <li>Example</li> </ul> </li> <li>packageDeployOnChange.xml</li> </ul>"},{"location":"salesforce-ci-cd-config-overwrite/#package-no-overwritexml","title":"package-no-overwrite.xml","text":""},{"location":"salesforce-ci-cd-config-overwrite/#definition","title":"Definition","text":"<p>For different reasons, many metadatas are maintained manually, using production Salesforce org Setup</p> <p>To avoid to overwrite manual updates in setup, you must define at least a manifest/package-no-overwrite.xml file. (formerly named <code>packageDeployOnce.xml)</code></p> <p>The rule is simple and must be learnt by heart:</p> <p>Every item which is existing in package.xml AND matching package-no-overwrite.xml AND existing in the target deployment org will NOT be deployed.</p> <p>This means that an item matching package-no-overwrite.xml will be deployed the first time, but never overwritten, so has to be manually maintained in org using Setup.</p> <ul> <li>This file must be located at <code>manifest/package-no-overwrite.xml</code> (formerly packageDeployOnce.xml)</li> <li>It has the same format than a package.xml, but must be written manually</li> <li>It can contain named items, or wildcards <code>*</code></li> <li>Theoretically, any metadata can be added in package-no-overwrite.xml, but here are the most commonly present:<ul> <li>Connected apps</li> <li>Dashboards</li> <li>Named Credentials</li> <li>Profiles</li> <li>Remote Site Settings</li> <li>Reports</li> <li>SAML SSO Configuration</li> <li>Wave items (CRM Analytics)</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-config-overwrite/#example","title":"Example","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n&lt;Package xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n  &lt;!-- Approval processes can contain reference to usernames --&gt;\n  &lt;types&gt;\n      &lt;members&gt;*&lt;/members&gt;\n      &lt;name&gt;ApprovalProcess&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;!-- Connected apps contain org unique auth info so must never be overwritten --&gt;\n  &lt;types&gt;\n      &lt;members&gt;*&lt;/members&gt;\n      &lt;name&gt;ConnectedApp&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;types&gt;\n    &lt;!-- Apps that contain hardcoded dashboard its must be managed directly in production --&gt;\n    &lt;members&gt;DeclareWork&lt;/members&gt;\n    &lt;members&gt;Facturation&lt;/members&gt;\n    &lt;members&gt;SomeApp2&lt;/members&gt;\n    &lt;name&gt;CustomApplication&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;types&gt;\n    &lt;!-- Once a dashboard is published, it is always managed directly in production --&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;Dashboard&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;types&gt;\n    &lt;!-- flexipages that contain Dashboard ids --&gt;\n    &lt;members&gt;Accueil_administrateur&lt;/members&gt; \n    &lt;members&gt;Accueil_administratif&lt;/members&gt;\n    &lt;members&gt;Accueil_Commerciaux&lt;/members&gt;\n    &lt;members&gt;Accueil_Direction&lt;/members&gt;\n    &lt;members&gt;Accueil_Recrutement&lt;/members&gt;\n    &lt;name&gt;Flexipage&lt;/name&gt;\n  &lt;/types&gt; \n  &lt;types&gt;\n    &lt;!-- Name Credentials can contain auth info that are different between dev, uat, preprod and prod: let's not overwrite them ! --&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;NamedCredential&lt;/name&gt;\n  &lt;/types&gt;  \n  &lt;types&gt;\n    &lt;!-- Use permission sets --&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;Profile&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;types&gt;\n    &lt;!-- Remote site settings can be different between dev, uat, preprod and prod: let's not overwrite them ! --&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;RemoteSiteSetting&lt;/name&gt;\n  &lt;/types&gt;  \n  &lt;types&gt;\n    &lt;!-- Reports are maintained directly in production --&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;Report&lt;/name&gt;\n  &lt;/types&gt;\n    &lt;!-- SSO Config must be performed directly in org setup --&gt;  \n  &lt;types&gt;\n      &lt;members&gt;*&lt;/members&gt;\n      &lt;name&gt;SamlSsoConfig&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;!-- Wave items in case you want to manage them directly in production --&gt;\n  &lt;types&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;WaveApplication&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;types&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;WaveDashboard&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;types&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;WaveDataflow&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;types&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;WaveDataset&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;types&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;WaveRecipe&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;types&gt;\n    &lt;members&gt;*&lt;/members&gt;\n    &lt;name&gt;WaveXmd&lt;/name&gt;\n  &lt;/types&gt;\n  &lt;version&gt;53.0&lt;/version&gt;\n&lt;/Package&gt;\n</code></pre>"},{"location":"salesforce-ci-cd-config-overwrite/#packagedeployonchangexml","title":"packageDeployOnChange.xml","text":"<p>packageDeployOnChange.xml is slightly different from package-no-overwrite.xml: it will deploy only if the target metadata XML is different from the source metadata XML that we want to deploy</p> <ul> <li>This file must be located at <code>manifest/packageDeployOnChange.xml</code></li> <li>It can contain named items, or wildcards <code>*</code></li> <li>Is has much lower performances than package-no-overwrite.xml, so must be used wisely</li> <li>Theoretically, any metadata can be added in packageDeployOnChange.xml, but here are the most commonly present:<ul> <li>Sharing Rules</li> <li>Sharing Owner Rules</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-conga/","title":"Configure overwrite management on a Salesforce CI/CD Project","text":""},{"location":"salesforce-ci-cd-conga/#conga-deployments","title":"Conga deployments","text":"<p>It's easy to handle the deployment of Conga Composer configuration with sfdx-hardis.</p> <p>Please see how in the following article.</p> <p></p>"},{"location":"salesforce-ci-cd-create-new-task/","title":"Create new User Story on a Salesforce DX project","text":"<ul> <li>Use cases</li> <li>Sandbox or scratch org ?</li> <li>Source-tracked sandbox mode<ul> <li>Pre-requisites (sandbox)</li> <li>Start new User Story on sandbox<ul> <li>Select sandbox</li> <li>Update your sandbox ?</li> <li>Work !</li> </ul> </li> </ul> </li> <li>Scratch Org mode<ul> <li>Pre-requisites (scratch org)</li> <li>Start new User Story on scratch org</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-create-new-task/#use-cases","title":"Use cases","text":"<p>You use this command when you want to :</p> <ul> <li>Create a dedicated new branch</li> <li>Create a scratch org linked to the branch OR assign a dedicated sandbox to the newly created branch</li> </ul>"},{"location":"salesforce-ci-cd-create-new-task/#sandbox-or-scratch-org","title":"Sandbox or scratch org ?","text":"<p>With SFDX, usually each member of the teams has its own sandbox or scratch org to work on it.</p> <p>The release manager of the project can tell you if you work with scratch orgs or source-tracked sandboxes, and which sandbox to use if you are in sandbox mode.</p>"},{"location":"salesforce-ci-cd-create-new-task/#source-tracked-sandbox-mode","title":"Source-tracked sandbox mode","text":""},{"location":"salesforce-ci-cd-create-new-task/#pre-requisites-sandbox","title":"Pre-requisites (sandbox)","text":"<p>You need credentials to login on the source-tracked sandbox you'll work with. It can be:</p> <ul> <li>An existing source-tracked sandbox<ul> <li>Existing source-tracked sandboxes must be refreshed from time to time to avoid too many conflicts, discuss with your Release Manager !</li> <li>Release managers: When you create or refresh a sandbox, you can easily activate invalid users with a few clicks</li> </ul> </li> <li>A new source-tracked sandbox that you can create from production org</li> </ul> <p>It is recommended to create sandbox from the org that is related to the target git branch.</p> <p></p>"},{"location":"salesforce-ci-cd-create-new-task/#start-new-user-story-on-sandbox","title":"Start new User Story on sandbox","text":""},{"location":"salesforce-ci-cd-create-new-task/#select-sandbox","title":"Select sandbox","text":"<ul> <li>Open VsCode SFDX Hardis extension by clicking on  in VsCode left bar (loading can task several seconds)</li> </ul> <ul> <li>Click on </li> </ul> <ul> <li>Answer the questions then select Sandbox when prompted<ul> <li>If the sandbox is not proposed in the list, select the option to authenticate to your desired sandbox</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-create-new-task/#update-your-sandbox","title":"Update your sandbox ?","text":"<ul> <li>When prompted if you want to update your sandbox:<ul> <li>Select <code>yes</code> only if you have NO pending work in your sandbox that you'll want to publish later<ul> <li>If the update script fails, you can manually deploy single metadatas using <code>Right click -&gt; Deploy to org</code> (see screenshot below)</li> </ul> </li> <li>Otherwise, select <code>no</code></li> </ul> </li> </ul> <p>Example of manual deploy of a metadata that you think could have been updated in parent branch, after an Update sandbox failure</p> <p></p>"},{"location":"salesforce-ci-cd-create-new-task/#work","title":"Work","text":"<ul> <li> <p>At the end of the script execution:</p> <ul> <li>If you want to reset the sandbox tracking (meaning you don't care about the previous updates in your sandbox), you can click on command </li> <li>Click on  and you can start working in it :)</li> </ul> </li> </ul> <p> Under the hood</p> <p>See details in hardis:work:new command documentation</p>"},{"location":"salesforce-ci-cd-create-new-task/#scratch-org-mode","title":"Scratch Org mode","text":""},{"location":"salesforce-ci-cd-create-new-task/#pre-requisites-scratch-org","title":"Pre-requisites (scratch org)","text":"<p>You need the credentials to login on the Dev Hub Org (usually the production environment)</p>"},{"location":"salesforce-ci-cd-create-new-task/#start-new-user-story-on-scratch-org","title":"Start new User Story on scratch org","text":"<ul> <li>Open VsCode SFDX Hardis extension by clicking on  in VsCode left bar</li> </ul> <ul> <li>Click on </li> </ul> <ul> <li>Answer the questions then select Scratch Org when prompted<ul> <li>If the sandbox is not proposed in the list, select the option to authenticate to your desired sandbox</li> </ul> </li> </ul> <ul> <li>Wait for the sandbox creation script to be completed, and you can start working in it :)<ul> <li>If you see errors while creating the sandbox, request support from the project release manager</li> </ul> </li> </ul> <p> Under the hood</p> <p>See details in hardis:work:new command documentation</p>"},{"location":"salesforce-ci-cd-deploy-major-branches/","title":"Deploy to major branches and orgs with Salesforce CI/CD","text":"<ul> <li>Minor and Major branches</li> <li>Merge requests between major branches</li> </ul>"},{"location":"salesforce-ci-cd-deploy-major-branches/#minor-and-major-branches","title":"Minor and Major branches","text":"<p>Minor branches are individual git branches that do not have a CI/CD associated org</p> <p>Major branches are git branches that have a CI/CD associated org, and each new commit in a major branch automatically triggers a deployment to the associated org.</p> <p></p> <p>Examples:</p> <ul> <li>Minor to major: When a merge request from <code>dev_nico</code> to <code>\u00ecntegration</code> (A) is validated and merged, a new state (commit) is detected in branch <code>integration</code>, so CI server automatically deploys to <code>associated Salesforce org Integration</code> (B)</li> </ul> <ul> <li>Major to Major: When a merge request from <code>integration</code> to <code>uat</code> (C) is validated and merged, a new state (commit) is detected in branch <code>uat</code>, so CI server automatically deploys to <code>associated Salesforce org UAT</code> (D)</li> </ul> <ul> <li>Major to Major: When a merge request from <code>uat</code> to <code>preprod</code> (E) is validated and merged, a new state (commit) is detected in branch <code>preprod</code>, so CI server automatically deploys to <code>associated Salesforce org Preprod</code> (F)</li> </ul> <ul> <li>Major to Major: When a merge request from <code>preprod</code> to <code>main</code> (G) is validated and merged, a new state (commit) is detected in branch <code>main</code>, so CI server automatically deploys to <code>associated Salesforce org Production</code> (H)</li> </ul>"},{"location":"salesforce-ci-cd-deploy-major-branches/#merge-requests-between-major-branches","title":"Merge requests between major branches","text":"<ul> <li>Create a New Merge request<ul> <li>Set a meaningful title, like MAJOR: recette to uat or MAJOR: uat to production</li> <li>Make sure that Delete source after merge and Squash commits are UNCHECKED</li> </ul> </li> <li>Click on Submit merge request</li> </ul> <ul> <li>Controlling jobs are automatically launched, and should pass as merge requests from minor branches has been in success<ul> <li>If jobs fail, it means that you need to perform manual actions in target org, like activating features or manually rename elements if metadatas API Names has been renamed (which is a bad practice but happens)</li> </ul> </li> </ul> <ul> <li>Once all jobs are in success, merge the merge request<ul> <li>It will automatically trigger the deployment to the associated Salesforce org</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-handle-merge-request-results/","title":"Handle Merge Request Results","text":"<ul> <li>Conflicts detection</li> <li>Deployment simulation</li> <li>Quality gate</li> </ul>"},{"location":"salesforce-ci-cd-handle-merge-request-results/#conflicts-detection","title":"Conflicts detection","text":"<p>If you are about to overwrite the work of one of your colleagues, a conflicts message will appear.</p> <p></p> <ul> <li>If you are trained with git, you can merge conflicts by merging the target branch in your own branch</li> <li>Otherwise, call your release manager !</li> </ul>"},{"location":"salesforce-ci-cd-handle-merge-request-results/#deployment-simulation","title":"Deployment simulation","text":"<p>When you create a Merge Request to a major git branch, for example <code>integration</code>, sfdx-hardis will simulate a deployment to the related major Salesforce org, for example Integration org.</p> <p>It will also run Apex test classes and Apex code coverage.</p> <p>The result will be displayed in a message on the Merge Request UI</p> <p></p> <p>If you see errors, please check Solve deployment errors documentation</p>"},{"location":"salesforce-ci-cd-handle-merge-request-results/#quality-gate","title":"Quality gate","text":"<p>Any Merge Request will trigger a technical quality gate, that will check for:</p> <ul> <li>Apex best practices using PMD</li> <li>LWC best practices using eslint</li> <li>Security issues</li> <li>Excessive copy-pastes</li> </ul> <p>The result will be displayed in a message on the Merge Request UI</p> <p></p> <p>If you see errors, please check Solve MegaLinter errors documentation</p>"},{"location":"salesforce-ci-cd-home/","title":"Salesforce CI/CD with sfdx-hardis","text":"<ul> <li>Why choose sfdx-hardis?<ul> <li>Because it is user-friendly</li> <li>Because it is compliant with your tools</li> <li>Because it is powerful</li> <li>Because there are no license costs</li> <li>Because it is widely adopted</li> </ul> </li> <li>Get started<ul> <li>Setup sfdx-hardis</li> <li>As a Contributor</li> <li>As a Release Manager</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-home/#why-choose-sfdx-hardis","title":"Why choose sfdx-hardis?","text":"<p>There are many ways to do DevOps with Salesforce. Each has its advantages and limitations, as shown in the following comparison table.</p> <p></p>"},{"location":"salesforce-ci-cd-home/#because-it-is-user-friendly","title":"Because it is user-friendly","text":"<p>Every persona can be autonomous in their tasks: Admins, Developers, Release Managers and even Project Leaders.</p> Role How they use sfdx-hardis Admins Build their pull requests using the VS Code extension with clicks. No command line required. Developers Same as Admins, + understand what's happening under the hood with the Salesforce CLI, thanks to the Advanced mode in the UI. Release Managers Configure the CI/CD process using the Visual DevOps Pipeline BuilderFollow the Pull Requests and Deployments thanks to the DevOps Pipeline View Project Managers Follow application lifecycle management using sfdx-hardis native integrations with ticketing systems like Jira and Azure Boards."},{"location":"salesforce-ci-cd-home/#because-it-is-compliant-with-your-tools","title":"Because it is compliant with your tools","text":"<p>There are no \"sfdx-hardis\" servers anywhere. Everything runs in your own secured environment: Your Git platform, and your local VS Code or Salesforce Code Builder.</p> <p>sfdx-hardis has native integrations with your preferred applications: </p> <ul> <li>Git &amp; CI/CD: GitHub, GitLab, Bitbucket, Azure DevOps, Gitea, Jenkins</li> <li>Messaging: Slack, Microsoft Teams, Email</li> <li>Ticketing: Jira, Azure Boards, or any other tool via webhooks</li> <li>AI: Agentforce OpenAI, Anthropic, Gemini</li> <li>Observability: Grafana, Vector.dev (DataDog, Splunk, etc...)</li> </ul>"},{"location":"salesforce-ci-cd-home/#because-it-is-powerful","title":"Because it is powerful","text":"<p>Advanced features make sfdx-hardis a credible alternative to expensive Salesforce DevOps tools.</p> Feature Description Delta Deployments Improve performance by deploying only updated metadata. Overwrite Management Define which metadata will never be overwritten if it already exists in the target org. Smart Apex Test Runs Skip tests when a pull request to a sandbox cannot break Apex tests to improve performance. Automated source cleaning Clean profiles of attributes that exist in permission sets, tidy flow element positions, and more. Integration with messaging platforms Receive detailed deployment notifications on Slack, Microsoft Teams, and email. Integration with ticketing systems Integrate with Jira, Azure Boards, or any other tool. AI integration Help resolve deployment issues (Agentforce or direct calls to OpenAI, Anthropic, Gemini). <p>We provide ready-to-use CI/CD pipeline workflows for the following Git platforms, with the results of deployment simulation jobs posted as comments on pull requests:</p> Platform CI/CD template GitLab GitLab CI configuration Azure DevOps Azure Pipelines checks, Azure Pipelines deployment GitHub &amp; Gitea GitHub Actions / Gitea workflow checks, GitHub Actions / Gitea workflow deployment Bitbucket Bitbucket Pipelines Jenkins Jenkinsfile <p>Pipelines can easily be adapted to other platforms like TeamCity.</p> <p>Here is an advanced example of a Salesforce CI/CD pipeline that you can define using sfdx-hardis. You can define much simpler branch/org models to manage only RUN operations.</p> <p></p> <p>See advanced Q&amp;A in the following article.</p> <p></p>"},{"location":"salesforce-ci-cd-home/#because-there-are-no-license-costs","title":"Because there are no license costs","text":"<p>As everything is open source, there are no license costs!</p> <p>In comparison, many Salesforce DevOps vendors charge more than 250\u20ac/user/month per contributor.</p> <p>You can handle everything yourself, or ask Cloudity Professional Services for support.</p>"},{"location":"salesforce-ci-cd-home/#because-it-is-widely-adopted","title":"Because it is widely adopted","text":"<p>sfdx-hardis CI/CD is used in production by major companies around the world.</p> <p></p> <p>It is also featured in many conferences, blogs, and webinars.</p> <p>See the presentation of sfdx-hardis at Dreamforce!</p> <p>See slides of the Dreamforce '23 session</p> <p>See a detailed article on SalesforceDevOps.net</p> <p></p>"},{"location":"salesforce-ci-cd-home/#get-started","title":"Get started","text":""},{"location":"salesforce-ci-cd-home/#setup-sfdx-hardis","title":"Setup sfdx-hardis","text":"<p>If you are comfortable with Git, Salesforce CLI, and DevOps, you can set up and use sfdx-hardis CI/CD on your own.</p> <p>You can also contact us at Cloudity. Our Professional Services team will be glad to assist you with:</p> <ul> <li>Technical setup and initialization from your existing Salesforce production org</li> <li>Release management strategy definition</li> <li>Training for your contributors and release managers</li> <li>Change management to accelerate DevOps adoption in your organization</li> </ul> <p>Please read the Setup Guide to learn how to initialize and maintain a Salesforce CI/CD project.</p>"},{"location":"salesforce-ci-cd-home/#as-a-contributor","title":"As a Contributor","text":"<p>Please read the Contributor Guide to learn how to work on CI/CD projects as a Business Analyst, Salesforce Administrator, or Salesforce Developer.</p>"},{"location":"salesforce-ci-cd-home/#as-a-release-manager","title":"As a Release Manager","text":"<p>Please read the Release Manager Guide to learn how to be a release manager on a Salesforce CI/CD project.</p>"},{"location":"salesforce-ci-cd-hotfixes/","title":"Handle deployment of hotfix in production with Salesforce CI/CD","text":""},{"location":"salesforce-ci-cd-hotfixes/#build-run","title":"BUILD &amp; RUN","text":"<p>Except for projects in maintenance that contain RUN only, a project is separated into 2 sections:</p> <ul> <li>the RUN stream: Fast cycle, to often deploy minor changes and fixes</li> </ul> <ul> <li>the BUILD stream: Project cycle, to build more advanced features and enhancements, that require User Acceptance Testing</li> </ul> <p></p>"},{"location":"salesforce-ci-cd-hotfixes/#the-build","title":"THE BUILD","text":"<p>This is the layer where you prepare the next major or minor version.</p> <p>Such new features will go through integration level, then uat level where they will be qualified and validated by business users.</p> <p>When the User Acceptance Test will be validated in uat org, then uat can be merged into preprod, and just after minimal tests (mostly technical), preprod will soon be merged into production.</p> <p>Is it important that major features or enhancements are not tested directly at preprod level, because while the next version is being validated in preprod, it is not possible for the RUN to deploy anything into production.</p>"},{"location":"salesforce-ci-cd-hotfixes/#the-run","title":"THE RUN","text":"<p>Daily maintenance of the production Salesforce org must be very reactive, the RUN level will allow you to often deploy patch versions.</p> <p>As we usually can not wait for the next minor or major version to be deployed in production, projects need a way to quickly deploy hot fixes into production. That layer is called the RUN, and is exclusively about preprod and main branches.</p> <p>To summarize, you will publish at RUN level, but also at BUILD level, so when the BUILD will be merged in the RUN, there will be no overwrite triggering regressions.</p> <p>The hotfix process is the following:</p> <p>Note: in this example, we merge directly in preprod, but in more advanced organizations we can define a branch/org uat_run as intermediate layer before merging to preprod</p> <ul> <li> <p>IMPLEMENT HOTFIX (1)</p> <ul> <li>Create new User Story with preprod as target when prompted, named <code>my-very-hot-hotfix</code> for example</li> </ul> <ul> <li>Work on a dev sandbox that has been cloned from production</li> </ul> </li> </ul> <ul> <li> <p>DEPLOYMENT IN RUN LAYER (2)</p> <ul> <li>Create Pull Request from <code>my-very-hot-hotfix</code> to <code>preprod</code> &amp; merge it after controls (do not select \u201cdelete after merge\u201d )</li> </ul> <ul> <li>Create Pull request from <code>preprod</code> to <code>main</code></li> </ul> <ul> <li>Merge <code>preprod</code> to <code>main</code> after control checks are green.</li> </ul> </li> </ul> <ul> <li> <p>RETROFIT IN BUILD LAYER (3)</p> <ul> <li>Create a sub-branch to <code>integration</code>, named <code>retrofit-from-run</code> for example</li> </ul> <ul> <li>Using Git IDE, manually merge <code>main</code> (or <code>preprod</code>) branch into <code>retrofit-from-run</code></li> </ul> <ul> <li>If there are git conflicts, solve them before committing</li> </ul> <ul> <li>Create Pull Request from <code>retrofit-from-run</code> to <code>integration</code></li> </ul> <ul> <li>Merge the Pull Request into <code>integration</code>: your retrofit from the RUN to the BUILD is over :)<ul> <li>You might refresh dev sandboxes if your retrofits have lots of impacts</li> </ul> </li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-manual-repo-clean/","title":"Auxiliary Repository Clean Up","text":"<ul> <li>Removing Salesforce generated files from source control</li> </ul>"},{"location":"salesforce-ci-cd-manual-repo-clean/#remove-unneeded-generated-files","title":"Remove unneeded generated files","text":"<p>Sometimes you may commit files to source control that don't (or no longer) need tracking. This may include:</p> <ul> <li>Files generated by Salesforce on feature activation (such as Community/Experience Cloud classes) accidentally added on first initialisation/through a feature branch.</li> <li>Overrides of Salesforce classes/files that no longer need patching</li> </ul> <p>Removing them through the standard process will mean they are included in destructiveChanges.xml and will be removed from your target on deployment, which in this case is not what you want to do. There is just one extra step to resolve this problem.</p> <ul> <li>Follow the standard process (hardis:work:new) to delete your files, remove them from package.xml and call hardis:work:save to create your PR</li> <li>Manually update destructiveChanges.xml to remove the references to the files you do not want to delete from your target org</li> <li>Commit this change</li> <li>Manually push to your branch (do not use hardis:work:save)</li> <li>Merge your PR</li> </ul>"},{"location":"salesforce-ci-cd-merge-request-gitlab/","title":"Create a merge request using Gitlab","text":""},{"location":"salesforce-ci-cd-merge-request-gitlab/#create-a-merge-request-using-gitlab","title":"Create a merge request using Gitlab","text":"<ul> <li>Go in your online repository in your web browser (example: <code>https://gitlab.com/trailheadapps/dreamhouse-lwc</code>)</li> </ul> <ul> <li>Go to menu Merge Requests</li> </ul> <ul> <li>Create a New Merge request</li> </ul> <ul> <li>Click on Submit merge request</li> </ul> <ul> <li>Controlling jobs are automatically launched, you can now ask your release manager to validate the merge request<ul> <li>If you are a developer, (or even a business consultant depending on the project organization), you may have the responsibility to make sure than controlling jobs are valid (check-deploy job and code-quality job in success) and eventually fix the errors (See Handle merge requests errors)</li> </ul> </li> </ul> <ul> <li>If you need to add additional updates to an existing merge requests, you just this to follow again this guide from the beginning, except the part \"Create a merge request\". Any new commit pushed on a branch where there is already a merge request will trigger again the control jobs.</li> </ul>"},{"location":"salesforce-ci-cd-packaging/","title":"Generate packages and package versions","text":""},{"location":"salesforce-ci-cd-packaging/#pre-requisites","title":"Pre-requisites","text":"<p>sfdx-hardis menus allow to create new packages and new package versions, but to do that you need some pre-requisites.</p> <ul> <li> <p>In order to generate packages, you first need a Dev Hub to link them.</p> <ul> <li>Instructions in Salesforce Documentation</li> </ul> </li> </ul> <ul> <li> <p>If you need to use a namespace with a package (managed or unmanaged), you also need to link you Dev Hub and a dev org where you will create the namespace.</p> <ul> <li>Instructions in Salesforce Documentation</li> </ul> </li> </ul> <ul> <li>Then you need a sfdx-hardis flavored sfdx project, that you can create with <code>sf hardis:project:create</code>, using scratch orgs only option.</li> </ul> <ul> <li>Last, create your package folder (ex: <code>my-package</code>) at the root of the repository, following the same structure than <code>force-app</code>: it will contain your package content.</li> </ul>"},{"location":"salesforce-ci-cd-packaging/#new-package","title":"New package","text":"<p>Use sfdx-hardis menu Packaging -&gt; Create a new package and follow instructions (select the folder that you just created, don't use <code>force-app</code>)</p>"},{"location":"salesforce-ci-cd-packaging/#new-package-version","title":"New package version","text":""},{"location":"salesforce-ci-cd-packaging/#git-branch","title":"Git branch","text":"<p>Create a git sub-branch of your packaging branch (for example <code>pkg/release-v0.1.0</code>)</p>"},{"location":"salesforce-ci-cd-packaging/#increment-package-version","title":"Increment package version","text":"<p>Before being able to generate a new package version, you need to increment the package version in <code>sfdx-project.json</code>.</p> <pre><code>{\n  \"packageDirectories\": [\n    {\n      \"path\": \"package-astran\",\n      \"default\": true,\n      \"package\": \"Astran\",\n      \"versionName\": \"ver 0.1\",                         # Change version name here to match the incremented package version\n      \"versionNumber\": \"0.1.0.NEXT\",                    # Increment version here (Respect SEMVER or you will have errors)\n      \"versionDescription\": \"Astran for Salesforce\"\n    },\n    {\n      \"path\": \"scratch\",\n      \"default\": false\n    }\n  ],\n  \"name\": \"astran\",\n  \"namespace\": \"Astran\",\n  \"sfdcLoginUrl\": \"https://my-devhub-org.salesforce.com\",\n  \"sourceApiVersion\": \"57.0\"\n}\n</code></pre>"},{"location":"salesforce-ci-cd-packaging/#run-create-package-version-command","title":"Run create package version command","text":"<p>Run sfdx-hardis command Packaging -&gt; Create new package version</p> <p></p> <p>Select the package you want to create a version, and input an installation if necessary (otherwise let it blank)</p> <p></p> <p></p> <p>After some time, the new package version will be generated, and you will be able to find its ID in your <code>sfdx-project.json</code></p> <pre><code>{\n    ...\n      \"packageAliases\": {\n        \"Astran\": \"0Ho7S0123010wZWSAU\",\n        \"Astran@0.1.0-1\": \"04t7S000000gYxPQAF\",\n        \"Astran@0.1.0-2\": \"04t7S000000gYm1QAE\",\n        \"Astran@0.1.0-3\": \"04t7S000000gYp7WAG\",\n}\n</code></pre> <p>If you have issues, it might be because you incremented the version as a patch whereas the updates with the previous version require at least a minor version.</p> <p>For example, <code>1.1.4.NEXT</code> can fail, and <code>1.2.0.NEXT</code> will pass</p>"},{"location":"salesforce-ci-cd-packaging/#test-the-beta-version","title":"Test the beta version","text":"<p>(optional but recommended)</p> <p>The latest entry is the one you can use to install the beta package version (every created package version is a beta by default)</p> <p>Example of URL to append at the end of your org domain name: <code>/packaging/installPackage.apexp?p0=04t7S000000gYp7QAG</code></p> <p>Install the beta package in a dummy sandbox to check that its content is ok for you</p>"},{"location":"salesforce-ci-cd-packaging/#pull-request-to-packaging-branch","title":"Pull request to packaging branch","text":"<p>Once you decide the package is ok for you, make a Pull Request to the <code>packaging</code> branch (or <code>main</code> branch, depending on your project config)</p>"},{"location":"salesforce-ci-cd-packaging/#promote-the-beta","title":"Promote the beta","text":"<p>Once you merged your PR in packaging branch (after checking the control jobs are green), you can promote the package.</p> <p>WARNING: Promoting a package is a sensitive operation, because it declares it as production-ready, then you can not remove metadatas from it, and you must respect ascending compatibility to generate new package versions !</p> <p>To promote a package version, run the following command</p> <p><code>sf hardis:package:version:promote</code></p> <p>Example: <code>sf hardis:package:version:promote</code></p> <p>Note: When later you will create a new scratch org in a new development branch, if you have issues, just increment again the <code>versionNumber</code> in <code>sfdx-project.json</code></p>"},{"location":"salesforce-ci-cd-packaging/#create-version-git-tag","title":"Create version git tag","text":"<p>Once you promoted a package, create a git tag with the version id on the commit corresponding to your merged Pull Request</p> <p>Example: <code>v1.1.0</code></p> <p>Push the git tag to origin</p>"},{"location":"salesforce-ci-cd-publish-task/","title":"Publish a User Story on a Salesforce CI/CD project","text":"<ul> <li>Commit your updates<ul> <li>Retrieve metadatas</li> <li>Stage and commit</li> </ul> </li> <li>Prepare merge request</li> <li>Create merge request<ul> <li>Using Gitlab</li> <li>Using Github</li> <li>Using Azure</li> </ul> </li> <li>Check merge request results</li> </ul>"},{"location":"salesforce-ci-cd-publish-task/#commit-your-updates","title":"Commit your updates","text":"<p>The following video shows how to perform theses operations</p>"},{"location":"salesforce-ci-cd-publish-task/#retrieve-metadatas","title":"Retrieve metadatas","text":"<p>If you made updates on your org that you have not pulled yet, Use command  to pull your latest updates in local files</p> <p>If you updated config elements that you do not see in your local files, you may discuss with your release manager to automate force retrieve metadatas</p>"},{"location":"salesforce-ci-cd-publish-task/#alternative-use-org-browser","title":"Alternative: Use Org Browser","text":"<p>You can also use Salesforce extension Org Browser to manually browse and retrieve specific metadatas</p> <p></p>"},{"location":"salesforce-ci-cd-publish-task/#alternative-use-contextual-menu","title":"Alternative: Use contextual menu","text":"<p>If Org Browser does not see items that you want to retrieve, like list views, you can right click on any listViews folder and use command SFDX: Retrieve source from org</p> <p></p>"},{"location":"salesforce-ci-cd-publish-task/#alternative-use-menu-select-and-retrieve","title":"Alternative: Use menu \"Select and retrieve\"","text":"<p>If it is not possible to use pull configuration, you may retrieve metadatas using  (but it will retrieve locally many files and it will be harder to select the ones you really need, select carefully the items that you stage and commit)</p>"},{"location":"salesforce-ci-cd-publish-task/#stage-and-commit","title":"Stage and commit","text":"<p>In VsCode Git extension, stage and commit created, updated and deleted files that you want to publish</p> <ul> <li>By selecting the metadata files you can see the differences with the previous versions, to know if you want to publish or not an updated file</li> </ul> <ul> <li>Never use Stage all function</li> </ul> <ul> <li>If you see standard items like standard fields that do not contain customizations, do not commit them</li> </ul> <ul> <li>Important: If you think that your sandbox may not be up to date according to elements published by your colleagues, look closely at the diff on those items, and stage only the updates that you want to publish</li> </ul> <p></p> <p></p> <p></p>"},{"location":"salesforce-ci-cd-publish-task/#prepare-merge-request","title":"Prepare merge request","text":"<ul> <li>Once your commit is completed, run command  to prepare your merge request.</li> </ul> <ul> <li>As you committed your files like explained in the previous section, select option  when prompted.</li> </ul> <ul> <li>Wait for the script to complete, and select Push commit to server when prompted</li> </ul> <p> Under the hood</p> <p>The script performs the following operations:</p> <ul> <li>Update <code>manifest/package.xml</code> automatically according to the committed updates</li> <li>Clean XML of metadatas according to .sfdx-hardis.yml config property <code>autoCleanTypes</code> and <code>autoRemoveUserPermissions</code></li> <li>New git commit with automated updates</li> <li>Git push commit to git server</li> </ul> <p>More details in hardis:work:save command documentation</p>"},{"location":"salesforce-ci-cd-publish-task/#create-merge-request","title":"Create merge request","text":"<p>It is now time to create your merge request to technically publish your updates at the upper level !</p> <p>Depending on the CI platform you use, follow the related guide.</p> <p>If you are publishing to a RUN branch (ex: <code>preprod</code>), AND the project also has a BUILD branch (ex: <code>integration</code>), you need to notify the release manager He/she will have to retrofit your updates once published</p> <p>If you are working with a ticketing system like JIRA, make sure to add the full url of the tickets in the MR/PR description, so it will help for the release management. For example, use <code>https://sfdx-hardis.atlassian.net/browse/CLOUDITY-4</code> , not <code>CLOUDITY-4</code></p>"},{"location":"salesforce-ci-cd-publish-task/#using-gitlab","title":"Using Gitlab","text":"<p>See Create a merge request using Gitlab</p>"},{"location":"salesforce-ci-cd-publish-task/#using-azure","title":"Using Azure","text":"<p>See Create a merge request using Azure</p>"},{"location":"salesforce-ci-cd-publish-task/#using-github","title":"Using GitHub","text":"<p>See Create a merge request using Github</p>"},{"location":"salesforce-ci-cd-publish-task/#check-merge-request-results","title":"Check merge request results","text":"<p>After you create your merge request, check its control jobs results !</p>"},{"location":"salesforce-ci-cd-pull-request-azure/","title":"Create a pull request using Azure","text":""},{"location":"salesforce-ci-cd-pull-request-azure/#create-a-pull-request-using-azure","title":"Create a Pull Request using Azure","text":"<ul> <li>Go in your online repository in your web browser (example: <code>https://dev.azure.com/mycompany/trailheadapps/dreamhouse-lwc</code>)</li> </ul> <ul> <li>Go to menu Repos -&gt; Pull Requests</li> </ul> <ul> <li>Click on  New pull request</li> </ul> <ul> <li>Click on Create</li> </ul> <ul> <li>Controlling jobs are automatically launched, you can now ask your release manager to validate the merge request<ul> <li>If you are a developer, (or even a business consultant depending on the project organization), you may have the responsibility to make sure than controlling jobs are valid (check-deploy job and code-quality job in success) and eventually fix the errors (See Handle merge requests errors)</li> </ul> </li> </ul> <ul> <li>If you need to add additional updates to an existing merge requests, you just this to follow again this guide from the beginning, except the part \"Create a merge request\". Any new commit pushed on a branch where there is already a merge request will trigger again the control jobs.</li> </ul>"},{"location":"salesforce-ci-cd-pull-request-github/","title":"Create a pull request using GitHub","text":""},{"location":"salesforce-ci-cd-pull-request-github/#create-a-pull-request-using-github","title":"Create a Pull Request using GitHub","text":"<ul> <li>Go in your online repository in your web browser (example: <code>https://github.com/mycompany/trailheadapps/dreamhouse-lwc</code>)</li> </ul> <ul> <li>Go to the Pull Requests tab</li> </ul> <ul> <li>Click on New pull request</li> </ul> <ul> <li>Select the base as the target environment/branch and compare as the branch you've made the changes. Click Create Pull Request </li> </ul> <ul> <li>Add a meaningful title and description. Click on Create Pull Request</li> </ul> <ul> <li>Controlling jobs are automatically launched, you can now ask your release manager to validate the merge request<ul> <li>If you are a developer, (or even a business consultant depending on the project organization), you may have the responsibility to make sure than controlling jobs are valid (check-deploy job and code-quality job in success) and eventually fix the errors (See Handle merge requests errors)</li> </ul> </li> </ul> <ul> <li>If you need to add additional updates to an existing merge requests, you just this to follow again this guide from the beginning, except the part \"Create a merge request\". Any new commit pushed on a branch where there is already a merge request will trigger again the control jobs.</li> </ul>"},{"location":"salesforce-ci-cd-release-home/","title":"Salesforce CI/CD Release Manager Guide","text":"<p>In order to respect the best DevOps practices, it's highly recommended for project teams to have members taking the role of Release Manager</p> <p>The release manager(s) responsibilities are:</p> <ul> <li>Train &amp; support all project members about the use Salesforce CI/CD on the project</li> <li>Provide source-tracked sandboxes to users</li> <li>Validate users merge requests</li> <li>Proceed deployments to major branches/org (UAT,Preprod,Production...)</li> <li>Configure CI/CD project</li> <li>Auxiliary repository clean up tasks</li> </ul> <p>You can also see specific use cases documentation</p> <ul> <li>sfdx-hardis for ISV</li> <li>sfdx-hardis for Conga</li> </ul>"},{"location":"salesforce-ci-cd-retrieve/","title":"Fix sfdx pull issues","text":""},{"location":"salesforce-ci-cd-retrieve/#automated-force-retrieve","title":"Automated force retrieve","text":"<p>It happens that when calling sf hardis:scratch:pull, some elements are not retrieved.</p> <p>The most usual cases are updates on:</p> <ul> <li>CustomApplication</li> <li>RecordTypes</li> </ul> <p>See how to configure .sfdx-hardis to force the retrieve of metadatas with autoRetrieveWhenPull property.</p>"},{"location":"salesforce-ci-cd-retrieve/#manual-retrieve","title":"Manual Retrieve","text":"<p>You can also use command  to manually retrieve metadatas, but it will pull a lot of metadatas so you will have to carefully select them for your commit.</p> <p> Under the hood</p> <p>See details in hardis:source:retrieve command documentation</p>"},{"location":"salesforce-ci-cd-setup-activate-org/","title":"Configure Orgs","text":""},{"location":"salesforce-ci-cd-setup-activate-org/#production-org-settings","title":"Production Org Settings","text":""},{"location":"salesforce-ci-cd-setup-activate-org/#dev-hub-and-sandbox-tracking","title":"Dev Hub and Sandbox Tracking","text":"<p>You must declare an org (usually production) as a DevHub and activate sandbox tracking to be able to work with advanced features of Salesforce DX</p> <ul> <li>Login to Dev Hub org</li> </ul> <ul> <li>Go to <code>Setup -&gt; Dev Hub</code></li> </ul> <ul> <li>Activate Dev Hub</li> </ul> <ul> <li>Activate Sandbox tracking<ul> <li>If sandbox were already existing, you need to refresh them if you want their source tracking to be activated</li> <li>To use Create from from an existing sandbox, you need to refresh it before the cloning, else the nex sandbox won't have the tracking activated</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-activate-org/#activate-experience-bundle-metadata","title":"Activate Experience Bundle Metadata","text":"<ul> <li>Go to Setup -&gt; Digital Experiences</li> </ul> <ul> <li>Activate Enable ExperienceBundle Metadata API</li> </ul>"},{"location":"salesforce-ci-cd-setup-activate-org/#major-orgs","title":"Major orgs","text":"<p>When there is a new state of a major branch (after a merge), a deployment to the related major Org will be automatically triggered by the CI server.</p> <p>You need to have a Salesforce sandbox corresponding to each major branch.</p> <p>Example:</p> <ul> <li>Branch <code>preprod</code> - create a sandbox named <code>Preprod</code>, cloned from Production org</li> <li>Branch <code>uat</code> - create a sandbox named <code>UAT</code>, cloned from PreProd org</li> <li>Branch <code>integration</code> - create a sandbox named <code>Integration</code>, cloned from UAT org</li> </ul> <p>If you are converting an existing project to CI/CD and already have existing orgs, just create an org <code>Integration</code>, and you'll refresh later <code>UAT</code> and <code>PreProd</code>, once your setup will be more advanced.</p>"},{"location":"salesforce-ci-cd-setup-auth-azure/","title":"Configure Azure CI/CD variables","text":""},{"location":"salesforce-ci-cd-setup-auth-azure/#define-sfdx-hardis-environment-variables","title":"Define sfdx-hardis environment variables","text":"<ul> <li>Go to Project -&gt; Pipelines</li> <li>Select your pipeline</li> <li>Click on Edit , then on Variables</li> <li>Input variable name and value</li> <li>Don't forget to click on save !</li> </ul> <p>More info: Azure documentation</p>"},{"location":"salesforce-ci-cd-setup-auth-bitbucket/","title":"Configure Bitbucket CI/CD variables","text":""},{"location":"salesforce-ci-cd-setup-auth-bitbucket/#define-sfdx-hardis-environment-variables","title":"Define sfdx-hardis environment variables","text":"<ul> <li>Go to Project -&gt; Repository Settings &gt; Repository Variables (you must have Bitbucket authorizations to access this menu)</li> </ul> <p>More info: BitBucket documentation</p>"},{"location":"salesforce-ci-cd-setup-auth-github/","title":"Configure GitHub CI/CD variables","text":""},{"location":"salesforce-ci-cd-setup-auth-github/#define-sfdx-hardis-environment-variables","title":"Define sfdx-hardis environment variables","text":"<ul> <li>Go to Repository -&gt; Settings &gt; Secret and variables -&gt; Actions (you must have Github authorizations to access this menu)</li> </ul> <ul> <li>Create the new secret with the following info:<ul> <li>name: YOUR_VARIABLE_NAME</li> <li>value: <code>Your variable value</code></li> </ul> </li> </ul> <p>More info: GitHub documentation</p>"},{"location":"salesforce-ci-cd-setup-auth-gitlab/","title":"Configure Gitlab CI/CD variables","text":""},{"location":"salesforce-ci-cd-setup-auth-gitlab/#define-sfdx-hardis-environment-variables","title":"Define sfdx-hardis environment variables","text":"<ul> <li>Go to Project -&gt; Settings &gt; CI/CD -&gt; Variables (you must have Gitlab authorizations to access this menu)</li> </ul> <ul> <li>Create the variable with the following info:<ul> <li>name: YOUR_VARIABLE_NAME</li> <li>value: <code>Your variable value</code></li> <li>Select Mask variable if the value is secured, like credentials or tokens</li> <li>Unselect Protected variable</li> </ul> </li> </ul> <p>More info: Gitlab documentation</p>"},{"location":"salesforce-ci-cd-setup-auth-jenkins/","title":"Configure Jenkins CI/CD credentials","text":""},{"location":"salesforce-ci-cd-setup-auth-jenkins/#define-sfdx-hardis-environment-variables","title":"Define sfdx-hardis environment variables","text":"<ul> <li>Go to Dashboard -&gt; Manage Jenkins</li> <li>Under Security tab click on Credentials -&gt; global credentials</li> <li>Click on Add credential , then choose Secret text</li> <li>Input variable name and value</li> <li>Don't forget to click on create !</li> </ul> <p>More info: Jenkins documentation</p>"},{"location":"salesforce-ci-cd-setup-auth/","title":"Configure CI Server authentication to Salesforce orgs","text":""},{"location":"salesforce-ci-cd-setup-auth/#major-orgs","title":"Major orgs","text":"<p>To automate deployments from major branches to their related org, you need to configure the secure authentication from CI server to a SF connected app.</p> <p>Note: You need openssl installed on your computer (available in <code>Git bash</code>)</p> <ul> <li>Remain in your initialization branch <code>cicd</code>, or a sub branch of your lowest level major branch (usually <code>integration</code>)</li> <li>For each major branch to link to an org, run the sfdx-hardis command Configuration -&gt;  (<code>sf hardis:project:configure:auth</code>)</li> </ul> <p>For example, run the command for <code>integration</code>, <code>uat</code>, <code>preprod</code> and <code>production</code> major branches.</p> <p>If messages ask you to run twice the same command, it's normal, it's for technical reasons :)</p> <p>If you have errors in your apex tests classes, you may not be able to configure the app for Production org. You will need do create the connected app manually by following the instructions in yellow in the error message. You can do it later, after having succeeded to merge the first merge request in lower major branch (usually <code>integration</code>)</p> <p> Under the hood</p> <p>This command will create/update:</p> <ul> <li>.sfdx-hardis.yml configuration file (repo)</li> <li>Self signed certificate (encrypted in repo as .key)</li> <li>Connected App (uploaded to org via metadata api)</li> <li>CI environment variables (manually set in CI/CD server UIs)</li> </ul> <p>At runtime, we use OAuth 2.0 JSON Web Tokens (JWT) bearer flow with the client Id stored in secured CI/CD Variable + the Certificate decrypted on the fly using token stored in secured CI/CD variable.</p> <p>See how to set CI variables on different Git providers:</p> <ul> <li>Gitlab tutorial</li> <li>Azure tutorial</li> <li>GitHub tutorial</li> <li>BitBucket tutorial</li> <li>Jenkins tutorial</li> </ul>"},{"location":"salesforce-ci-cd-setup-auth/#dev-hub","title":"Dev Hub","text":"<p>If you are using scratch orgs, you need to also configure authentication for the Dev Hub (even if you already configured authentication for production org)</p> <p>To do that, run the following command</p> <pre><code>sf hardis:project:configure:auth --devhub\n</code></pre>"},{"location":"salesforce-ci-cd-setup-existing-org/","title":"Initialize sfdx sources from Salesforce org","text":"<p>If this is a new Salesforce project, or if you want to setup CI/CD in incremental mode, you can skip this step and directly go to Create first merge request.</p> <p>Thanks to tracked sandboxes, you can also decide to opt for an half-incremental init, with only some metadata types like Apex, LWC &amp; Permission sets. In that case retrieve manually the metadatas you need, for example with Org Browser.</p> <p>If you want to go for a full init setup, follow the steps below !</p> <ul> <li>Retrieve Metadatas</li> <li>Automated Metadatas Cleaning<ul> <li>Remove Managed items</li> <li>Remove (hidden) files</li> <li>Remove empty items</li> <li>Standard objects without custom</li> </ul> </li> <li>Manual Metadata Cleaning</li> <li>Retrieve installed packages</li> <li>Create first merge request</li> </ul>"},{"location":"salesforce-ci-cd-setup-existing-org/#retrieve-metadatas","title":"Retrieve Metadatas","text":"<ul> <li>Run the following command that will retrieve locally all the metadatas of production org</li> </ul> <p><code>sf hardis:org:retrieve:sources:dx --shape -u YOURSOURCEORGUSERNAME</code></p> <ul> <li>In case you get an error:<ul> <li>Run the generate package xml command : hardis:org:generate:packagexmlfull</li> <li>Clean up the generated package created by removing the unnecessary metadatas</li> <li>Run retrieve metadata command : sf project:retrieve:start</li> </ul> </li> </ul> <p>Example :</p> <ul> <li><code>sf hardis:org:generate:packagexmlfull --targetusername nico@example.com --outputfile ./packagexmlfull.xml</code></li> <li>Remove Document part on packagexmlfull.xml   <pre><code>    &lt;types&gt;\n        &lt;members&gt;Doc1&lt;/members&gt;\n        &lt;members&gt;Doc2&lt;/members&gt;\n        &lt;members&gt;Doc3&lt;/members&gt;\n        &lt;name&gt;Document&lt;/name&gt;\n    &lt;/types&gt;\n</code></pre></li> <li><code>sf project:retrieve:start -x ./packagexmlfull.xml --ignore-conflicts</code></li> </ul>"},{"location":"salesforce-ci-cd-setup-existing-org/#automated-metadatas-cleaning","title":"Automated Metadatas Cleaning","text":"<p>You have way too many metadatas locally, including standard and managed items that are not customize so are not needed in the repository.</p> <p>Proceed to the following steps to automatically remove many of them, then proceed to the final manual cleaning</p>"},{"location":"salesforce-ci-cd-setup-existing-org/#remove-managed-items","title":"Remove Managed items","text":"<p>Run the following command to delete all elements with a namespace.</p> <pre><code>sf hardis:project:clean:manageditems --namespace SOMENAMESPACE\n</code></pre>"},{"location":"salesforce-ci-cd-setup-existing-org/#remove-hidden-files","title":"Remove (hidden) files","text":"<p>Some items have no namespace but are managed anyway, and contain <code>(hidden)</code>, so they must me deleted with the following command.</p> <pre><code>sf hardis:project:clean:hiddenitems\n</code></pre>"},{"location":"salesforce-ci-cd-setup-existing-org/#remove-empty-items","title":"Remove empty items","text":"<p>Some files are empty and do not need to be kept in repository, remove them using the following command.</p> <pre><code>sf hardis:project:clean:emptyitems\n</code></pre>"},{"location":"salesforce-ci-cd-setup-existing-org/#standard-objects-without-custom","title":"Standard objects without custom","text":"<p>The retrieve command pulled all standard objects and fields.</p> <p>Those which has never been customized do not need to remain in repository, delete them using the following command (that can take some time)</p> <pre><code>sf hardis:project:clean:standarditems\n</code></pre>"},{"location":"salesforce-ci-cd-setup-existing-org/#manual-metadata-cleaning","title":"Manual Metadata Cleaning","text":"<p>Automated Metadata cleaning removed a lot of items, but many are remaining that are useless in the repo.</p> <p>Manually delete files (or even folders) that are maintained directly in production org</p> <ul> <li><code>applications</code>: Delete the ones starting with <code>standard__</code></li> <li><code>\u00e0ppMenus</code>: Delete all folder</li> <li><code>cleanDataServices</code>: Delete all folder</li> <li><code>dashboards</code>: Delete all user dashboards</li> <li><code>emailServices</code>: Delete all folder</li> <li><code>flowDefinitions</code> : Delete all folder (Salesforce now uses <code>flow</code> folder)</li> <li><code>installedPackages</code>: Delete all folder</li> <li><code>layouts</code>: Delete all standard layouts that has not been customized</li> <li><code>profiles</code> : Delete all standard profiles</li> <li><code>profilePasswordPolicies</code>: Delete all folder</li> <li><code>profileSessionSettings</code>: Delete all folder,</li> <li><code>reports</code>: Delete all reports that have been created directly in production org</li> </ul>"},{"location":"salesforce-ci-cd-setup-existing-org/#retrieve-installed-packages","title":"Retrieve installed packages","text":"<p>Use DevOps Pipeline -&gt; Installed Packages to retrieve the list of Packages of your project.</p> <p>See Retrieve Packages Documentation</p> <p>CLI Alternative: <code>sf hardis:org:retrieve:packageconfig -u YOUR_PROD_ORG_USER</code></p> <p>This will update file config/.sfdx-hardis.yml</p> <ul> <li>Keep only the packages that you are using in all orgs.</li> <li>Define installDuringDeployments property to <code>true</code> if you need this package installed on all orgs</li> <li>Define installOnScratchOrgs property to <code>true</code> if you are using scratch orgs and need this package installed when you create a new scratch org</li> </ul> <p>Example:</p> <pre><code>installedPackages:\n  - Id: 0A37Z000000AtDYSA0\n    SubscriberPackageId: 033i0000000LVMYAA4\n    SubscriberPackageName: Marketing Cloud\n    SubscriberPackageNamespace: et4ae5\n    SubscriberPackageVersionId: 04t6S000001UjutQAC\n    SubscriberPackageVersionName: Marketing Cloud\n    SubscriberPackageVersionNumber: 238.3.0.2\n    installOnScratchOrgs: true\n    installDuringDeployments: true\n  - Id: 0A35r0000009F9CCAU\n    SubscriberPackageId: 033b0000000Pf2AAAS\n    SubscriberPackageName: Declarative Lookup Rollup Summaries Tool\n    SubscriberPackageNamespace: dlrs\n    SubscriberPackageVersionId: 04t5p000001BmLvAAK\n    SubscriberPackageVersionName: Release\n    SubscriberPackageVersionNumber: 2.15.0.9\n    installOnScratchOrgs: true\n    installDuringDeployments: true\n</code></pre>"},{"location":"salesforce-ci-cd-setup-existing-org/#create-first-merge-request","title":"Create first merge request","text":"<p>Don't forget to run  and to follow other instructions before creating your initial merge request !</p> <p>Time to create the first merge request !</p> <p>You'll probably have many updates to perform in new commits before having all jobs in green :)</p>"},{"location":"salesforce-ci-cd-setup-git/","title":"Configure Git Branches for Salesforce CI/CD","text":"<ul> <li>Create git repository</li> <li>Create major branches<ul> <li>Small project</li> <li>Medium project</li> <li>Complex project</li> </ul> </li> <li>Protect major branches</li> <li>Define merge rules</li> </ul>"},{"location":"salesforce-ci-cd-setup-git/#create-git-repository","title":"Create git repository","text":"<p>Your git repository will be used to store and manage the versioning of your Salesforce DX sources</p> <ul> <li>Create a new repository, for example myclient-sfdx<ul> <li>Select <code>Initialize repository with a README</code></li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-git/#create-major-branches","title":"Create major branches","text":"<p>In <code>Repository -&gt; Branches</code>, create the branch tree according to the complexity of your project</p> <p>Below are examples of branches tree that you can define.</p>"},{"location":"salesforce-ci-cd-setup-git/#small-project","title":"Small project","text":"<ul> <li>main (will be related to Production org)<ul> <li>preprod (will be related to PreProd org)</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-git/#medium-project","title":"Medium project","text":"<ul> <li>main (will be related to Production org)<ul> <li>preprod (will be related to PreProd org)<ul> <li>integration (will be related to Integration org)</li> </ul> </li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-git/#complex-project","title":"Complex project","text":"<ul> <li>main (will be related to Production org)<ul> <li>preprod (will be related to PreProd org)<ul> <li>uat (will be related to UAT org)<ul> <li>integration (will be related to Integration org)</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Example of branching strategy</p> <p></p>"},{"location":"salesforce-ci-cd-setup-git/#protect-major-branches","title":"Protect major branches","text":"<p>To avoid messes, protected branches must be updated only using Merge Requests</p> <ul> <li>Go to menu <code>Settings -&gt; Repository</code></li> <li>Define your developments target branch (usually integration) as Default Branch</li> <li>Protect all branches that will have a corresponding Salesforce org (main, preprod, uat, integration...)</li> </ul> <p>Recommended practice is to set Maintainer in Allowed to merge to all protected branches, except integration</p> <p>Example</p> <p></p>"},{"location":"salesforce-ci-cd-setup-git/#define-merge-rules","title":"Define merge rules","text":"<p>Let's make sure that merge request jobs will be valid before being merged ! (can be deactivated later but at your own risk)</p> <ul> <li>Go in menu <code>Settings -&gt; General</code> , then in section <code>Merge requests</code> (expand)</li> <li>Leave all default values, except checkbox Pipelines must succeed that must be checked</li> </ul> <p></p>"},{"location":"salesforce-ci-cd-setup-home/","title":"Setup a Salesforce CI/CD Project","text":"<ul> <li>Pre-requisites</li> <li>Setup steps</li> </ul>"},{"location":"salesforce-ci-cd-setup-home/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Training with Git and Salesforce DX<ul> <li>If you don't have experience with them, here are links to learning resources<ul> <li>Git Tuto</li> <li>SFDX Trailmix</li> </ul> </li> </ul> </li> <li>Install necessary applications on your computer</li> <li>Access to a Git server (Gitlab, GitHub, Azure...) with CI/CD server minutes</li> <li>Access to a Salesforce production org</li> </ul>"},{"location":"salesforce-ci-cd-setup-home/#setup-steps","title":"Setup steps","text":"<ul> <li>Create git repository and configure branches</li> <li>Configure Orgs</li> <li>Initialize sfdx project</li> <li>Configure authentication</li> <li>Retrieve sources from an existing org (optional)</li> <li>Configure integrations</li> <li>Configure Salesforce DX project (follow all steps !)</li> <li>Make the first merge request !</li> </ul>"},{"location":"salesforce-ci-cd-setup-init-project/","title":"Initialize SFDX Project","text":"<ul> <li>Clone locally the repository that you created in previous step (or reuse an existing sfdx project repo)</li> </ul> <ul> <li>Create a new git branch named cicd under your lower major branch (usually integration)</li> </ul> <ul> <li>Run command Configuration -&gt;  (<code>sf hardis:project:create</code>) and select options to create a new sfdx-hardis project.</li> </ul> <ul> <li>Open file manifest/package.xml and replace the content by the following code</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n&lt;Package xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n    &lt;version&gt;59.0&lt;/version&gt; &lt;!-- use current latest Salesforce api version --&gt;\n&lt;/Package&gt;\n</code></pre> <ul> <li>IF you are using Gitlab CI and sandboxes only (not scratch orgs), open gitlab-ci-config.yml at the root of the repository, and set variable USE_SCRATCH_ORGS to <code>\"false\"</code></li> </ul> <ul> <li>Depending your git provider, keep the related workflow files and delete the others<ul> <li>Gitlab<ul> <li><code>gitlab-ci.yml</code></li> <li><code>gitlab-ci-config.yml</code></li> </ul> </li> <li>Azure<ul> <li><code>azure-pipelines-checks.yml</code></li> <li><code>azure-pipelines-deployment.yml</code></li> </ul> </li> <li>GitHub:<ul> <li>Folder <code>.github/workflows</code></li> </ul> </li> <li>Bitbucket<ul> <li><code>bitbucket-pipelines.yml</code></li> </ul> </li> </ul> </li> </ul> <ul> <li>During the CI/CD setup, find variable SFDX_DISABLE_FLOW_DIFF in your git provider pipeline and set its value to true, to avoid to generate too many PR comments during setup. At the end of the setup, you can set back the variable to false.</li> </ul> <p>Some workflow files contain additional configuration instructions, please read the comments at the beginning of the files !</p> <p>You can now go to step Setup CI Authentication</p>"},{"location":"salesforce-ci-cd-setup-integration-api/","title":"Configure API notifications from Salesforce CI/CD","text":""},{"location":"salesforce-ci-cd-setup-integration-api/#api-integration","title":"API Integration","text":"<p>You can send notifications to an external API endpoints, for example to build Grafana dashboards</p> <ul> <li>Deployment from a major branch to a major Salesforce org (ex: integration git branch to Integration Org)</li> <li>Salesforce Org Monitoring<ul> <li>Latest updates</li> <li>Failing apex tests</li> <li>Monitoring checks notifications</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-api/#logs-configuration","title":"Logs Configuration","text":"<p>Define the following CI/CD variables:</p> <ul> <li>NOTIF_API_URL : API endpoint</li> <li>NOTIF_API_BASIC_AUTH_USERNAME : Basic auth username (if using Basic Auth)</li> <li>NOTIF_API_BASIC_AUTH_PASSWORD : Basic auth password/token (if using Basic Auth)</li> <li>NOTIF_API_BEARER_TOKEN : Bearer token (if using bearer auth)</li> </ul> <p>Examples of configuration:</p> <pre><code>NOTIF_API_URL=https://logs-prod-012.grafana.net/loki/api/v1/push\nNOTIF_API_BASIC_AUTH_USERNAME=3435645645\nNOTIF_API_BASIC_AUTH_PASSWORD=GHTRGDHDHdhghg23345DFG^sfg!ss\n</code></pre> <pre><code>NOTIF_API_URL=https://my.custom.endpoint.net\nNOTIF_API_BEARER_TOKEN=DDHGHfgfgjfhQESRDTHFKGKHFswgFHDHGDH\n</code></pre> <p>Example of logs sent to Loki:</p> <pre><code>{\n  \"streams\": [\n    {\n      \"stream\": {\n        \"source\": \"sfdx-hardis\",\n        \"type\": \"LINT_ACCESS\",\n        \"orgIdentifier\": \"hardis-group\",\n        \"gitIdentifier\": \"monitoring-hardis-org/monitoring_hardis_group\",\n        \"severity\": \"warning\"\n      },\n      \"values\": [\n        [\n          \"1715530820301000000\",\n          \"{\\\"metric\\\":3,\\\"_dateTime\\\":\\\"2024-05-12T16:20:20.301Z\\\",\\\"_severityIcon\\\":\\\"\u26a0\ufe0f\\\",\\\"_title\\\":\\\"\u26a0\ufe0f 3 custom elements have no access defined in any Profile or Permission set in monitoringhardisgroup\\\",\\\"_logBodyText\\\":\\\"\u26a0\ufe0f 3 custom elements have no access defined in any Profile or Permission set in monitoringhardisgroup\\\\n\\\\nfield\\\\n\\\\n\u2022 Activity.DBActivityType__c\\\\n\\\\n\u2022 Activity.IdExterneCARRENET__c\\\\n\\\\n\u2022 Activity.Typederendezvous_c\\\\n\\\\nLinks:\\\\n\\\\n  View Job: https://gitlab.onpremise.com/busalesforce/hardis-group-interne/monitoring-hardis-org/-/jobs/12345\\\\n\\\\nPowered by sfdx-hardis: https://sfdx-hardis.cloudity.com\\\",\\\"_logElements\\\":[{\\\"type\\\":\\\"field\\\",\\\"element\\\":\\\"Activity.DB_Activity_Type__c\\\",\\\"severity\\\":\\\"warning\\\",\\\"severityIcon\\\":\\\"\u26a0\ufe0f\\\"},{\\\"type\\\":\\\"field\\\",\\\"element\\\":\\\"Activity.IdExterneCARRENET__c\\\",\\\"severity\\\":\\\"warning\\\",\\\"severityIcon\\\":\\\"\u26a0\ufe0f\\\"},{\\\"type\\\":\\\"field\\\",\\\"element\\\":\\\"Activity.Type_de_rendez_vous__c\\\",\\\"severity\\\":\\\"warning\\\",\\\"severityIcon\\\":\\\"\u26a0\ufe0f\\\"}],\\\"_metrics\\\":{\\\"ElementsWithNoProfileOrPermissionSetAccess\\\":3},\\\"_metricsKeys\\\":[\\\"ElementsWithNoProfileOrPermissionSetAccess\\\"],\\\"_jobUrl\\\":\\\"https://gitlab.onpremise.com/busalesforce/hardis-group-interne/monitoring-hardis-org/-/jobs/399629\\\"}\"\n        ]\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"salesforce-ci-cd-setup-integration-api/#metrics-configuration","title":"Metrics Configuration","text":"<p>Additionally, you can send metrics in Prometheus format to a secondary API endpoint.</p> <p>The configuration is the same than for logs, but with different variable names.</p> <ul> <li>NOTIF_API_METRICS_URL</li> <li>NOTIF_API_METRICS_BASIC_AUTH_USERNAME</li> <li>NOTIF_API_METRICS_BASIC_AUTH_PASSWORD</li> <li>NOTIF_API_METRICS_BEARER_TOKEN</li> </ul> <p>Example of configuration:</p> <pre><code>NOTIF_API_METRICS_URL=https://influx-prod-72-prod-eu-west-2.grafana.net/api/v1/push/influx/write\nNOTIF_API_METRICS_BASIC_AUTH_USERNAME=345673\nNOTIF_API_METRICS_BASIC_AUTH_PASSWORD=GHTRGDHDHdhghg23345DFG^sfg!ss\n</code></pre> <p>Example of metrics sent to Prometheus</p> <pre><code>ApexTestsFailingClasses,source=sfdx-hardis,type=APEX_TESTS,orgIdentifier=hardis-group,gitIdentifier=monitoring-hardis-org/monitoring_hardis_group metric=0.00\nApexTestsCodeCoverage,source=sfdx-hardis,type=APEX_TESTS,orgIdentifier=hardis-group,gitIdentifier=monitoring-hardis-org/monitoring_hardis_group metric=90.00\n</code></pre>"},{"location":"salesforce-ci-cd-setup-integration-api/#troubleshooting","title":"Troubleshooting","text":"<p>If you want to see the content of the API notifications in execution logs, you can define <code>NOTIF_API_DEBUG=true</code></p>"},{"location":"salesforce-ci-cd-setup-integration-api/#grafana-setup","title":"Grafana Setup","text":"<p>If you don't have a Grafana server, you can use Grafana Cloud Free Tier (14 days of logs &amp; metrics retention + 3 users, no credit card required, free forever)</p> <p>If you do have a Grafana server and want to use a log aggregation tool like vector to ingest logs, there is a setup doc Salesforce Monitoring Setup with Vector/Datadog and PushGateways</p>"},{"location":"salesforce-ci-cd-setup-integration-api/#create-grafana-account","title":"Create Grafana Account","text":"<p>Create a Grafana Cloud Free account at this url</p> <p></p> <p>Input a Grafana Cloud org name (sfdxhardis in the example)</p> <p></p> <p>Next screen, you can skip setup</p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-api/#gather-urls-auth-info","title":"Gather URLs &amp; auth info","text":"<p>Create a notepad when you copy paste the following text</p> <pre><code>NOTIF_API_URL=\nNOTIF_API_BASIC_AUTH_USERNAME=\nNOTIF_API_BASIC_AUTH_PASSWORD=\nNOTIF_API_METRICS_URL=\nNOTIF_API_METRICS_BASIC_AUTH_USERNAME=\nNOTIF_API_METRICS_BASIC_AUTH_PASSWORD=\n</code></pre>"},{"location":"salesforce-ci-cd-setup-integration-api/#get-loki-configuration","title":"Get Loki configuration","text":"<p>Go to Connections -&gt; Data Sources and click on grafanacloud-YOURORGNAME-logs (Loki)</p> <p></p> <p>Build Logs push url</p> <ul> <li>Copy value of Connection URL (something like <code>https://logs-prod-012.grafana.net/</code>)</li> <li>Add <code>/loki/api/v1/push</code> at the end</li> <li>Copy value to variables <code>NOTIF_API_URL</code></li> </ul> <p>Example: <code>NOTIF_API_URL=https://logs-prod-012.grafana.net/loki/api/v1/push</code></p> <p>Copy value of Authentication -&gt; User and paste it with variable <code>NOTIF_API_BASIC_AUTH_USERNAME</code></p> <p>Example: <code>NOTIF_API_BASIC_AUTH_USERNAME=898189</code></p> <p>Leave NOTIF_API_BASIC_AUTH_PASSWORD empty for now, you can't get it here</p> <p></p> <p>See Grafana documentation for more info</p>"},{"location":"salesforce-ci-cd-setup-integration-api/#get-prometheus-configuration","title":"Get Prometheus configuration","text":"<p>Go to Connections -&gt; Data Sources and click on grafanacloud-YOURORGNAME-prom (Prometheus)</p> <p></p> <p>Build Metrics push url</p> <ul> <li>Copy value of Connection URL (something like <code>https://prometheus-prod-24-prod-eu-west-2.grafana.net/api/prom</code>)</li> <li>Replace <code>prometheus</code> by <code>influx</code></li> <li>Replace <code>api/prom</code> by <code>api/v1/push/influx/write</code></li> <li>Then copy value to variables <code>NOTIF_API_METRICS_URL</code></li> </ul> <p>Example: <code>NOTIF_API_METRICS_URL=https://influx-prod-24-prod-eu-west-2.grafana.net/api/v1/push/influx/write</code></p> <p>Copy value of Authentication -&gt; User and paste it with variable <code>NOTIF_API_METRICS_BASIC_AUTH_USERNAME</code></p> <p>Example: <code>NOTIF_API_METRICS_BASIC_AUTH_USERNAME=1596503</code></p> <p>Leave <code>NOTIF_API_METRICS_BASIC_AUTH_PASSWORD</code> empty for now, you can't get it here</p> <p></p> <p>See Grafana documentation for more info</p>"},{"location":"salesforce-ci-cd-setup-integration-api/#create-service-account","title":"Create Service Account","text":"<p>Go to Administration -&gt; Users and Access -&gt; Cloud Access Policies, then click on Create Access Policy</p> <p></p> <p>Create the access policy</p> <ul> <li>Define sfdxhardis as name and display name</li> <li>Select write for items metrics, logs, traces, profiles, alerts (only metrics and logs are used today, but who knows hat new features we'll release in the future !)</li> <li>Click on Create</li> </ul> <p></p> <p>On the new Access Policy <code>sfdxhardis</code>, click on Add Token at the bottom right</p> <p></p> <p>Name it sfdxhardis-token, let <code>No expiration</code> then click Create</p> <p></p> <p>On the next screen, click on Copy to clipboard then paste in your notepad in front of variables NOTIF_API_BASIC_AUTH_PASSWORD and NOTIF_API_METRICS_BASIC_AUTH_PASSWORD</p> <p></p> <p>Example:</p> <pre><code>NOTIF_API_BASIC_AUTH_PASSWORD=glc_eyJvIjoiMTEzMjI4OCIsIm4iOiJzZmR4aGFyZGlzLXNmZHhoYXJkaXMtdG9rZW4iLCJrIjoiN0x6MzNXS0hKR1J5ODNsMVE5NU1IM041IiwibSI6eyJyXN0LTIifX0=\nNOTIF_API_METRICS_BASIC_AUTH_PASSWORD=glc_eyJvIjoiMTEzMjI4OCIsIm4iOiJzZmR4aGFyZGlzLXNmZHhoYXJkaXMtdG9rZW4iLCJrIjoiN0x6MzNXS0hKR1J5ODNsMVE5NU1IM041IiwibSI6eyJyXN0LTIifX0=\n</code></pre>"},{"location":"salesforce-ci-cd-setup-integration-api/#configure-ci-variables-on-repository","title":"Configure CI variables on repository","text":"<p>Now configure the 6 variables on the monitoring repository. (Ignore other paragraphs, except those who explain how to modify the pipeline YML to access protected variables)</p> <ul> <li>GitHub</li> <li>Gitlab</li> <li>Azure</li> <li>BitBucket</li> </ul> <p>Now you can force a run of your monitoring job (just add a dumb commit on a monitoring_xxxx branch to trigger it)</p> <p>Optionally , you can look in the logs, you should see [ApiProvider] and [ApiMetricProvider] items.</p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-api/#download-sfdx-hardis-dashboards","title":"Download sfdx-hardis dashboards","text":"<p>Download all sfdx-hardis Dashboard JSON files from this sfdx-hardis repo folder</p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-api/#create-dashboard-folder","title":"Create Dashboard folder","text":"<p>Go in menu Dashboards then click on New then New folder</p> <p></p> <p>Create folder <code>Sfdx-hardis Dashboards</code></p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-api/#import-default-sfdx-hardis-grafana-dashboards","title":"Import default sfdx-hardis Grafana Dashboards","text":"<p>For each downloaded Dashboard JSON file, process the following actions.</p> <p>Click New then Import</p> <p></p> <p>Click on Upload Dashboard JSON File and select one of the Dashboards JSON files you downloaded on your computer.</p> <p></p> <ul> <li>Let Name, Folder and UID default values</li> <li>Select your Loki or Prometheus source. They can be:<ul> <li>grafanacloud-YOURORGNAME-logs (Loki)</li> <li>grafanacloud-YOURORGNAME-prom (Prometheus)</li> </ul> </li> </ul> <p></p> <p>Click Import</p> <p></p> <p>__</p> <p>Repeat the operation for all Dashboard JSON files, and you're all set !</p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-azure-boards/","title":"Configure Integrations between sfdx-hardis and Azure Boards Work Items","text":"<ul> <li>Azure Boards integration<ul> <li>Update Work Items</li> </ul> </li> <li>Technical notes</li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-azure-boards/#azure-boards-integration","title":"Azure Boards integration","text":"<p>If you use Azure Work Items on your project, sfdx-hardis can use it to enrich its integrations</p> <p>Sfdx-hardis will automatically analyze commits and PR/MR descriptions to collect Work Items references !</p> <p>Make sure to link your Work Items to your Pull Requests before submitting them !</p>"},{"location":"salesforce-ci-cd-setup-integration-azure-boards/#update-work-items","title":"Update Work Items","text":"<p>Add comments and tags on JIRA tickets when they are deployed in a major org</p> <p>Default tag is <code>UPPERCASE(branch_name) + \"_DEPLOYED\"</code>.</p> <p>To override it, define env variable DEPLOYED_TAG_TEMPLATE, that must contain <code>{BRANCH}</code>.</p> <p>Example: <code>DEPLOYED_TO_{BRANCH}</code></p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-azure-boards/#technical-notes","title":"Technical notes","text":"<p>This integration use the following variables, that must be available from the pipelines:</p> <ul> <li>SYSTEM_COLLECTIONURI</li> <li>SYSTEM_ACCESSTOKEN</li> <li>SYSTEM_TEAMPROJECT</li> <li>BUILD_REPOSITORY_ID</li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-azure/","title":"Configure Integrations between sfdx-hardis and Azure Pipelines","text":""},{"location":"salesforce-ci-cd-setup-integration-azure/#azure-pull-request-notes","title":"Azure Pull Request notes","text":"<p>In order to avoid to have to open job logs to see deployment errors, sfdx-hardis can post them as a thread on the Pull Request UI</p>"},{"location":"salesforce-ci-cd-setup-integration-azure/#global-configuration","title":"Global configuration","text":"<p>To use this capability:</p> <ul> <li> <p>A build policy must be defined</p> <ul> <li>See https://docs.microsoft.com/en-US/azure/devops/repos/git/branch-policies?view=azure-devops&amp;tabs=browser#build-validation</li> </ul> </li> </ul> <ul> <li>You must allow Contribute and Contribute to Pull Requests on your Build Service (Settings -&gt; Repositories -&gt; Select your build service)</li> </ul> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-azure/#tech-work-item","title":"Tech Work Item","text":"<p>If you want to use Flow Diff (visual diff of flow differences):</p> <ul> <li> <p>Create an Azure boards ticket exactly named sfdx-hardis tech attachments. IT will be used to link uploaded images.</p> <ul> <li>If you prefer to name it differently, define variable <code>AZURE_ATTACHMENTS_WORK_ITEM_ID</code> with the number of your ticket as value.</li> </ul> </li> </ul> <ul> <li>An Azure Work item can have only 100 attached images, so frequently delete old image attachments, or delete the ticket then recreate it with the same name.</li> </ul> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-azure/#examples","title":"Examples","text":"<p>Everytime you will make a pull request, the CI job will post its result as comment !</p> <ul> <li>Example with deployment errors</li> </ul> <p></p> <ul> <li>Example with failing test classes</li> </ul> <p></p> <ul> <li>Example when all is ok :)</li> </ul> <p></p> <p>Notes:</p> <ul> <li>This integration works with sfdx-hardis pipeline, but also on home-made pipelines, just call sf hardis:project:deploy:start instead of <code>sf project:deploy:start</code> !</li> </ul> <ul> <li>This integration use the following variables:<ul> <li>SYSTEM_ACCESSTOKEN: $(System.AccessToken)</li> <li>CI_SFDX_HARDIS_AZURE_TOKEN: $(System.AccessToken)</li> <li>SYSTEM_COLLECTIONURI: $(System.CollectionUri)</li> <li>SYSTEM_JOB_DISPLAY_NAME: $(System.JobDisplayName)</li> <li>SYSTEM_JOB_ID: $(System.JobId)</li> <li>SYSTEM_PULLREQUEST_PULLREQUESTID: $(System.PullRequest.PullRequestId)</li> <li>SYSTEM_TEAMPROJECT: $(System.TeamProject)</li> <li>BUILD_BUILD_ID: $(Build.BuildId)</li> <li>BUILD_REPOSITORY_ID: $(Build.Repository.ID)</li> <li>AZURE_ATTACHMENTS_WORK_ITEM_ID (optional: identifier of the Work Items used to attach images)</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-bitbucket/","title":"Configure Integrations between sfdx-hardis and Bitbucket Pipelines","text":""},{"location":"salesforce-ci-cd-setup-integration-bitbucket/#bitbucket-pull-request-comments","title":"Bitbucket Pull Request comments","text":"<p>In order to avoid to have to open job logs to see deployment errors, sfdx-hardis can post them as a comment on the Pull Request UI</p> <p>To use this capability:</p> <ul> <li>Go to Repository Settings -&gt; Access Tokens  Create Repository Access Token with the following scopes:<ul> <li>pullrequest</li> <li>pullrequest:write</li> <li>repository</li> <li>repository:write</li> </ul> </li> <li>Go to Repository Settings &gt; Repository Variables Create a variable named CI_SFDX_HARDIS_BITBUCKET_TOKEN and provide the access token value</li> </ul> <p>Everytime you will make a pull request, the CI job will post its result as a comment !</p> <ul> <li>Example when all is ok :) </li> </ul> <p>Notes:</p> <ul> <li>This integration works with sfdx-hardis pipeline, but also on home-made pipelines, just call sf hardis:project:deploy:start instead of <code>sf project:deploy:start</code> !</li> </ul> <ul> <li>This integration uses the following variables:<ul> <li>CI_SFDX_HARDIS_BITBUCKET_TOKEN</li> <li>BITBUCKET_WORKSPACE</li> <li>BITBUCKET_REPO_SLUG</li> <li>BITBUCKET_BRANCH</li> <li>BITBUCKET_PR_ID</li> <li>BITBUCKET_BUILD_NUMBER</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-email/","title":"Configure Email notifications from Salesforce CI/CD","text":""},{"location":"salesforce-ci-cd-setup-integration-email/#email-integration","title":"Email Integration","text":"<p>You can receive notifications on one or multiple e-mail addresses when sfdx-hardis events are happening:</p> <ul> <li>Deployment from a major branch to a major Salesforce org (ex: integration git branch to Integration Org)</li> <li>Salesforce Org Monitoring<ul> <li>Latest updates</li> <li>Failing apex tests</li> <li>Monitoring checks notifications</li> </ul> </li> </ul> <p>Note: Salesforce email sending capabilities are used, so every email will count in your org daily email limit.</p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-email/#configuration","title":"Configuration","text":"<p>Define CI/CD variable NOTIF_EMAIL_ADDRESS with the related email(s)</p> <p>Examples:</p> <ul> <li><code>NOTIF_EMAIL_ADDRESS=admin@cloudity.com</code></li> <li><code>NOTIF_EMAIL_ADDRESS=admin@cloudity.com,another.user@cloudity.com,nico@cloudity.com</code></li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-email/#troubleshooting","title":"Troubleshooting","text":"<p>If the emails are not sent, apply the following configuration on the Monitoring / Deployment user settings</p> <ul> <li>Send through Salesforce</li> </ul> <p></p> <p>That's all, you're all set !</p>"},{"location":"salesforce-ci-cd-setup-integration-generic-ticketing/","title":"Configure Integrations between sfdx-hardis and any ticketing system","text":"<ul> <li>Generic ticketing integration</li> <li>Configuration<ul> <li>Regular Expression to identify a Ticket</li> <li>URL Builder for Ticket Hyperlinks</li> </ul> </li> <li>Gitlab configuration</li> <li>Technical notes</li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-generic-ticketing/#generic-ticketing-integration","title":"Generic ticketing integration","text":"<p>If you use a ticketing system on your project, sfdx-hardis can use it to enrich its integrations</p> <p>Sfdx-hardis will automatically analyze commits and PR/MR descriptions to collect tickets and build their urls !</p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-generic-ticketing/#configuration","title":"Configuration","text":"<p>You need to define 2 properties in .sfdx-hardis.yml, or 2 environment variables in your CI/CD configuration.</p> <p>It is recommended to use .sfdx-hardis.yml to store these properties, so the VsCode extension will be able to use them for UI features.</p>"},{"location":"salesforce-ci-cd-setup-integration-generic-ticketing/#regular-expression-to-identify-a-ticket","title":"Regular Expression to identify a Ticket","text":"<ul> <li>.sfdx-hardis.yml property: genericTicketingProviderRegex</li> <li>ENV variable: GENERIC_TICKETING_PROVIDER_REGEX</li> </ul> <p>Regular expression allowing to detect your ticketing system identifiers in the commits / PR texts.</p> <p>You can use https://regex101.com/ to check your Regular Expression.</p> <p>Example: <code>([R|I][0-9]+-[0-9]+)</code> to detect EasyVista references, that can look like <code>I240103-0133</code> or <code>R230904-0026</code></p>"},{"location":"salesforce-ci-cd-setup-integration-generic-ticketing/#url-builder-for-ticket-hyperlinks","title":"URL Builder for Ticket Hyperlinks","text":"<ul> <li>.sfdx-hardis.yml property: genericTicketingProviderUrlBuilder</li> <li>ENV variable: GENERIC_TICKETING_PROVIDER_URL_BUILDER</li> </ul> <p>Template string allowing to build a hyperlink from a ticket identifier.</p> <p>Must contain a {REF} segment that will be replaced by the ticket identifier.</p> <p>Example: <code>https://instance.easyvista.com/index.php?ticket={REF}</code></p>"},{"location":"salesforce-ci-cd-setup-integration-generic-ticketing/#gitlab-configuration","title":"Gitlab configuration","text":"<p>If you are using Gitlab, you need to update the Merge Request Settings</p> <p>Go to Project -&gt; Settings -&gt; Merge Requests</p> <p>Update Merge Commit Message Template with the following value</p> <pre><code>%{title} Merge branch '%{source_branch}' into '%{target_branch}'\n\n%{issues}\n\nSee merge request %{reference}\n\n%{description}\n\n%{all_commits}\n</code></pre> <p>Update Squash Commit Message Template with the following value</p> <pre><code>%{title} Merge branch '%{source_branch}' into '%{target_branch}'\n\n%{issues}\n\nSee merge request %{reference}\n\n%{description}\n\n%{all_commits}\n</code></pre>"},{"location":"salesforce-ci-cd-setup-integration-generic-ticketing/#technical-notes","title":"Technical notes","text":"<p>This integration use the following variables, that must be available from the pipelines or in .sfdx-hardis.yml:</p> <ul> <li>genericTicketingProviderRegex or GENERIC_TICKETING_PROVIDER_REGEX</li> <li>genericTicketingProviderUrlBuilder or GENERIC_TICKETING_PROVIDER_URL_BUILDER</li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-github/","title":"Configure Integrations between sfdx-hardis and GitHub","text":""},{"location":"salesforce-ci-cd-setup-integration-github/#github-pull-requests-comments","title":"GitHub Pull Requests comments","text":"<p>In order to avoid to have to open job logs to see deployment errors, sfdx-hardis can post them as Comment on the Pull Request UI</p> <p>To use this capability, all you need is to have permissions on your workflows and send your GITHUB_TOKEN (see full example)</p> <pre><code>    permissions:\n      pull-requests: write\n\n...\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        FORCE_COLOR: \"1\"\n</code></pre> <p>Everytime you will make a Pull Request, the CI job will post its result as comment !</p> <ul> <li>Example with deployment success</li> </ul> <p></p> <ul> <li>Example with deployment errors</li> </ul> <p></p> <p>Notes:</p> <ul> <li>This integration works with sfdx-hardis pipeline, but also on home-made pipelines, just call sf hardis:project:deploy:start instead of <code>sf project:deploy:start</code> !</li> </ul> <ul> <li> <p>This integration use the following variables:</p> <ul> <li>GITHUB_TOKEN (provided by GitHub but has to be send as option to the deployment jobs)</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-github/#using-github-integration-without-github-actions","title":"Using GitHub integration without Github Actions","text":"<p>You might want to use GitHub integration with other tools than GitHub Actions, like Jenkins or Codefresh</p> <p>In that case, to still benefit from GitHub integration, you need to make sure that the following variables are set.</p> Variable Description GITHUB_TOKEN You might need to Create a GitHub Personal Access Token GITHUB_REPOSITORY ex: <code>MyClient/crm-salesforce</code> GITHUB_REPOSITORY_OWNER ex: <code>MyClient</code> GITHUB_SERVER_URL ex: <code>https://github.mycompanydomain.com</code> GITHUB_API_URL ex: <code>https://github.mycompanydomain.com/api</code> GITHUB_GRAPHQL_URL ex: <code>https://github.mycompanydomain.com/api/graphql</code> GITHUB_WORKFLOW ex: <code>Simulate Deployment (sfdx-hardis)</code> GITHUB_REF ex: <code>refs/pull/503/merge</code> GITHUB_REF_NAME ex: <code>503/merge</code> GITHUB_RUN_ID ex: <code>14282257027</code>. If you can't have it, to not set the variable. PIPELINE_JOB_URL Direct link to the page where we can see your job results. ex: <code>https://yourserver.com/jobs/345</code>"},{"location":"salesforce-ci-cd-setup-integration-gitlab/","title":"Configure Integrations between sfdx-hardis and Gitlab","text":""},{"location":"salesforce-ci-cd-setup-integration-gitlab/#gitlab-merge-request-notes","title":"Gitlab Merge request notes","text":"<p>In order to avoid to have to open job logs to see deployment errors, sfdx-hardis can post them as Notes on the Merge Request UI</p> <p>To use this capability:</p> <ul> <li>Go to Settings -&gt; Access Tokens -&gt; Create a project access token with level Developer and scope api, and name it SFDX HARDIS BOT</li> </ul> <p></p> <ul> <li>Go to Settings -&gt; CI/CD -&gt; Variables -&gt; Create a variable named CI_SFDX_HARDIS_GITLAB_TOKEN and past the access token value</li> </ul> <p></p> <p>Everytime you will make a merge request, the CI job will post its result as comment !</p> <ul> <li>Example with deployment errors</li> </ul> <p></p> <ul> <li>Example with failing test classes</li> </ul> <p></p> <p>Notes:</p> <ul> <li>This integration works with sfdx-hardis pipeline, but also on home-made pipelines, just call sf hardis:project:deploy:start instead of <code>sf project:deploy:start</code> !</li> </ul> <ul> <li>This integration use the following variables:<ul> <li>CI_SFDX_HARDIS_GITLAB_TOKEN</li> <li>CI_SERVER_URL (provided by Gitlab CI)</li> <li>CI_PROJECT_ID (provided by Gitlab CI)</li> <li>CI_MERGE_REQUEST_IID (provided by Gitlab CI)</li> <li>CI_JOB_NAME (provided by Gitlab CI)</li> <li>CI_JOB_URL (provided by Gitlab CI)</li> <li>GITLAB_API_REJECT_UNAUTHORIZED: set to <code>\"false\"</code> if you want to allow connection even without certificate (can be useful on on-premise GitLab instance)</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-jira/","title":"Configure Integrations between sfdx-hardis and Jira","text":"<ul> <li>Jira integration<ul> <li>For git providers</li> <li>For notifications providers</li> <li>Update JIRA issues</li> </ul> </li> <li>Global Configuration<ul> <li>Identify JIRA tickets</li> <li>Jira Cloud</li> <li>Jira On-Premise</li> </ul> </li> <li>Gitlab configuration</li> <li>Technical notes</li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-jira/#jira-integration","title":"Jira integration","text":"<p>If you use JIRA on your project, sfdx-hardis can use it to enrich its integrations</p> <p>Sfdx-hardis will automatically analyze commits and PR/MR descriptions to collect JIRA tickets URLS !</p> <p>You can use the full URL of JIRA tickets in your commits and PR/MR descriptions.</p> <p>Use <code>https://sfdx-hardis.atlassian.net/browse/CLOUDITY-4</code> , not <code>CLOUDITY-4</code> !</p> <p>If you don't use full URL, a default expression will be used, that you can override for a better accuracy (see Identify JIRA Tickets )</p> <p>In that case, <code>CLOUDITY-4</code> will be detected, but make sure that JIRA_HOST is defined</p>"},{"location":"salesforce-ci-cd-setup-integration-jira/#for-git-providers","title":"For git providers","text":"<p>Github, Gitlab, Azure, Bitbucket: Post references to JIRA tickets in PR/MR comments</p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-jira/#for-notifications-providers","title":"For notifications providers","text":"<p>Slack, MsTeams: Add deployed JIRA tickets in deployment notifications</p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-jira/#update-jira-issues","title":"Update JIRA issues","text":"<p>Add comments and tags on JIRA tickets when they are deployed in a major org</p> <p>Default tag is <code>UPPERCASE(branch_name) + \"_DEPLOYED\"</code>.</p> <p>To override it, define env variable DEPLOYED_TAG_TEMPLATE, that must contain <code>{BRANCH}</code>.</p> <p>Example: <code>DEPLOYED_TO_{BRANCH}</code></p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-jira/#global-configuration","title":"Global configuration","text":"<p>Prioritize defining these properties in .sfdx-hardis.yml file when possible, so VS Code extension can use them for UI features.</p>"},{"location":"salesforce-ci-cd-setup-integration-jira/#identify-jira-tickets","title":"Identify JIRA Tickets","text":"<ul> <li>.sfdx-hardis.yml property: jiraTicketRegex or ENV variable JIRA_TICKET_REGEX</li> </ul> <p>Define regular expression allowing to identify the JIRA tickets of your project in commit&amp; Pull Requests titles &amp; bodies, for example <code>(CLOUDITY-[0-9]+)</code></p> <p>If not defined, default value is <code>(?&lt;=[^a-zA-Z0-9_-]|^)([A-Za-z0-9]{2,10}-\\d{1,6})(?=[^a-zA-Z0-9_-]|$)</code></p>"},{"location":"salesforce-ci-cd-setup-integration-jira/#jira-cloud","title":"Jira Cloud","text":"<p>Define variables</p> <ul> <li>.sfdx-hardis.yml property jiraHost or ENV variable JIRA_HOST (example: <code>https://sfdx-hardis.atlassian.net/</code>)</li> <li>JIRA_EMAIL (example: <code>nicolas.vuillamy@cloudity.com</code>)</li> <li>JIRA_TOKEN , to create following Atlassian documentation</li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-jira/#jira-on-premise","title":"Jira On-Premise","text":"<p>Note: Does not seems to work with every on-premise JIRA servers</p> <p>Define CI/CD variables</p> <ul> <li>.sfdx-hardis.yml property jiraHost or ENV variable JIRA_HOST (examples: <code>https://jira.cloudity.com/</code> , or with path like <code>https://pid.cloudity.com/jira/</code>)</li> <li>JIRA_PAT, to create following Atlassian Documentation (section Creating PATs in the application)</li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-jira/#gitlab-configuration","title":"Gitlab configuration","text":"<p>If you are using Gitlab, you need to update the Merge Request Settings</p> <p>Go to Project -&gt; Settings -&gt; Merge Requests</p> <p>Update Merge Commit Message Template with the following value</p> <pre><code>%{title} Merge branch '%{source_branch}' into '%{target_branch}'\n\n%{issues}\n\nSee merge request %{reference}\n\n%{description}\n\n%{all_commits}\n</code></pre> <p>Update Squash Commit Message Template with the following value</p> <pre><code>%{title} Merge branch '%{source_branch}' into '%{target_branch}'\n\n%{issues}\n\nSee merge request %{reference}\n\n%{description}\n\n%{all_commits}\n</code></pre>"},{"location":"salesforce-ci-cd-setup-integration-jira/#technical-notes","title":"Technical notes","text":"<p>This integration use the following variables, that must be available from the pipelines:</p> <ul> <li>JIRA_HOST</li> <li>JIRA_EMAIL</li> <li>JIRA_TOKEN</li> <li>JIRA_PAT</li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-ms-teams/","title":"Configure Microsoft Teams notifications from Salesforce CI/CD","text":""},{"location":"salesforce-ci-cd-setup-integration-ms-teams/#ms-teams-integration","title":"Ms Teams Integration","text":"<p>You can receive notifications on Microsoft Teams channels when sfdx-hardis events are happening:</p> <ul> <li>Deployment from a major branch to a major Salesforce org (ex: integration git branch to Integration Org)</li> <li>Salesforce Org Monitoring<ul> <li>Latest updates</li> <li>Failing apex tests</li> <li>Monitoring checks notifications</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-ms-teams/#configure-microsoft-teams-workflow","title":"Configure Microsoft Teams Workflow","text":""},{"location":"salesforce-ci-cd-setup-integration-ms-teams/#create-teams-workflow","title":"Create Teams Workflow","text":"<p>Create a Teams Workflow using the following steps:</p> <ul> <li>Navigate to your Teams channel</li> <li>Click on the \"...\" menu and select \"Workflows\"</li> <li>Search for \"Post to a channel when a webhook request is received\"</li> <li>Configure the workflow:<ul> <li>Select the team and channel where notifications should appear</li> <li>Copy the webhook URL provided</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-ms-teams/#configure-sfdx-hardis-for-teams","title":"Configure sfdx-hardis for Teams","text":"<ul> <li>Create a secret value named MS_TEAMS_WEBHOOK_URL with the webhook URL in your Git provider configuration</li> </ul> <ul> <li>Additionally, you can create branch-scoped webhooks by creating appropriate variables<ul> <li>Example: Variable MS_TEAMS_WEBHOOK_URL_INTEGRATION for integration branch</li> </ul> </li> </ul> <ul> <li>You can also define an additional webhook to receive only warning, error and critical notifications<ul> <li>Example: Variable MS_TEAMS_WEBHOOK_URL_ERRORS_WARNINGS</li> </ul> </li> </ul> <ul> <li>Make sure all those variables are visible to your CI/CD pipelines</li> </ul> <p>That's all, you're all set !</p>"},{"location":"salesforce-ci-cd-setup-integration-ms-teams/#alternative-email-notifications","title":"Alternative: Email Notifications","text":"<p>If you prefer email-based notifications, you can also use Email Notifications with the Teams Channel Email as <code>NOTIF_EMAIL_ADDRESS</code>.</p> <p>To get Teams email channel, click on the channel contextual menu, then \"Get channel E-mail Address\":</p> <p></p> <p>Then make sure that anyone can send emails to the channel by selecting the first option:</p> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-slack/","title":"Configure Integrations between sfdx-hardis and Slack","text":""},{"location":"salesforce-ci-cd-setup-integration-slack/#slack-integration","title":"Slack Integration","text":"<p>You can receive notifications on slack channels when sfdx-hardis events are happening:</p> <ul> <li>Deployment from a major branch to a major Salesforce org (ex: integration git branch to Integration Org)</li> <li>Salesforce Org Monitoring<ul> <li>Latest updates</li> <li>Failing apex tests</li> <li>Monitoring checks notifications</li> </ul> </li> </ul> <p></p>"},{"location":"salesforce-ci-cd-setup-integration-slack/#configure-slack-application","title":"Configure Slack Application","text":"<p>All the following steps are summarized in this video tutorial</p>"},{"location":"salesforce-ci-cd-setup-integration-slack/#create-slack-app","title":"Create slack app","text":"<p>Process only if a sfdx-hardis bot has not yet been configured on your slack. Otherwise, just request the slack token value to your slack administrator</p> <p>Create a slack app here -&gt; https://api.slack.com/apps</p> <ul> <li>Name it <code>sfdx-hardis bot</code> or any nickname you like, like your guinea pig name !</li> <li>Go to permissions and add the following scopes<ul> <li>chat-write</li> <li>chat-write.customize</li> <li>chat-write.public</li> </ul> </li> <li>Create auth token and copy its values</li> </ul>"},{"location":"salesforce-ci-cd-setup-integration-slack/#configure-sfdx-hardis-for-slack","title":"Configure sfdx-hardis for slack","text":"<ul> <li>Create a secret value named SLACK_TOKEN with auth token value in your Git provider configuration</li> </ul> <ul> <li>Create a slack channel that will receive all notifications (ex: #notifs-sfdx-hardis)</li> </ul> <ul> <li>Open the channel info, copy its ID and create a secret value named SLACK_CHANNEL_ID in your git provider configuration</li> </ul> <ul> <li>Invite the sfdx-hardis bot user to the channel (ex: <code>/invite @sfdx-hardis-bot</code>)</li> </ul> <ul> <li>Additionally, you can create branch-scoped channels by creating new channels and create appropriate variables<ul> <li>Example: Channel #notifs-sfdx-hardis-integration and variable SLACK_CHANNEL_ID_INTEGRATION</li> </ul> </li> </ul> <ul> <li>You can also define an additional channel to receive only warning, error and critical notifications in another channel<ul> <li>Example: Channel #notifs-monitor-hot and variable SLACK_CHANNEL_ID_ERRORS_WARNINGS</li> </ul> </li> </ul> <ul> <li>Make sure all those variables are visible to your CI/CD pipelines</li> </ul> <p>That's all, you're all set !</p>"},{"location":"salesforce-ci-cd-setup-integrations-home/","title":"Configure Integrations between sfdx-hardis and external tools","text":"<p>Every info that sfdx-hardis can provide is available in log files or console terminals.</p> <p>In order to enhance the user experience, integrations with external tools must be configured.</p>"},{"location":"salesforce-ci-cd-setup-integrations-home/#git-providers","title":"Git Providers","text":"<p>Depending of your git provider, configure one of the following integrations.</p> <ul> <li>GitHub<ul> <li>Deployment status in Merge Request notes</li> <li>Quick Deploy to enhance performances</li> </ul> </li> </ul> <ul> <li>Gitlab<ul> <li>Deployment status in Merge Request notes</li> <li>Quick Deploy to enhance performances</li> </ul> </li> </ul> <ul> <li>Azure Pipelines<ul> <li>Deployment status in Pull Request threads</li> <li>Quick Deploy to enhance performances</li> </ul> </li> </ul> <ul> <li>BitBucket<ul> <li>Deployment status in Pull Request comments</li> <li>Quick Deploy to enhance performance</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-integrations-home/#message-notifications","title":"Message notifications","text":"<ul> <li>Slack<ul> <li>Notifications</li> </ul> </li> </ul> <ul> <li>Microsoft Teams<ul> <li>Notifications</li> </ul> </li> </ul> <ul> <li>Email<ul> <li>Notifications</li> </ul> </li> </ul> <ul> <li>API (ex: Grafana)<ul> <li>Notifications</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-integrations-home/#ticketing-providers","title":"Ticketing providers","text":"<ul> <li>Jira<ul> <li>Enrich MR/PR comments by adding tickets references and links</li> <li>Enrich notifications comments by adding tickets references and links</li> <li>Post a comment and a label on JIRA issues when they are deployed in a major org</li> </ul> </li> </ul> <ul> <li>Azure Boards<ul> <li>Enrich MR/PR comments by adding work items references and links</li> <li>Enrich notifications comments by adding work items references and links</li> <li>Post a comment and a tag on Azure Work Items when they are deployed in a major org</li> </ul> </li> </ul> <ul> <li>Generic ticketing<ul> <li>Enrich MR/PR comments by adding tickets references and links</li> <li>Enrich notifications comments by adding tickets references and links</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-integrations-home/#large-language-models-ai","title":"Large Language Models (AI)","text":"<ul> <li>Agentforce<ul> <li>AI deployment assistant</li> <li>Project Documentation</li> </ul> </li> </ul> <ul> <li>OpenAi, Anthropic, Gemini, Ollama<ul> <li>AI deployment assistant</li> <li>Project Documentation</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-merge-request/","title":"First merge request","text":"<ul> <li>Initialization merge request</li> <li>Common issues<ul> <li>Translations</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-setup-merge-request/#initialization-merge-request","title":"Initialization merge request","text":"<p>Create your first merge request with branch cicd as source, and your lower major branch as target (usually integration)</p> <p>Make sure that before merging your first merge request, file manifest/destructiveChange.xml is empty</p> <p>You will see errors, but it is normal: Follow Maintainer Guide to complete your configuration !</p> <p>Once all controlling jobs are in success, your CI/CD setup is completed !</p>"},{"location":"salesforce-ci-cd-setup-merge-request/#common-issues","title":"Common issues","text":""},{"location":"salesforce-ci-cd-setup-merge-request/#translations","title":"Translations","text":"<p>If you removed Dashboards and reports from the repo, their translations can remain in files like translations/en_US.xml</p> <p>Remove all related XML blocks as they contain unused translations.</p>"},{"location":"salesforce-ci-cd-solve-deployment-errors/","title":"Solve Salesforce deployment errors","text":"<ul> <li>Metadata errors<ul> <li>Fix with new commit</li> <li>Fix with reset commits then new commit</li> </ul> </li> <li>Test classes errors</li> <li>Code Coverage errors</li> <li>SOS, I'm lost</li> </ul>"},{"location":"salesforce-ci-cd-solve-deployment-errors/#metadata-errors","title":"Metadata errors","text":"<p>sfdx-hardis will display the error and often provide tips about how to solve the error.</p> <p></p>"},{"location":"salesforce-ci-cd-solve-deployment-errors/#fix-with-new-commit","title":"Fix with new commit","text":"<p>You can solve the issue, create a new commit and run again command </p>"},{"location":"salesforce-ci-cd-solve-deployment-errors/#fix-with-reset-commits-then-new-commit","title":"Fix with reset commits then new commit","text":"<p>If the issue is caused by the fact that you committed files that you finally decided to not publish, you can reset your selection.</p> <ul> <li>Click on : that will rollback all the previous commits of your current git branch</li> </ul> <ul> <li>Stage and commit again the elements that you want to publish</li> </ul> <ul> <li>Run command </li> </ul>"},{"location":"salesforce-ci-cd-solve-deployment-errors/#test-classes-errors","title":"Test classes errors","text":"<p>That's simple: fix the test classes :)</p> <p>If you are an admin, you might need the help of a developer, who will directly work in your branch</p>"},{"location":"salesforce-ci-cd-solve-deployment-errors/#code-coverage-errors","title":"Code Coverage errors","text":"<p>Don't be lazy, write the missing test classes :)</p> <p>You know you'll need them to be able to deploy in production anyway :)</p>"},{"location":"salesforce-ci-cd-solve-deployment-errors/#sos-im-lost","title":"SOS, I'm lost","text":"<ul> <li>Call your release manager, he/she's here to help you !</li> <li>Google / ChatGPT / Bard the issue</li> <li>Ask on Slack #inte-hotline-cicd if you work at Cloudity</li> <li>Ask on Salesforce StackExchange</li> </ul>"},{"location":"salesforce-ci-cd-solve-megalinter-errors/","title":"Solve Salesforce MegaLinter errors","text":"<ul> <li>Apex best practices using PMD</li> <li>LWC best practices using eslint</li> <li>Security issues</li> <li>Excessive copy-pastes</li> <li>Example of .mega-linter.yml config file</li> </ul>"},{"location":"salesforce-ci-cd-solve-megalinter-errors/#apex-best-practices-using-pmd","title":"Apex best practices using PMD","text":"<p>You don't want technical debt on your project !</p> <p>Download job artifacts that will contain a file <code>sfdx-scanner-report-apex.csv</code>.</p> <p></p> <p>Open the file to see the errors</p> <p></p> <ul> <li>If the errors are in code that has been written by a developer, solve it</li> </ul> <ul> <li>If the errors are from imported or generated classes, you can bypass them by adding annotation <code>@SuppressWarnings('PMD')</code> at the top of the classes</li> </ul> <ul> <li><code>// NOPMD</code> at the end of a line will make an issue ignored, but again use it only in case of false positive, never to \"Publish more quickly\", else you'll create technical debt.<ul> <li>If you use <code>// NOPMD</code>, specify why as comment . Example: <code>// NOPMD Strings already escaped before</code></li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-solve-megalinter-errors/#lwc-best-practices-using-eslint","title":"LWC best practices using eslint","text":"<p>sfdx-scanner-lwc embedded in MegaLinter is hard to use.</p> <p>If you don't succeed, you can define <code>SALESFORCE_SFDX_SCANNER_LWC</code> in <code>DISABLE_LINTERS</code> property in <code>.mega-linter.yml</code> config file.</p>"},{"location":"salesforce-ci-cd-solve-megalinter-errors/#security-issues","title":"Security issues","text":"<p>Solve the security issues if they are critical like hardcoded tokens, or bypass the linters (release manager action only)</p>"},{"location":"salesforce-ci-cd-solve-megalinter-errors/#excessive-copy-pastes","title":"Excessive copy-pastes","text":"<p>Refactor your code to avoid excessive copy-pastes !</p> <p>You can also add exceptions in <code>.jscpd.json</code> file, but really in case it has sense, not out of laziness</p>"},{"location":"salesforce-ci-cd-solve-megalinter-errors/#example-of-mega-linteryml-config-file","title":"Example of .mega-linter.yml config file","text":"<pre><code># Extend from shared sfdx-hardis Mega-Linter configuration :)\nEXTENDS:\n  - https://raw.githubusercontent.com/hardisgroupcom/sfdx-hardis/main/config/sfdx-hardis.mega-linter-config.yml\n\nDISABLE_LINTERS:\n- SALESFORCE_SFDX_SCANNER_LWC\n- SALESFORCE_SFDX_SCANNER_AURA\n- CSS_STYLELINT\n\nSALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS_IF_LESS_THAN: 6 # ONLY THE RELEASE MANAGER CAN UPDATE THIS VALUE !\n</code></pre>"},{"location":"salesforce-ci-cd-use-home/","title":"Salesforce CI/CD Contributor Guide","text":"<ul> <li>Initialization</li> <li>Make updates on your Salesforce project</li> </ul>"},{"location":"salesforce-ci-cd-use-home/#initialization","title":"Initialization","text":"<p>You need a stack of applications and to have Salesforce sources on your computer to be able to start to work on a CI/CD project.</p> <ul> <li>Install necessary applications on your computer (to perform only once by computer)</li> <li>Clone git repository on your computer (to perform only once by Salesforce project)</li> </ul>"},{"location":"salesforce-ci-cd-use-home/#make-updates-on-your-salesforce-project","title":"Make updates on your Salesforce project","text":"<p>Now your computer is ready, let's see how you can use sandboxes or scratch orgs to make updates in your Salesforce projects !</p> <ul> <li>Create a new User Story</li> <li>Work on your current User Story</li> <li>Publish your User Story (by creating a Merge Request)</li> <li>Handle merge requests errors</li> <li>Validate a merge request (Release manager and advanced user only, depending on the project organization)</li> </ul>"},{"location":"salesforce-ci-cd-use-install/","title":"Salesforce CI/CD Installation User guide","text":""},{"location":"salesforce-ci-cd-use-install/#computer-installation-user-guide","title":"Computer Installation user guide","text":"<p>If you installed Salesforce DX or Salesforce CLI using Windows installer, please uninstall it using Windows -&gt; Programs &gt; Uninstall</p> <p>See tutorial</p> <ul> <li>Install Visual Studio code</li> </ul> <ul> <li>Install VsCode extension VsCode SFDX Hardis by searching for Hardis is VsCode extensions plugin pane.</li> </ul> <ul> <li>Once installed, click on  in VsCode left bar</li> </ul> <ul> <li>Messages will appear at the bottom right of VsCode and ask you to install additional applications and activate settings. Follow all of them until there is none left.<ul> <li>When later you'll see such messages again from sfdx-hardis, click to apply them to upgrade applications.</li> </ul> </li> </ul> <p></p> <ul> <li>When no warning in displayed in the dependencies panel, you're all set !</li> </ul> <p></p> <p> Under the hood</p> <p>The installed applications are the following:</p> <ul> <li>Git</li> <li>Node.js</li> <li>Salesforce CLI</li> <li>Salesforce DX plugins<ul> <li>sfdx-hardis</li> <li>SFDX Git Delta</li> <li>Salesforce Data Move Utility</li> </ul> </li> </ul> <p>Now your computer is all set, you can clone your project git repository :)</p>"},{"location":"salesforce-ci-cd-validate-merge-request/","title":"Validate a merge request on a Salesforce CI/CD project","text":"<ul> <li>Conflicts</li> <li>Control jobs<ul> <li>Check deploy job</li> <li>Code Quality job</li> </ul> </li> <li>Merge the Pull Request / Merge Request<ul> <li>Pre-deployment actions</li> <li>Effective merge</li> <li>Post-deployment actions</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-validate-merge-request/#conflicts","title":"Conflicts","text":"<p>This section must be managed by team members with git knowledge</p> <p>If elements has been modified in another branch, you need to manage conflicts before being able to merge.</p> <ul> <li>Merge conflicts then commit and push your updates, it will trigger again the control job with the new branch state.</li> </ul> <p>This video shows how to merge conflicts with Visual Studio Code.</p> <p>In case conflicts are too complicated to manage (like on a Flow for example), you need to:</p> <ul> <li>Retrofit the new version of the flow in your branch (that will overwrite your updates)</li> <li>Sfdx Push it to your source-tracked sandbox or scratch org</li> <li>Make again the updates in the Salesforce Setup</li> <li>Sfdx Pull the updated version in your local branch</li> <li>Git Commit &amp; Push to your branch</li> </ul>"},{"location":"salesforce-ci-cd-validate-merge-request/#control-jobs","title":"Control jobs","text":"<p>Each merge request runs automatically the control jobs that will insure that the future deployment with be valid.</p>"},{"location":"salesforce-ci-cd-validate-merge-request/#check-deploy-job","title":"Check deploy job","text":"<p>See Handle Deployment errors</p>"},{"location":"salesforce-ci-cd-validate-merge-request/#code-quality-job","title":"Code Quality job","text":"<p>See Handle MegaLinter errors</p>"},{"location":"salesforce-ci-cd-validate-merge-request/#merge","title":"Merge","text":"<p>Depending on the project organization, this action can be allowed only to Release managers, or to more team members</p> <p>If there are no conflicts and if all control jobs are in success, you can proceed to the merge of the merge request.</p>"},{"location":"salesforce-ci-cd-validate-merge-request/#pre-deployment-actions","title":"Pre deployment actions","text":"<p>If pre-deployment actions are required, perform them before clicking on the button to merge the Merge Request / Pull Request</p> <p>Pre-deployment actions can usually be found in README.md</p> <p>IMPORTANT: If Custom Profiles are deployed for the first time, you MUST create them manually in target org, by cloning them from \"Minimal access\" Profile</p>"},{"location":"salesforce-ci-cd-validate-merge-request/#effective-merge","title":"Effective merge","text":"<ul> <li>Click on Merge<ul> <li>If the merge request is from a minor branch (dev or config User Story), make sure that Squash commits and Delete after merge are checked</li> <li>If the merge request if from a major branch (develop, recette, uat, preprod...), make sure that Squash commits and Delete after merge are NOT checked</li> </ul> </li> </ul> <ul> <li>The merge commit in the target branch will trigger a new job that will automatically deploy the updated source to the corresponding Salesforce org</li> </ul>"},{"location":"salesforce-ci-cd-validate-merge-request/#post-deployment-actions","title":"Post deployment actions","text":"<p>If post-deployment actions are required, perform them before clicking on the button to merge the Merge Request / Pull Request</p> <p>Post-deployment actions can usually be found in README.md</p>"},{"location":"salesforce-ci-cd-work-on-task-configuration/","title":"Perform configuration in your Salesforce org","text":"<ul> <li>Configuration<ul> <li>Api names</li> <li>Access management</li> <li>Flows</li> <li>Hardcoded Ids</li> <li>Images</li> <li>User references</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-work-on-task-configuration/#configuration","title":"Configuration","text":"<p>Please follow as much as possible these recommendations when you work on a CI/CD Salesforce project, otherwise it will generate more release management charges and risks of regressions.</p>"},{"location":"salesforce-ci-cd-work-on-task-configuration/#api-names","title":"Api names","text":"<ul> <li>Do not rename API names (field names, picklist values, pages...)</li> </ul> <ul> <li>Do not prefix API Names with numbers: Git provides historization of updates, so it's better to have elements sorted by alphabetical order than by order of creation</li> </ul> <ul> <li>Do not change the type of custom fields: It forces the release manager to perform manual actions</li> </ul>"},{"location":"salesforce-ci-cd-work-on-task-configuration/#access-management","title":"Access management","text":"<ul> <li>Always use Permission Sets instead of Profiles. If you need profiles, discuss with your release manager.</li> </ul> <ul> <li>If you create a Custom Profile, please notify your release manager.<ul> <li>Before the first deployment, this Profile must be created manually in the target org by cloning \"Minimum access\" Profile</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-work-on-task-configuration/#flows","title":"Flows","text":"<ul> <li>If you need to update Flows, discuss to make sure that no other member of the team is updating the same Flow in another branch/org<ul> <li>If it happens, conflicts are not manageable so one of you will later need to perform the updates again</li> </ul> </li> </ul>"},{"location":"salesforce-ci-cd-work-on-task-configuration/#hardcoded-ids","title":"Hardcoded Ids","text":"<ul> <li>Never use hardcoded Ids in Flows and Formulas (or anywhere else)</li> </ul>"},{"location":"salesforce-ci-cd-work-on-task-configuration/#images","title":"Images","text":"<ul> <li>Use static resources or content assets to store images</li> </ul>"},{"location":"salesforce-ci-cd-work-on-task-configuration/#user-references","title":"User references","text":"<ul> <li>Do not use direct references to users, use Public Groups instead</li> </ul> <ul> <li>Share your reports and email templates with public groups, not named users.</li> </ul>"},{"location":"salesforce-ci-cd-work-on-task-development/","title":"Develop on a Salesforce DX project","text":""},{"location":"salesforce-ci-cd-work-on-task-development/#salesforce-development","title":"Salesforce Development","text":""},{"location":"salesforce-ci-cd-work-on-task-development/#update-code-xml-metadatas","title":"Update code &amp; XML Metadatas","text":"<ul> <li>You can update code and XML metadatas using VsCode IDE</li> <li>When you need to upload the updates to your org, use command </li> <li>If you made updates directly on your org, use command  to retrieve into local files the updates that you performed online with point &amp; click</li> <li>Once you have finished, you can publish your User Story</li> </ul>"},{"location":"salesforce-ci-cd-work-on-task-development/#recommendations","title":"Recommendations","text":"<ul> <li>Use Visual Studio code editor to update code (online Developer Console is not recommended)</li> </ul>"},{"location":"salesforce-ci-cd-work-on-task-install-packages/","title":"Install packages on your org","text":""},{"location":"salesforce-ci-cd-work-on-task-install-packages/#install-packages","title":"Install packages","text":"<p>Packages (managed or not) must never be directly installed in a major org (integration, uat, preprod, production), it has to be done in dev sandbox / scratch orgs</p> <p>If you installed a package on a dev sandbox or scratch org, use DevOps Pipeline -&gt; Installed Packages Manager to retrieve the package configuration before creating your merge request (be careful of what you commit in .sfdx-hardis.yml file !)</p> <ul> <li>Select Deployments if you want the package to be automatically installed on major orgs</li> <li>Select Scratch if you want the package to be automatically installed on new Scratch Orgs</li> </ul> <p></p> <p>Once packages are referenced in <code>.sfdx-hardis.yml</code>, they will automatically be installed on major orgs during CI/CD deployments</p> <p>If you want packages to be installed during deployment check, see with your release manager to define <code>installPackagesDuringCheckDeploy: true</code> in your <code>.sfdx-hardis.yml</code> config file.</p>"},{"location":"salesforce-ci-cd-work-on-task-open-org/","title":"Open your Salesforce org","text":""},{"location":"salesforce-ci-cd-work-on-task-open-org/#open-your-org","title":"Open your org","text":"<p>You can use Salesforce Setup to configure your org as you would do on any sandbox.</p> <ul> <li>Open your Salesforce DX project with Visual Studio Code</li> <li>Open VsCode SFDX Hardis extension by clicking on  in VsCode left bar (loading can task several seconds)</li> <li>Click on  to open your org in browser<ul> <li>If you want to use another org, use menu  to select another one</li> </ul> </li> <li>Perform your configurations in the org</li> <li>Once you have finished, you can publish your User Story</li> </ul>"},{"location":"salesforce-ci-cd-work-on-task-profiles/","title":"Handle Profiles on a Salesforce CI/CD project","text":""},{"location":"salesforce-ci-cd-work-on-task-profiles/#deploy-profiles","title":"Deploy Profiles","text":""},{"location":"salesforce-ci-cd-work-on-task-profiles/#use-permission-sets","title":"Use Permission Sets","text":"<p>In case an attribute is available on Profiles and Permission Sets: USE PERMISSION SETS :)</p> <ul> <li>Apex Class Access (<code>classAccesses</code>)</li> <li>Custom Metadata Type Access (<code>customMetadataTypeAccesses</code>)</li> <li>External Data Source Access (<code>externalDataSourceAccesses</code>)</li> <li>Field Permissions (<code>fieldPermissions</code>)</li> <li>Object Permissions (<code>objectPermissions</code>)</li> <li>Page Access (<code>pageAccesses</code>)</li> <li>User Permissions (<code>userPermissions (except on Admin Profile)</code>)</li> </ul> <p>If you are on a build project, it is recommended to automate Minimize Profile so such attributes are automatically removed from Profiles before Merge Requests.</p>"},{"location":"salesforce-ci-cd-work-on-task-profiles/#tab-visibility","title":"Tab visibility","text":"<p>When you retrieve a profile, standard tabs visibility is not present in the XML.</p> <p>This is quite boring because if you do nothing, Calendar, Tasks, Home or Contact tab visibilities won't be deployed !</p> <p>To avoid that, standard tab visibility must be added in the Profile XML.</p> <p>You can use sfdx-hardis command Fix Profile Tabs to Show / Hide tabs in your Profile XML files.</p>"},{"location":"salesforce-ci-cd-work-on-task/","title":"Work on a User Story on a Salesforce DX project","text":""},{"location":"salesforce-ci-cd-work-on-task/#work-on-a-cicd-project","title":"Work on a CI/CD project","text":"<ul> <li>Open your org</li> </ul> <p>There are a set of recommended rules to follow to help the Release Management to be as fluid as possible</p> <ul> <li>Guidelines for Salesforce configuration</li> <li>Guidelines for Profiles &amp; Permissions Sets</li> <li>Guidelines for Package installation</li> <li>Guidelines for Salesforce Development</li> </ul>"},{"location":"salesforce-deployment-assistant-error-list/","title":"Sfdx-hardis deployment assistant list of errors","text":""},{"location":"salesforce-deployment-assistant-error-list/#salesforce-deployment-assistant-errors-list","title":"Salesforce deployment assistant errors list","text":"<p>sfdx-hardis can help solve solve deployment errors using a predefined list of issues and associated solutions</p> <p>See how to setup sfdx-hardis deployment assistant</p> <p>If you see a deployment error which is not here yet, please add it in this file :)</p>"},{"location":"salesforce-deployment-assistant-error-list/#api-version-error","title":"API Version error","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) The (.*) apiVersion can't be \"([0-9]+)\"</code></li> </ul> <p>Resolution</p> <pre><code>{1} metadata has probably been created/updated in a sandbox already upgraded to next platform version (ex: Sandbox in Summer'23 and Production in Spring'23)\n- First, try to update the api version in the XML of {1} metadata file (decrement the number in &lt;apiVersion&gt;{3}.0&lt;/apiVersion&gt;)\n- If it still doesn't work because the metadata structure has changed between version, you may try a sf project:retrieve:start of the metadata by forcing --api-version at the end of the command.\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#allow-deployment-with-pending-apex-jobs","title":"Allow deployment with pending Apex Jobs","text":"<p>Detection</p> <ul> <li>String: <code>You can bypass this error by allowing deployments with Apex jobs in the Deployment Settings page in Setup.</code></li> </ul> <p>Resolution</p> <pre><code>Go to target org, in Setup -&gt; Deployment Settings -&gt; Activate option \"Allow deployments of components when corresponding Apex jobs are pending or in progress.\"\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#can-not-change-field-type-to-a-formula-field","title":"Can not change field type to a formula field","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Cannot update a field from a Formula to something else</code></li> </ul> <p>Resolution</p> <pre><code>You need to manually delete or rename the field in the target org to allow the deployment to pass\n- First, try to manually delete field {1} in the target org\n- if you can't delete {1}, rename it into {1}_ToDel, then once the deployment done, delete {1}_ToDel\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#can-not-change-type-due-to-existing-data","title":"Can not change type due to existing data","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Cannot change type due to existing data</code></li> </ul> <p>Resolution</p> <pre><code>It is usually not recommended to change types of fields, but if it's really necessary you can:\n- Manually change the type of {1} in the target org\n- If you can't manually change the type:\n  - you may modify the dependencies (Formulas, Flows...) using {1}, so they don't use this field\n  - you can also delete dependencies (Formulas, Flows...) using {1}, but make sure they are deployed again later\n- More help: https://help.salesforce.com/s/articleView?id=000327186&amp;type=1\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#can-not-change-field-type-with-picklist","title":"Can not change field type with picklist","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Cannot change which global value set this picklist uses</code></li> </ul> <p>Resolution</p> <pre><code>You probably updated the type of field {1}, and Salesforce does not allows that with deployments. You can:\n- Try to manually change the type of {1} directly in target org, but it may not be technically possible\n- Delete field {1} in target org: it will be recreated after deployment (but you will loose data on existing records, so be careful if your target is a production org)\n- Create another field with desired type and manage data recovery if the target is a production org\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#can-not-delete-custom-field","title":"Can not delete custom field","text":"<p>Detection</p> <ul> <li>RegExp: <code>This (.*) is referenced elsewhere in salesforce.com</code></li> <li>RegExp: <code>Le champ personnalis\u00e9 (.*) est utilis\u00e9 dans (.*)</code></li> </ul> <p>Resolution</p> <pre><code>Custom field {1} can not be deleted because it is used elsewhere. Remove its references ans try again\nTHIS MAY BE A FALSE POSITIVE if you are just testing the deployment, as destructiveChanges are deployed separately from updated items deployment check\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#can-not-delete-record-type","title":"Can not delete record type","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Cannot delete record type through API</code></li> </ul> <p>Resolution</p> <pre><code>You need to manually delete record type {1} in target org\n- Edit record type {1}, uncheck \"Active\"\n- Delete record type {1}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#can-not-find-folder","title":"Can not find folder","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Cannot find folder:(.*)</code></li> </ul> <p>Resolution</p> <pre><code>Folder {2} is missing.\n- If folder {2} is existing in sources, add it in related package.xml\n- If folder {2} is not existing in DX sources, please use sf hardis:project:clean:retrievefolders to retrieve it\n- If both previous solutions did not work, go create manually folder {2} in target org\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#can-not-find-user","title":"Can not find user","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Cannot find a user that matches any of the following usernames</code></li> </ul> <p>Resolution</p> <pre><code>You made reference to username(s) in {1}, and those users probably do not exist in target org.\n- Do not use named users, but user public groups for assignments -&gt; https://help.salesforce.com/s/articleView?id=sf.creating_and_editing_groups.htm&amp;type=5\n- or Create matching user(s) in the target deployment org\n- or Remove the XML part referring to hardcoded usernames\n\nExample of XML you have to remove in {1}:\n\n&lt;folderShares&gt;\n  &lt;accessLevel&gt;Manage&lt;/accessLevel&gt;\n  &lt;sharedTo&gt;nicolas.vuillamy@hardis-scratch-po-tgci-root-develop_20220412_0604.com&lt;/sharedTo&gt;\n  &lt;sharedToType&gt;User&lt;/sharedToType&gt;\n&lt;/folderShares&gt;\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#can-not-find-user-2","title":"Can not find user (2)","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) In field: (.*) - no User named (.*) found</code></li> </ul> <p>Resolution</p> <pre><code>You made reference to username {3} in {1}, and it probably does not exist in the target org.\n- Do not use named users, but user public groups for assignments -&gt; https://help.salesforce.com/s/articleView?id=sf.creating_and_editing_groups.htm&amp;type=5\n- or Create matching user {3} in the target deployment org\n- or open {1} metadata and remove the XML part referring to hardcoded username {3}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#cannot-update-a-field-to-a-summary-from-something-else","title":"Cannot update a field to a Summary from something else","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Cannot update a field to a (.*) from something else</code></li> </ul> <p>Resolution</p> <pre><code>You probably updated the type of field {1} to type {2}, and Salesforce does not allows that with deployments. You can:\n- Try to manually change the type of {1} directly in target org, but it may not be technically possible\n- Delete field {1} in target org: it will be recreated after deployment (but you will loose data on existing records, so be careful if your target is a production org)\n- Create another field with desired type and manage data recovery if the target is a production org\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#change-matching-rule","title":"Change Matching Rule","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Before you change a matching rule, you must deactivate it</code></li> </ul> <p>Resolution</p> <pre><code>To be able to deploy, you must go in target org setup to manually deactivate matching rule {1}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#condition-missing-reference","title":"Condition missing reference","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) field integrity exception: unknown \\(A condition has a reference to (.*), which doesn't exist.\\)</code></li> </ul> <p>Resolution</p> <pre><code>There is a reference to {2} in {1}, and {2} is not found. You can either:\n- Add {2} in your deployment sources and make sure it is named in package.xml\n- Remove the reference to {2} in {1}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#couldnt-retrieve-or-load-information-on-the-field","title":"Couldn't retrieve or load information on the field","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Something went wrong. We couldn't retrieve or load the information on the field: (.*)\\.</code></li> </ul> <p>Resolution</p> <pre><code>There is a reference to {2} in {1}, and {2} is not found. You can either:\n- Commit {2} in your deployment sources and make sure it is named in package.xml\n- Remove the reference to {2} in {1}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#custom-object-not-found","title":"Custom object not found","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) In field: field - no CustomObject named (.*) found</code></li> </ul> <p>Resolution</p> <pre><code>A reference to a custom object {2} is not found in {1}:\n- If you renamed the custom object, do a search/replace in sources with previous object name and new object name\n- If you deleted the custom object, or if you don't want to deploy it, do a search on the custom object name, and remove XML elements referencing it\n- If the object should exist, make sure it is in force-app/main/default/objects and that the object name is in manifest/package.xml in CustomObject section\nYou may also have a look to command sf hardis:project:clean:references\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#custom-field-not-found","title":"Custom field not found","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) In field: (.*) - no CustomField named (.*)\\.(.*) found</code></li> </ul> <p>Examples</p> <ul> <li><code>Error PS_Admin In field: field - no CustomField named User.expcloud__Portal_Username__c found</code></li> </ul> <p>Resolution</p> <pre><code>A reference to a custom field {3}.{4} is not found in {1}:\n- If you renamed {3}.{4}, do a search/replace in {1} with previous field name and {4}\n- If you deleted {3}.{4}, or if you don't want to deploy it, do a search on {4} in all sources, and remove all XML elements referring to {3}.{4} (except in destructiveChanges.xml)\n- If {3}.{4} should exist, make sure it is in force-app/main/default/objects/{3}/fields and that {3}.{4} is in manifest/package.xml in CustomField section\n- If {3}.{4} is standard, the error is because {3}.{4} is not available in the org you are trying to deploy to. You can:\n  - Remove the reference to {4} in the XML of {1} ( maybe sf hardis:project:clean:references can clean automatically for you ! )\n  - Activate the required features/license in the target org\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#mandatory-custom-field-can-not-be-in-a-profilepermission-set","title":"Mandatory custom field can not be in a profile/permission set","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) You cannot deploy to a required field: (.*)</code></li> </ul> <p>Resolution</p> <pre><code>- Search for {2} in source file XML of {1}, then remove the entries matching the results\nExample of element to delete:\n&lt;fieldPermissions&gt;\n  &lt;editable&gt;true&lt;/editable&gt;\n  &lt;field&gt;{2}&lt;/field&gt;\n  &lt;readable&gt;true&lt;/readable&gt;\n&lt;/fieldPermissions&gt;\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#custom-metadata-entry-not-found","title":"Custom metadata entry not found","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) In field: (.*) - no CustomMetadata named (.*) found</code></li> </ul> <p>Resolution</p> <pre><code>A reference to a custom metadata {3} of type {2} is not found in {1}:\n- Are you sure you deployed {3} ?\n- If you use a package.xml, is {3} present within type CustomMetadata ?\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#expired-access-refresh-token","title":"Expired Access / Refresh Token","text":"<p>Detection</p> <ul> <li>String: <code>expired access/refresh token</code></li> </ul> <p>Resolution</p> <pre><code>Run command \"Select another org\" from Status panel (or sf hardis:org:select) to authenticate again to your org\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-data-category-group","title":"Missing Data Category Group","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) In field: DeveloperName - no DataCategoryGroup named (.*) found</code></li> </ul> <p>Resolution</p> <pre><code>If Data Category Group {2} is not existing yet in target org, you might need to:\n- create it manually in target org before deployment\n- comment DataCategoryGroup in {1} XML\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#dependent-class-is-invalid-and-needs-recompilation","title":"Dependent class is invalid and needs recompilation","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Dependent class is invalid and needs recompilation</code></li> </ul> <p>Resolution</p> <pre><code>Solve the other errors and this one will disappear !\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#duplicate-value-platform-action-id-list","title":"Duplicate value Platform Action Id List","text":"<p>Detection</p> <ul> <li>String: <code>duplicate value found: PlatformActionListId duplicates value on record with id</code></li> </ul> <p>Resolution</p> <pre><code>There are probably issue with conflict management. Open the XML of the source item, and replace all &lt;sortOrder&gt; numbers to make an ascending order, starting with 0\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#duplicate-label","title":"Duplicate label","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Duplicate label: (.*)</code></li> </ul> <p>Resolution</p> <pre><code>You probably renamed the picklist API name for {2}. Please update manually the picklist {1} in the target org to avoid to have a duplicate label\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-e-mail-template","title":"Missing e-mail template","text":"<p>Detection</p> <ul> <li>RegExp: <code>In field: template - no EmailTemplate named (.*) found</code></li> </ul> <p>Resolution</p> <pre><code>An email template should be present in the sources. To retrieve it, you can run:\nsf project retrieve start -m EmailTemplate:{1} -o YOUR_ORG_USERNAME\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#empty-source-items","title":"Empty source items","text":"<p>Detection</p> <ul> <li>String: <code>Required field is missing: sharingOwnerRules</code></li> <li>String: <code>Required field is missing: standardValue</code></li> <li>String: <code>Required field is missing: valueTranslation</code></li> </ul> <p>Resolution</p> <pre><code>You probably retrieved empty items, that must not be included within the SFDX project\nTo remove them, please run sfdx:hardis:project:clean:emptyitems\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#enable-crm-analytics","title":"Enable CRM Analytics","text":"<p>Detection</p> <ul> <li>String: <code>It should be created by enabling the CRM Analytics Cloud preference</code></li> </ul> <p>Resolution</p> <pre><code>You must enable CRM Analytics (ex Wave, Einstein Analytics &amp; Tableau CRM) in the target org.\nYou probably also need to add CRM Analytics Admin Permission Set assignment to the deployment user\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#error-parsing-file","title":"Error parsing file","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Error parsing file: (.*)</code></li> </ul> <p>Resolution</p> <pre><code>There has been an error parsing the XML file of {1}: {2}\n- Open file {1} and look where the error can be ! (merge issue, typo, XML tag not closed...)\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#formula-picklist-field-issue","title":"Formula picklist field issue","text":"<p>Detection</p> <ul> <li>RegExp: <code>Field:(.*) must not be Required</code></li> </ul> <p>Resolution</p> <pre><code>You probably made read only field {1} that was required before.\nFind field {1} in the layout source XML, then replace Required by Readonly\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#field-not-available-for-element","title":"Field not available for element","text":"<p>Detection</p> <ul> <li>RegExp: <code>Field (.*) is not available for</code></li> </ul> <p>Resolution</p> <pre><code>You probably changed the type of field {1}.\nFind field {1} in the source XML, and remove the section using it\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#formula-picklist-field-issue_1","title":"Formula picklist field issue","text":"<p>Detection</p> <ul> <li>String: <code>Les champs de liste de s\u00e9lection sont pris en charge uniquement dans certaines fonctions.</code></li> </ul> <p>Resolution</p> <pre><code>You probably changed the type of a field that is used in a formula.\nUpdate the formula to use a field compliant with formulas.\nMore details at https://help.salesforce.com/articleView?id=sf.tips_on_building_formulas.htm&amp;type=5\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#flow-must-be-deleted-manually","title":"Flow must be deleted manually","text":"<p>Detection</p> <ul> <li>RegExp: <code>.flow (.*) insufficient access rights on cross-reference id</code></li> </ul> <p>Resolution</p> <pre><code>Flow {1} can not be deleted using deployments, please delete it manually in the target org using menu Setup -&gt; Flows , context menu on {1} -&gt; View details and versions -&gt; Deactivate all versions -&gt; Delete flow\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#insufficient-access-rights-on-cross-reference-id","title":"Insufficient access rights on cross-reference id","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) insufficient access rights on cross-reference id</code></li> </ul> <p>Resolution</p> <pre><code>- If {1} is a Flow, it can not be deleted using deployments, please delete it manually in the target org using menu Setup -&gt; Flows , context menu on {1} -&gt; View details and versions -&gt; Deactivate all versions -&gt; Delete flow\n- If you changed a custom field from unique to not unique, you need to manually make the change in the target org\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#invalid-formula-grouping-context","title":"Invalid formula grouping context","text":"<p>Detection</p> <ul> <li>String: <code>Invalid custom summary formula definition: You must select a grouping context to use any report summary function</code></li> </ul> <p>Resolution</p> <pre><code>You need to update your Report definition. See workaround here -&gt; https://salesforce.stackexchange.com/questions/294850/grouping-error-with-prevgroupval-function\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#invalid-report-type","title":"Invalid report type","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) invalid report type</code></li> </ul> <p>Resolution</p> <pre><code>Report type is missing for report {1}\n- Open report {1} to se what report type is used\n- Retrieve the report type from an org and add it to the sfdx sources\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#invalid-scopemine-not-allowed","title":"Invalid scope:Mine, not allowed","text":"<p>Detection</p> <ul> <li>String: <code>Invalid scope:Mine, not allowed</code></li> </ul> <p>Resolution</p> <pre><code>Replace Mine by Everything in the list view SFDX source XML.\nHave a look at this command to manage that automatically \ud83d\ude0a\nhttps://sfdx-hardis.cloudity.com/hardis/org/fix/listviewmine/ \n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#invalid-field-in-related-list","title":"Invalid field in related list","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Invalid field:(.*) in related list:(.*)</code></li> </ul> <p>Resolution</p> <pre><code>Field {2} is unknown. You can:\n- Activate the related feature license or option to make {2} existing in target org\n- Update XML of {1} to remove reference to field {2} in the related list {3}\n- Update XML of {1} to remove the whole related list {3}\nExample of XML to remove:\n&lt;relatedLists&gt;\n  &lt;fields&gt;SOLUTION.ISSUE&lt;/fields&gt;\n  &lt;fields&gt;SOLUTION.SOLUTION_NUMBER&lt;/fields&gt;\n  &lt;fields&gt;SOLUTION.STATUS&lt;/fields&gt;\n  &lt;fields&gt;CORE.USERS.ALIAS&lt;/fields&gt;\n  &lt;relatedList&gt;RelatedSolutionList&lt;/relatedList&gt;\n&lt;/relatedLists&gt;\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#invalid-field-for-upsert","title":"Invalid field for upsert","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Invalid field for upsert, must be an External Id custom or standard indexed field: (.*) \\((.*)\\)</code></li> </ul> <p>Resolution</p> <pre><code>You tried to use field {2} for an upsert call in {1}.\n- Is it declared as externalId ?\n- Is the customIndex source file present in the deployment ?\n- If it is declared as externalId and customIndex is present, you may have to go manually define the field as externalId in the target org\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#invalid-type","title":"Invalid type","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Invalid type: (.*) \\((.*)\\)</code></li> </ul> <p>Resolution</p> <pre><code>Apex error in {1} with unknown type {2} at position {3}. If {2} is a class name, try to fix it, or maybe it is missing in the files or in package.xml !\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#campaign-can-not-be-updated","title":"Campaign can not be updated","text":"<p>Detection</p> <ul> <li>String: <code>The object \"Campaign\" can't be updated</code></li> </ul> <p>Resolution</p> <pre><code>Add \"MarketingUser\" in project-scratch-def.json features\nIf it is already done, you may manually check \"MarketingUser\" field on the scratch org user\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-field-middlename","title":"Missing field MiddleName","text":"<p>Detection</p> <ul> <li>String: <code>field MiddleName</code></li> <li>String: <code>Variable does not exist: MiddleName</code></li> </ul> <p>Resolution</p> <pre><code>MiddleNames must be activated in the target org.\n- Help: https://help.salesforce.com/articleView?id=000332623&amp;type=1&amp;mode=1\n- Scratch org setting:\n\"nameSettings\": {\n  \"enableMiddleName\": true\n}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-field-suffix","title":"Missing field Suffix","text":"<p>Detection</p> <ul> <li>String: <code>field Suffix</code></li> </ul> <p>Resolution</p> <pre><code>Suffix must be activated in the target org.\n- Help: https://help.salesforce.com/articleView?id=000332623&amp;type=1&amp;mode=1\n- Scratch org setting:\n\"nameSettings\": {\n  \"enableNameSuffix\": true\n},\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-field-syncedquoteid","title":"Missing field SyncedQuoteId","text":"<p>Detection</p> <ul> <li>String: <code>field SyncedQuoteId</code></li> <li>String: <code>Error  force-app/main/default/objects/Quote/Quote.object-meta.xml</code></li> <li>String: <code>Error  force-app/main/default/objects/Opportunity/fields/SyncedQuoteId.field-meta.xml</code></li> </ul> <p>Resolution</p> <pre><code>Quotes must be activated in the target org.\n- Help: https://help.salesforce.com/articleView?id=sf.quotes_enable.htm&amp;type=5\n- Scratch org setting:\n\"quoteSettings\": {\n  \"enableQuote\": true\n}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-feature-contacttomultipleaccounts","title":"Missing feature ContactToMultipleAccounts","text":"<p>Detection</p> <ul> <li>String: <code>no CustomObject named AccountContactRelation found</code></li> <li>String: <code>Invalid field:ACCOUNT.NAME in related list:RelatedContactAccountRelationList</code></li> </ul> <p>Resolution</p> <pre><code>Contacts to multiple accounts be activated in the target org.\n- Help: https://help.salesforce.com/articleView?id=sf.shared_contacts_set_up.htm&amp;type=5\n- Scratch org setting:\n\"features\": [\"ContactsToMultipleAccounts\"]\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-feature-chatter-collaboration-group","title":"Missing feature Chatter Collaboration Group","text":"<p>Detection</p> <ul> <li>String: <code>CollaborationGroup</code></li> </ul> <p>Resolution</p> <pre><code>Quotes must be activated in the target org.\n- Org: Setup -&gt; Chatter settings -&gt; Allow Records in Groups\n- Scratch org setting:\n\"chatterSettings\": {\n  \"allowRecordsInChatterGroup\": true\n},\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-feature-enhanced-notes","title":"Missing feature Enhanced notes","text":"<p>Detection</p> <ul> <li>String: <code>FeedItem.ContentNote</code></li> </ul> <p>Resolution</p> <pre><code>Enhanced Notes must be activated in the target org.\n- Org: Setup -&gt; Notes settings -&gt; Enable Notes\n- Scratch org setting:\n\"enhancedNotesSettings\": {\n  \"enableEnhancedNotes\": true\n},\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-feature-ideas-notes","title":"Missing feature Ideas notes","text":"<p>Detection</p> <ul> <li>String: <code>Idea.InternalIdeasIdeaRecordType</code></li> </ul> <p>Resolution</p> <pre><code>Ideas must be activated in the target org.\n- Org: https://help.salesforce.com/articleView?id=networks_enable_ideas.htm&amp;type=0\n- Scratch org setting:\n\"ideasSettings\": {\n  \"enableIdeas\": true\n}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-feature-live-agent","title":"Missing feature Live Agent","text":"<p>Detection</p> <ul> <li>String: <code>FeedItem.ContentNote</code></li> </ul> <p>Resolution</p> <pre><code>Live Agent must be activated in the target org.\n- Org: Setup -&gt; Live Agent Settings -&gt; Enable Live Agent\n- Scratch org feature: LiveAgent\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-feature-product-request","title":"Missing feature Product Request","text":"<p>Detection</p> <ul> <li>String: <code>ProductRequest</code></li> </ul> <p>Resolution</p> <pre><code>ProductRequest object is not available in the target org.\nMaybe you would like to clean its references within Profiles / PS using the following command ?\nsf hardis:project:clean:references , then select \"ProductRequest references\"\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-feature-social-customer-service","title":"Missing feature Social Customer Service","text":"<p>Detection</p> <ul> <li>String: <code>SocialPersona.AreWeFollowing</code></li> </ul> <p>Resolution</p> <pre><code>Social Custom Service must be activated in the target org.\n- Org: Setup -&gt; https://help.salesforce.com/articleView?id=sf.social_customer_service_setup_enable.htm&amp;type=5\n- Scratch org feature: SocialCustomerService\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-feature-translation-workbench","title":"Missing feature Translation Workbench","text":"<p>Detection</p> <ul> <li>RegExp: <code>report-meta.xml(.*)filterlanguage</code></li> </ul> <p>Resolution</p> <pre><code>Translation workbench must be activated in the target org.\n- Org: Setup -&gt; https://help.salesforce.com/articleView?id=sf.customize_wbench.htm&amp;type=5\n- Scratch org:\n\"languageSettings\": {\n  \"enableTranslationWorkbench\":  true,\n  \"enableEndUserLanguages\": true\n}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-feature-opportunity-teams","title":"Missing feature Opportunity Teams","text":"<p>Detection</p> <ul> <li>String: <code>OpportunityTeam</code></li> </ul> <p>Resolution</p> <pre><code>Opportunity Teams must be activated in the target org.\n- Org: Setup -&gt; Opportunity Team Settings -&gt; Enable Team Selling\n- Scratch org:\n\"opportunitySettings\": {\n  \"enableOpportunityTeam\": true\n}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-feature-workcom","title":"Missing Feature Work.Com","text":"<p>Detection</p> <ul> <li>String: <code>WorkBadgeDefinition</code></li> </ul> <p>Resolution</p> <pre><code>Work.com feature must be activated in the target org.\n- Org &amp; Scratch: https://developer.salesforce.com/docs/atlas.en-us.workdotcom_dev_guide.meta/workdotcom_dev_guide/wdc_cc_setup_dev_org.htm\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-multi-currency-field","title":"Missing multi-currency field","text":"<p>Detection</p> <ul> <li>RegExp: <code>A reference to a custom field (.*)CurrencyIsoCode</code></li> </ul> <p>Resolution</p> <pre><code>You probably need to activate MultiCurrency (from Setup -&gt; Company information)\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-object-referenced-in-packagexml","title":"Missing object referenced in package.xml","text":"<p>Detection</p> <ul> <li>RegExp: <code>An object (.*) of type (.*) was named in package.xml, but was not found in zipped directory</code></li> </ul> <p>Resolution</p> <pre><code>You can either:\n- Update the package.xml to remove the reference to the missing {2} {1}\n- Add the missing {2} {1} in your project source files\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-quick-action","title":"Missing Quick Action","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) In field: QuickAction - no QuickAction named (.*) found</code></li> </ul> <p>Resolution</p> <pre><code>QuickAction {2} referred in {1} is unknown. You can either:\n- Make sure your QuickAction {2} is present in source files and in package.xml\n- If {2} is a standard QuickAction, activate related feature in target org\n- Solve other errors that could impact QuickAction {2}\n- Remove QuickAction {2} in the source XML of {1}. Example of XML to remove below:\n&lt;quickActionListItems&gt;\n  &lt;quickActionName&gt;FeedItem.RypplePost&lt;/quickActionName&gt;\n&lt;/quickActionListItems&gt;\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-report","title":"Missing report","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) The (.*) report chart has a problem with the \"reportName\" field</code></li> </ul> <p>Resolution</p> <pre><code>{1} is referring to unknown report {2}. To retrieve it, you can run:\n- sf project retrieve start -m Report:{2} -o YOUR_ORG_USERNAME\n- If it fails, looks for the report folder and add it before report name to the retrieve command (ex: MYFOLDER/MYREPORTNAME)\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-sales-team","title":"Missing Sales Team","text":"<p>Detection</p> <ul> <li>String: <code>related list:RelatedAccountSalesTeam</code></li> </ul> <p>Resolution</p> <pre><code>Account Teams must be activated in the target org.\n- Org: Setup -&gt; Account Teams -&gt; Enable\n- Scratch org setting:\n\"accountSettings\": {\n  \"enableAccountTeams\": true\n}\n}\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#sharing-operation-already-in-progress","title":"sharing operation already in progress","text":"<p>Detection</p> <ul> <li>String: <code>sharing operation already in progress</code></li> </ul> <p>Resolution</p> <pre><code>You can not deploy multiple SharingRules at the same time. You can either:\n- Remove SharingOwnerRules and SharingRule from package.xml (so it becomes a manual operation)\n- Use sf hardis:work:save to generate a deploymentPlan in .sfdx-hardis.json,\n- If you are trying to create a scratch org, add DeferSharingCalc in features in project-scratch-def.json\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#network-issue","title":"Network issue","text":"<p>Detection</p> <ul> <li>String: <code>ECONNABORTED</code></li> <li>String: <code>ECONNRESET</code></li> </ul> <p>Resolution</p> <pre><code>The network connection has been aborted, this is a purely technical issue.\nTry again, and if you still see errors, check the status of Salesforce instance on https://status.salesforce.com\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#not-available-for-deploy-for-this-organization","title":"Not available for deploy for this organization","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Not available for deploy for this organization</code></li> </ul> <p>Resolution</p> <pre><code>The user you use for deployments probably lacks of the rights (Profiles, Permission sets...) to manage {1}.\n- Assign the deployment user to the good Permission Sets, or modify its profile rights, then try again\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#not-valid-sharing-model","title":"Not valid sharing model","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) (.*) is not a valid sharing model for (.*) when (.*) sharing model is (.*)</code></li> </ul> <p>Resolution</p> <pre><code>It seems that Sharing Models of {1} and {4} are not compatible in target org.\n- Use compatible sharing models between {1} and {4} by updating Sharing model of {1} or {4}\n- Make sure that sfdx sources {1}.object-meta.xml and {4}.object-meta.xml and in the files, and that {1} and {4} are in package.xml in CustomObject block\n- You may directly update sharingModel in XML. For example, replace &lt;sharingModel&gt;ReadWrite&lt;/sharingModel&gt; by &lt;sharingModel&gt;Private&lt;/sharingModel&gt; in {3}.object-meta.xml\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#picklist-sharing-is-not-supported","title":"Picklist sharing is not supported","text":"<p>Detection</p> <ul> <li>String: <code>Picklist sharing is not supported</code></li> </ul> <p>Resolution</p> <pre><code>You probably changed the type of a field.\nGo manually make the change in the target org, so the deployment will pass\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#picklist-value-not-found","title":"Picklist value not found","text":"<p>Detection</p> <ul> <li>RegExp: <code>Picklist value: (.*) in picklist: (.*) not found</code></li> </ul> <p>Resolution</p> <pre><code>Sources have references to value {1} of picklist {2}\n- If picklist {2} is standard, add the picklist to sfdx sources by using \"sf project retrieve start -m StandardValueSet:{2}\", then save again\n- Else, perform a search in all code of {1}, then remove XML tags referring to {1} (for example in record types metadatas)\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#please-choose-a-different-name","title":"Please choose a different name","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) This (.*) already exists or has been previously used(.*)Please choose a different name.</code></li> </ul> <p>Resolution</p> <pre><code>- Rename {1} in the target org, then try again the deployment. if it succeeds, delete the renamed item.\n- or Delete {1} in the target org, then try again the deployment\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#missing-profile-default-application","title":"Missing profile default application","text":"<p>Detection</p> <ul> <li>String: <code>You can't remove the only default app from the profile.</code></li> </ul> <p>Resolution</p> <pre><code>You must have a default application for a profile. You can:\n - Update it in UI\n - Update the XML of the profile to set \"true\" in the &lt;default&gt; tag of one of the applicationVisibilities item.\n Ex:\n &lt;applicationVisibilities&gt;\n    &lt;application&gt;standard__LightningSales&lt;/application&gt;\n    &lt;default&gt;true&lt;/default&gt;\n    &lt;visible&gt;true&lt;/visible&gt;\n&lt;/applicationVisibilities&gt;\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#crm-analytics-a-recipe-must-specify-a-dataflow","title":"CRM Analytics: A Recipe must specify a DataFlow","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) A Recipe must specify a Dataflow</code></li> </ul> <p>Resolution</p> <pre><code>You must include related WaveDataFlow {1} in sources (and probably in package.xml too).\nTo retrieve it, run: sf project retrieve start -m WaveDataFlow:{1} -u SOURCE_ORG_USERNAME\nYou can also retrieve all analytics sources in one shot using sf hardis:org:retrieve:source:analytics -u SOURCE_ORG_USERNAME\n  - https://salesforce.stackexchange.com/a/365453/33522\n  - https://help.salesforce.com/s/articleView?id=000319274&amp;type=1\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#record-type-not-found","title":"Record Type not found","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) In field: recordType - no RecordType named (.*) found</code></li> </ul> <p>Resolution</p> <pre><code>An unknown record type {2} is referenced in {1}\n- If record type {2} is not supposed to exist, perform a search in all files of {1}, then remove matching XML elements referring to this record type\n- If record type {2} is supposed to exist, you may have to create it manually in the target org to make the deployment pass\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#objects-rights-on-a-role-is-below-org-default","title":"Objects rights on a role is below org default","text":"<p>Detection</p> <ul> <li>String: <code>access level below organization default</code></li> </ul> <p>Resolution</p> <pre><code>Your org wide settings default must be lower than the level defined in roles:\n- If you are in a scratch org, it can be fixable using \"objectProperties\" in project-scratch-def.json (see \"Set Object-Level Sharing Settings\" paragraph in page https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_def_file.htm)\n- If you are in a sandbox/dev/prod org, you need to update default org wide settings before deployment. See https://www.sfdcpoint.com/salesforce/organization-wide-defaults-owd-in-salesforce/\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#unsupported-sharing-configuration","title":"Unsupported sharing configuration","text":"<p>Detection</p> <ul> <li>RegExp: <code>not supported for (.*) since it's org wide default is</code></li> </ul> <p>Resolution</p> <pre><code>Consistency error between {1} sharing settings and {1} object configuration\nPlease check https://salesforce.stackexchange.com/questions/260923/sfdx-deploying-contact-sharing-rules-on-a-fresh-deployment\nIf you already did that, please try again to run the job\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#a-sharing-rule-may-be-useless","title":"A sharing rule may be useless","text":"<p>Detection</p> <ul> <li>String: <code>Required field is missing: sharingCriteriaRules</code></li> </ul> <p>Resolution</p> <pre><code>Are you sure you need this sharing rule ? You may remove it from the sfdx project\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#sharing-recalculation-lock","title":"Sharing recalculation lock","text":"<p>Detection</p> <ul> <li>String: <code>because it interferes with another operation already in progress</code></li> <li>String: <code>Le calcul de partage demand\u00e9 ne peut \u00eatre trait\u00e9 maintenant car il interf\u00e8re avec une autre op\u00e9ration en cours</code></li> </ul> <p>Resolution</p> <pre><code>If you changed a field from MasterDetail to Lookup, you must do it manually in the target org before being able to deploy\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#send-email-is-disabled","title":"Send email is disabled","text":"<p>Detection</p> <ul> <li>String: <code>Send Email is disabled or activities are not allowed</code></li> <li>String: <code>Unknown user permission: SendExternalEmailAvailable</code></li> </ul> <p>Resolution</p> <pre><code>Go to Email -&gt; Deliverability -&gt; Select value \"All emails\"\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#sort-order-must-be-in-sequential-order","title":"Sort order must be in sequential order","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) SortOrder must be in sequential order from</code></li> </ul> <p>Resolution</p> <pre><code>You probably have a default DuplicateRule in the target org. Retrieve it from target org, or delete it manually in target org, so you can deploy.\nRef: https://developer.salesforce.com/forums/?id=9060G000000I6SoQAK\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#async-exception-in-test-class","title":"Async exception in test class","text":"<p>Detection</p> <ul> <li>RegExp: <code>System.AsyncException: (.*) Apex</code></li> </ul> <p>Resolution</p> <pre><code>This may be a test class implementation issue in {1}.\nPlease check https://developer.salesforce.com/forums/?id=9060G0000005kVLQAY\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#test-classes-with-0-coverage","title":"Test classes with 0% coverage","text":"<p>Detection</p> <ul> <li>RegExp: <code>0%</code></li> </ul> <p>Resolution</p> <pre><code>Please make sure that none of the test classes are 0% covered\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#can-not-test-item-deployment-in-simulation-mode","title":"Can not test item deployment in simulation mode","text":"<p>Detection</p> <ul> <li>RegExp: <code>Test only deployment cannot update</code></li> </ul> <p>Resolution</p> <pre><code>THIS IS A FALSE POSITIVE\nWhen effective deployment will happen, it should pass\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#unknown-user-permission-createauditfields","title":"Unknown user permission: CreateAuditFields","text":"<p>Detection</p> <ul> <li>String: <code>Unknown user permission: CreateAuditFields</code></li> </ul> <p>Resolution</p> <pre><code>You need to enable the \"Create audit field\" permission in the target org\nPlease check https://help.salesforce.com/articleView?id=000334139&amp;type=1&amp;mode=1\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#unknown-user-permission-fieldserviceaccess","title":"Unknown user permission: FieldServiceAccess","text":"<p>Detection</p> <ul> <li>String: <code>Unknown user permission: FieldServiceAccess</code></li> </ul> <p>Resolution</p> <pre><code>You need to enable the \"Field Service Access\" permission in the target org\nPlease check https://help.salesforce.com/articleView?id=sf.fs_enable.htm&amp;type=5\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#unknown-user-permission","title":"Unknown user permission","text":"<p>Detection</p> <ul> <li>String: <code>Unknown user permission:</code></li> </ul> <p>Resolution</p> <pre><code>You can:\n- enable the related permission in the target org\n- or remove references to the permission in source XML files (Probably a Profile or a Permission set)\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#variable-does-not-exist","title":"Variable does not exist","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Variable does not exist: (.*) \\((.*)\\)</code></li> </ul> <p>Resolution</p> <pre><code>Apex error in {1} with unknown variable {2} at position {3}. If {2} is a class name, try to fix it, or maybe it is missing in the files or in package.xml !\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#visibility-is-not-allowed-for-type","title":"Visibility is not allowed for type","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) set the visibility for a (.*) to Protected unless you are in a developer</code></li> </ul> <p>Resolution</p> <pre><code>Update the visibility of {1} to \"Public\"\n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#tableau-crm-wave-digest-error","title":"Tableau CRM / Wave digest error","text":"<p>Detection</p> <ul> <li>String: <code>Fix the sfdcDigest node errors and then upload the file again</code></li> </ul> <p>Resolution</p> <pre><code>Go to the target org, open profile \"Analytics Cloud Integration User\" and add READ rights to the missing object fields \n</code></pre>"},{"location":"salesforce-deployment-assistant-error-list/#xml-item-appears-more-than-once","title":"XML item appears more than once","text":"<p>Detection</p> <ul> <li>RegExp: <code>Error (.*) Field:(.*), value:(.*) appears more than once</code></li> </ul> <p>Resolution</p> <pre><code>You probably made an error while merging conflicts\nLook for {3} in the XML of {1}\nIf you see two {2} XML blocks with {3}, please decide which one you keep and remove the other one\n</code></pre>"},{"location":"salesforce-deployment-assistant-home/","title":"Sfdx-hardis deployment assistant","text":""},{"location":"salesforce-deployment-assistant-home/#sfdx-hardis-deployment-assistant","title":"sfdx-hardis Deployment Assistant","text":""},{"location":"salesforce-deployment-assistant-home/#salesforce-devops-ai-integration","title":"Salesforce DevOps AI Integration","text":"<p>Deployment errors are common and quite boring, right ?</p> <p>Sfdx-hardis deployment assistant will help you to solve them, even if you are not using sfdx-hardis CI/CD pipelines !</p> <p>The assistant contain core rules and can optionally be integrated with AI to provide you the best guidance :)</p> <p></p>"},{"location":"salesforce-deployment-assistant-home/#flow-visual-git-diff","title":"Flow Visual Git Diff","text":"<p>In addition to deployment tips, comments will be posted on PRs with Visual Git Diff for Flows, that will:</p> <ul> <li>Visually show you the differences on a diagram</li> <li>Display the update details without having to open any XML !</li> </ul> <p>\ud83d\udfe9 = added</p> <p>\ud83d\udfe5 = removed</p> <p>\ud83d\udfe7 = updated</p> <p></p> <p></p>"},{"location":"salesforce-deployment-assistant-home/#integrations","title":"Integrations","text":"<p>Deployment assistant will provide tips in Pull Request comments (GitHub, Gitlab, Azure, Bitbucket).</p> <p>It will also provide tips in console log.</p> <p></p>"},{"location":"salesforce-deployment-assistant-home/#setup","title":"Setup","text":"<p>Just follow the instructions to be ready in a few minutes</p> <ul> <li>sfdx-hardis deployment assistant setup instructions</li> <li>sfdx-hardis AI setup instructions (requires an Openai API key)</li> </ul>"},{"location":"salesforce-deployment-assistant-setup/","title":"Sfdx-hardis deployment assistant setup","text":""},{"location":"salesforce-deployment-assistant-setup/#setup-salesforce-deployment-assistant","title":"Setup Salesforce Deployment Assistant","text":""},{"location":"salesforce-deployment-assistant-setup/#configure-integrations","title":"Configure integrations","text":"<p>Make sure to have configured your GitHub, Gitlab, Azure Pipelines or BitBucket integration so the deployment assistant can post its help in Pull Request comments.</p> <p>If you want to supercharge Salesforce deployment assistant with AI, process sfdx-hardis AI setup.</p> <p>You can also receive Slack, Ms Teams and Email notifications in case of successful deployment.</p> <p>If you configure JIRA or Generic Ticketing integrations, ticket numbers will be extracted and displayed in the Pull Request comment.</p>"},{"location":"salesforce-deployment-assistant-setup/#using-sfdx-hardis-cicd","title":"Using sfdx-hardis CI/CD","text":"<p>If you are using sfdx-hardis CI/CD, you are already all set !</p>"},{"location":"salesforce-deployment-assistant-setup/#using-custom-cicd-pipeline","title":"Using custom CI/CD pipeline","text":"<p>Replace your calls to Salesforce CLI by calls to sfdx-hardis commands wrapper.</p> sfdx command Corresponding sfdx-hardis wrapper command sf project deploy start sf hardis:project:deploy:start sf project deploy validate sf hardis:project:deploy:validate sf project deploy quick sf hardis:project:deploy:quick sfdx force:source:deploy (removed on 6 november) sf hardis:source:deploy sfdx force:source:push (removed on 6 november) sf hardis:source:push sfdx force:mdapi:deploy (removed on 6 november) sf hardis:mdapi:deploy <p>Configure your GitHub, Gitlab, Azure Pipelines or BitBucket integration so the deployment assistant can post its help in Pull Request comments.</p> <p>Notes:</p> <ul> <li>sfdx-hardis deployment assistant now works better with --json option please use it :)</li> </ul>"},{"location":"salesforce-deployment-assistant-setup/#example","title":"Example","text":"<p>Replace:</p> <p><code>sf project:deploy:start -x manifest/package.xml --checkonly</code></p> <p>with:</p> <p><code>sf hardis:project:deploy:start -x manifest/package.xml --checkonly</code></p>"},{"location":"salesforce-deployment-assistant-setup/#advanced-example","title":"Advanced example","text":"<p>Replace:</p> <p><code>sf project deploy start --dry-run --source-dir force-app --ignore-warnings --ignore-conflicts --test-level RunLocalTests   --coverage-formatters json-summary --verbose --wait 120 --json</code></p> <p>with:</p> <p><code>sf hardis project deploy start --dry-run --source-dir force-app --ignore-warnings --ignore-conflicts --test-level RunLocalTests   --coverage-formatters json-summary --verbose --wait 120 --json</code></p>"},{"location":"salesforce-deployment-assistant-setup/#not-updating-custom-cicd-pipeline","title":"Not updating custom CI/CD pipeline","text":"<p>You don't want to update your calls to <code>sf project deploy start</code> ?</p> <p>That's ok, you can't benefit from the error management, but you can benefit from the Flows Visual Git Diff and other integrations anyway !</p> <p>Add the Notify command to your custom CI/CD pipeline !</p>"},{"location":"salesforce-monitoring-apex-tests/","title":"Apex tests (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-apex-tests/#apex-tests","title":"Apex tests","text":"<p>Runs all local test classes of the org and calculate coverage.</p> <p>Sfdx-hardis command: sf hardis:org:test:apex</p>"},{"location":"salesforce-monitoring-apex-tests/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-apex-tests/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-config-azure/","title":"Configure Salesforce Org Monitoring with Azure","text":"<ul> <li>Pre-requisites<ul> <li>Create access token</li> <li>Create CI/CD variable</li> </ul> </li> <li>Run sfdx-hardis configuration command</li> <li>Define sfdx-hardis environment variables</li> <li>Schedule the monitoring job</li> </ul>"},{"location":"salesforce-monitoring-config-azure/#pre-requisites","title":"Pre-requisites","text":""},{"location":"salesforce-monitoring-config-azure/#configure-a-bypass-in-azure-settings","title":"Configure a ByPass in Azure Settings","text":"<ul> <li>Go to Project Settings \u2013&gt; Repositories \u2013&gt; select your repository and then click on the Security tab.</li> </ul> <ul> <li>Select your Build Service and set Bypass policies when pushing and Contribute to Allowed</li> </ul>"},{"location":"salesforce-monitoring-config-azure/#run-sfdx-hardis-configuration-command","title":"Run sfdx-hardis configuration command","text":"<ul> <li>Run command Configuration -&gt; Configure Org Monitoring in VsCode SFDX Hardis, then follow instructions.</li> </ul> <ul> <li>When prompted to setup CI/CD variables, copy-paste their names and values in a notepad the continue the instructions</li> </ul>"},{"location":"salesforce-monitoring-config-azure/#create-pipeline","title":"Create Pipeline","text":"<p>Skip this step if you already created the pipeline for the monitoring of another org</p> <ul> <li>Go to Project -&gt; Pipelines (you must have Azure authorizations to access this menu)</li> </ul> <ul> <li>Click on New pipeline</li> </ul> <ul> <li>Where is your code -&gt; Azure Repos Git</li> </ul> <ul> <li>Select your monitoring git repository: Existing Azure Pipelines YAML file</li> </ul> <ul> <li>Select your git branch then select azure-pipelines.yml</li> </ul> <ul> <li>Click on Continue</li> </ul> <ul> <li>Click on Save (contextual to the Run button)</li> </ul> <p></p>"},{"location":"salesforce-monitoring-config-azure/#configure-cicd-variables","title":"Configure CI/CD Variables","text":"<p>For each variable sfdx-hardis command Configure org monitoring told you to define, perform the following operations</p>"},{"location":"salesforce-monitoring-config-azure/#create-variable-in-azure","title":"Create variable in Azure","text":"<ul> <li>Go to Project -&gt; Pipelines</li> <li>Select your pipeline</li> <li>Click on Edit , then on Variables</li> <li>Input variable name and value</li> <li>Don't forget to click on save !</li> </ul>"},{"location":"salesforce-monitoring-config-azure/#update-azure-pipelinesyml","title":"Update azure-pipelines.yml","text":"<ul> <li>Open azure-pipelines.yml in VsCode and update all places where <code>MANUAL</code> is found<ul> <li>schedule triggers</li> <li>environment variables</li> </ul> </li> </ul> <p>Examples:</p> <pre><code>schedules:\n- cron: \"0 4 * * *\" # Cron format -&gt; https://crontab.cronhub.io/\n  always: \"true\"\n  branches:\n    # MANUAL: Add your monitored branches here\n    include:\n    - monitoring_myclient__integ_sandbox # Name of your branch created by monitoring configuration command\n</code></pre> <pre><code>    env:\n      # MANUAL: Add your branch related variables here\n      SFDX_CLIENT_ID_MONITORING_MYCLIENT__INTEG_SANDBOX: $(SFDX_CLIENT_ID_MONITORING_MYCLIENT__INTEG_SANDBOX)\n      SFDX_CLIENT_KEY_MONITORING_MYCLIENT__INTEG_SANDBOX: $(SFDX_CLIENT_KEY_MONITORING_MYCLIENT__INTEG_SANDBOX)\n      CI_COMMIT_REF_NAME: $(BRANCH_NAME)\n      CONFIG_BRANCH: $(BRANCH_NAME)\n      ORG_ALIAS: $(BRANCH_NAME)\n      CI: \"true\"\n</code></pre> <ul> <li>Commit and push</li> </ul>"},{"location":"salesforce-monitoring-config-azure/#schedule-the-monitoring-job","title":"Schedule the monitoring job","text":"<p>Schedule is already included within azure-pipelines.yml.</p> <p>Default is everyday at 4 AM, but you can update the CRON expression.</p> <pre><code>schedules:\n- cron: \"0 4 * * *\" # Cron format -&gt; https://crontab.cronhub.io/\n</code></pre> <p>When updated, commit and push.</p>"},{"location":"salesforce-monitoring-config-bitbucket/","title":"Configure Salesforce Org Monitoring with Bitbucket","text":""},{"location":"salesforce-monitoring-config-bitbucket/#cloning-repo-from-vscode","title":"Cloning repo from VsCode","text":"<p>If you have issues to authenticate to Bitbucket from VsCode, create an App Password in Bitbucket personal settings.</p>"},{"location":"salesforce-monitoring-config-bitbucket/#pre-requisites","title":"Pre-requisites","text":"<p>There are no pre-requisites</p>"},{"location":"salesforce-monitoring-config-bitbucket/#run-sfdx-hardis-configuration-command","title":"Run sfdx-hardis configuration command","text":"<ul> <li>Run command Configuration -&gt; Configure Org Monitoring in VsCode SFDX Hardis, then follow instructions.</li> </ul>"},{"location":"salesforce-monitoring-config-bitbucket/#define-sfdx-hardis-environment-variables","title":"Define sfdx-hardis environment variables","text":"<ul> <li>Go to Project -&gt; Repository Settings &gt; Repository Variables (you must have Bitbucket authorizations to access this menu)</li> <li>For each variable sfdx-hardis command Configure org monitoring tells you to define, create with name and value given in sfdx-hardis command logs</li> </ul>"},{"location":"salesforce-monitoring-config-bitbucket/#schedule-the-monitoring-job","title":"Schedule the monitoring job","text":"<ul> <li>Go to Project -&gt; Pipelines -&gt; Schedules</li> <li>Click on New schedule</li> <li>Select the target branch corresponding to the org you want to monitor</li> <li>Select default pipeline</li> <li>Select Schedule Daily and a time slot when no one works (for example <code>01:00 - 02:00</code>)</li> <li>Validate by clicking on Create</li> </ul>"},{"location":"salesforce-monitoring-config-github/","title":"Configure Salesforce Org Monitoring with Github","text":"<ul> <li>Pre-requisites</li> <li>Run sfdx-hardis configuration command</li> <li>Define sfdx-hardis environment variables</li> <li>Schedule the monitoring job</li> </ul>"},{"location":"salesforce-monitoring-config-github/#pre-requisites","title":"Pre-requisites","text":"<p>None</p>"},{"location":"salesforce-monitoring-config-github/#run-sfdx-hardis-configuration-command","title":"Run sfdx-hardis configuration command","text":"<ul> <li>Run command Configuration -&gt; Configure Org Monitoring in VsCode SFDX Hardis, then follow instructions.</li> </ul>"},{"location":"salesforce-monitoring-config-github/#define-sfdx-hardis-environment-variables","title":"Define sfdx-hardis environment variables","text":"<ul> <li>Go to Repository -&gt; Settings &gt; Secret and variables -&gt; Actions (you must have Github authorizations to access this menu)</li> <li>For each variable sfdx-hardis command Configure org monitoring tells you to define, click on New repository secret,  with name and value given in sfdx-hardis command logs</li> </ul>"},{"location":"salesforce-monitoring-config-github/#update-org-monitoringyml","title":"Update org-monitoring.yml","text":"<p>WARNING: Scheduling can be run only on main branch on GitHub Actions, so there is a specific config.</p> <ul> <li>Configure all your monitored org using VsCode SFDX Hardis command \"Configure Org Monitoring\" (jobs will fail but that's ok)<ul> <li>Reply questions, configure variables, let sfdx-hardis upload connected apps...</li> <li>This will create one git branch per monitored org</li> </ul> </li> </ul> <p>AND ONLY THEN:</p> <ul> <li>Checkout your \"main\" branch, create a file <code>.github/workflows/org-monitoring.yml</code> and copy there the content of org-monitoring.yml<ul> <li>Do a CTRL+F and look for MANUAL</li> <li>Add your monitored git branches here where asked to replace</li> <li>Add your authentication variable names where asked to replace</li> <li>Commit &amp; push: there should be a SINGLE GitHub Actions job (using matrix) that will run the monitoring on all orgs</li> </ul> </li> </ul> <p>Examples:</p> <pre><code>      env:\n        # MANUAL: Update variables below !\n        SFDX_CLIENT_ID_MONITORING_MY_CLIENT__INTEG_SANDBOX: ${{ secrets.SFDX_CLIENT_ID_MONITORING_MY_CLIENT__INTEG_SANDBOX}}\n        SFDX_CLIENT_KEY_MONITORING_MY_CLIENT__INTEG_SANDBOX: ${{ secrets.SFDX_CLIENT_KEY_MONITORING_MY_CLIENT__INTEG_SANDBOX}}\n        SFDX_DEPLOY_WAIT_MINUTES: ${{ vars.SFDX_DEPLOY_WAIT_MINUTES || '120' }}\n</code></pre>"},{"location":"salesforce-monitoring-config-github/#schedule-the-monitoring-job","title":"Schedule the monitoring job","text":"<p>Schedule is already included within org-monitoring.yml in main branch.</p> <p>Default is everyday at midnight, but you can update the CRON expression.</p> <pre><code>on:\n  push:\n  # Automatically run every day at midnight\n  schedule:\n    - cron: \"0 0 * * *\" # Cron format -&gt; https://crontab.cronhub.io/\n</code></pre>"},{"location":"salesforce-monitoring-config-gitlab/","title":"Configure Salesforce Org Monitoring with Gitlab","text":"<ul> <li>Pre-requisites<ul> <li>Create access token</li> <li>Create CI/CD variable</li> </ul> </li> <li>Run sfdx-hardis configuration command</li> <li>Define sfdx-hardis environment variables</li> <li>Schedule the monitoring job</li> </ul>"},{"location":"salesforce-monitoring-config-gitlab/#pre-requisites","title":"Pre-requisites","text":""},{"location":"salesforce-monitoring-config-gitlab/#create-access-token","title":"Create access token","text":"<ul> <li>Go to Project -&gt; Settings &gt; Access Token (you must have Gitlab authorizations to access this menu)</li> <li>Create an access token with the following info:<ul> <li>name: SFDX HARDIS MONITORING</li> <li>role: Developer</li> <li>scopes: read_repository, write_repository</li> </ul> </li> <li>Copy the value of the generated token in your clipboard ! (CTRL+C)</li> </ul>"},{"location":"salesforce-monitoring-config-gitlab/#create-cicd-variable","title":"Create CI/CD variable","text":"<ul> <li>Go to Project -&gt; Settings &gt; CI/CD -&gt; Variables (you must have Gitlab authorizations to access this menu)</li> <li>Create the variable with the following info:<ul> <li>name: ACCESS_TOKEN</li> <li>value: Paste the value that has been generated when creating the access token in the previous step</li> <li>Select Mask variable</li> <li>Unselect Protected variable</li> </ul> </li> </ul>"},{"location":"salesforce-monitoring-config-gitlab/#run-sfdx-hardis-configuration-command","title":"Run sfdx-hardis configuration command","text":"<ul> <li>Run command Configuration -&gt; Configure Org Monitoring in VsCode SFDX Hardis, then follow instructions.</li> </ul>"},{"location":"salesforce-monitoring-config-gitlab/#define-sfdx-hardis-environment-variables","title":"Define sfdx-hardis environment variables","text":"<ul> <li>Go to Project -&gt; Settings &gt; CI/CD -&gt; Variables (you must have Gitlab authorizations to access this menu)</li> <li>For each variable sfdx-hardis command Configure org monitoring tells you to define, create with name and value given in sfdx-hardis command logs</li> </ul>"},{"location":"salesforce-monitoring-config-gitlab/#schedule-the-monitoring-job","title":"Schedule the monitoring job","text":"<ul> <li>Go to Project -&gt; Build -&gt; Pipeline schedules</li> <li>Click on New schedule</li> <li>Input custom interval pattern as CRON expression, for example:<ul> <li><code>0 1 * * *</code> will run the monitoring job every day at 1 AM</li> <li><code>0 22 * * *</code> will run the monitoring job everyday at 10 PM</li> </ul> </li> <li>Select the CRON TimeZone (for example <code>[UTC+2] Paris</code>)</li> <li>Select the target branch corresponding to the org you want to monitor</li> <li>Validate by clicking on Create Pipeline Schedule</li> </ul>"},{"location":"salesforce-monitoring-config-home/","title":"How to monitor your Salesforce Org","text":"<ul> <li>Video tutorial</li> <li>Instructions<ul> <li>Common instructions</li> <li>Github</li> <li>Gitlab</li> <li>Azure</li> <li>Bitbucket</li> </ul> </li> <li>Notifications</li> <li>Troubleshooting</li> </ul>"},{"location":"salesforce-monitoring-config-home/#video-tutorial","title":"Video tutorial","text":""},{"location":"salesforce-monitoring-config-home/#instructions","title":"Instructions","text":""},{"location":"salesforce-monitoring-config-home/#common-instructions","title":"Common instructions","text":"<p>All you need to configure sfdx-hardis Org Monitoring is a GitHub , Gitlab, Azure or BitBucket repository.</p> <ul> <li>Create and clone a git repository (initialize it with README)</li> <li>Open it with Visual Studio Code, then open VsCode SFDX Hardis extension menu.<ul> <li>If you need installations instructions, please visit documentation page</li> </ul> </li> </ul> <ul> <li>Follow instructions, that can be specific according to your git provider</li> </ul> <p>Tip: Schedule monitoring jobs at different hours so the notifications are more readable, for example production at 1AM and preprod at 2AM</p>"},{"location":"salesforce-monitoring-config-home/#github","title":"Github","text":"<ul> <li>GitHub configuration<ul> <li>Pre-requisites</li> <li>Schedule monitoring job</li> </ul> </li> </ul>"},{"location":"salesforce-monitoring-config-home/#gitlab","title":"Gitlab","text":"<ul> <li>Gitlab configuration<ul> <li>Pre-requisites</li> <li>Schedule monitoring job</li> </ul> </li> </ul>"},{"location":"salesforce-monitoring-config-home/#azure","title":"Azure","text":"<ul> <li>Azure configuration<ul> <li>Pre-requisites</li> <li>Schedule monitoring job</li> </ul> </li> </ul>"},{"location":"salesforce-monitoring-config-home/#bitbucket","title":"Bitbucket","text":"<ul> <li>Bitbucket configuration<ul> <li>Pre-requisites</li> <li>Schedule monitoring job</li> </ul> </li> </ul>"},{"location":"salesforce-monitoring-config-home/#notifications","title":"Notifications","text":"<p>For a better user experience, it is highly recommended to configure notifications !</p> <ul> <li>Slack instructions</li> <li>Microsoft Teams instructions</li> <li>Email instructions</li> <li>Grafana instructions (example: for Grafana Loki integration)</li> </ul> <p>You can decide to run  commands but not send some notifications by defining either a notificationsDisable property in <code>.sfdx-hardis.yml</code>, or a comma separated list in env variable NOTIFICATIONS_DISABLE</p> <p>Example in .sfdx-hardis.yml:</p> <pre><code>notificationsDisable:\n  - METADATA_STATUS\n  - UNUSED_METADATAS\n</code></pre> <p>Example in env var:</p> <pre><code>NOTIFICATIONS_DISABLE=METADATA_STATUS,UNUSED_METADATAS\n</code></pre>"},{"location":"salesforce-monitoring-config-home/#monitoring-commands","title":"Monitoring commands","text":"<p>You can decide to disable commands by defining either a monitoringDisable property in <code>.sfdx-hardis.yml</code>, or a comma separated list in env variable MONITORING_DISABLE</p> <p>Example in .sfdx-hardis.yml:</p> <pre><code>monitoringDisable:\n  - METADATA_STATUS\n  - UNUSED_METADATAS\n</code></pre> <p>Example in env var:</p> <pre><code>MONITORING_DISABLE=METADATA_STATUS,UNUSED_METADATAS\n</code></pre>"},{"location":"salesforce-monitoring-config-home/#troubleshooting","title":"Troubleshooting","text":"<p>You might want to customize which metadatas types are backuped, because you can't monitor more than 10000 items.</p> <p>If there are more than 10000 items, your monitoring job will crash.</p> <p>In that case, you can:</p> <ul> <li>Single Branch scope: Manually update file <code>manifest/package-skip-items.xml</code> in the branch corresponding to an org, then commit and push. It works with:<ul> <li>Full wildcard (<code>&lt;members&gt;*&lt;/members&gt;</code>)</li> <li>Named metadata (<code>&lt;members&gt;Account.Name&lt;/members&gt;</code>)</li> <li>Partial wildcards names (<code>&lt;members&gt;pi__*&lt;/members&gt;</code> , <code>&lt;members&gt;*__dlm&lt;/members&gt;</code> , or <code>&lt;members&gt;prefix*suffix&lt;/members&gt;</code>)</li> </ul> </li> </ul> <ul> <li>All branches scope: Define CI/CD env var MONITORING_BACKUP_SKIP_METADATA_TYPES with the list of additional metadata types you want to skip<ul> <li>example: `MONITORING_BACKUP_SKIP_METADATA_TYPES=CustomLabel,StaticResource,Translation`</li> </ul> </li> </ul>"},{"location":"salesforce-monitoring-config-vector/","title":"Vector Configuration for sfdx-hardis Monitoring","text":""},{"location":"salesforce-monitoring-config-vector/#vector-configuration-for-sfdx-hardis-monitoring","title":"Vector Configuration for sfdx-hardis Monitoring","text":"<p>This guide explains how to configure Vector to collect sfdx-hardis notification logs and send them to Loki or Datadog for monitoring with Grafana dashboards.</p>"},{"location":"salesforce-monitoring-config-vector/#overview","title":"Overview","text":"<p>This guide is part of the sfdx-hardis monitoring suite. It covers:</p> <ul> <li>Writing notification logs to local JSON files via <code>NOTIF_API_LOGS_JSON_FILE</code></li> <li>Configuring Vector to collect and forward logs to Loki or Datadog</li> <li>Querying logs in Grafana using LogQL</li> </ul> <p>Benefits:</p> <ul> <li>Local monitoring without external API infrastructure</li> <li>Loki ingestion via Vector for Grafana dashboards  </li> <li>Audit trails of all notifications in NDJSON format</li> <li>Offline development and debugging</li> <li>Multiple destinations (Loki, Datadog, or both)</li> </ul>"},{"location":"salesforce-monitoring-config-vector/#prerequisites","title":"Prerequisites","text":"<ul> <li>Vector installed (v0.28+)</li> <li>Loki instance running OR Datadog account (or both)</li> <li>Grafana instance (for visualization)</li> <li>sfdx-hardis installed and configured</li> </ul>"},{"location":"salesforce-monitoring-config-vector/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Enable file logging in sfdx-hardis:</p> <pre><code>export NOTIF_API_LOGS_JSON_FILE=/path/to/logs/sfdx-hardis-logs.json\n</code></pre> </li> <li> <p>Configure Vector (see Sample Vector Configuration below)</p> </li> <li> <p>Run monitoring commands:</p> <pre><code>sf hardis:org:monitor:all\n</code></pre> </li> <li> <p>Query logs in Grafana using LogQL (see Query in Grafana below)</p> </li> </ol>"},{"location":"salesforce-monitoring-config-vector/#configuration","title":"Configuration","text":""},{"location":"salesforce-monitoring-config-vector/#environment-variable","title":"Environment Variable","text":"<p>Set the following environment variable to enable JSON file logging:</p> <pre><code>export NOTIF_API_LOGS_JSON_FILE=/path/to/logs/sfdx-hardis-logs.json\n</code></pre>"},{"location":"salesforce-monitoring-config-vector/#log-format","title":"Log Format","text":"<p>Logs are written in newline-delimited JSON (NDJSON) format, with one complete notification per line:</p> <pre><code>{\"timestamp\":\"2025-10-10T14:30:00.000Z\",\"source\":\"sfdx-hardis\",\"type\":\"ORG_LIMITS\",\"severity\":\"warning\",\"orgIdentifier\":\"production-org\",\"gitIdentifier\":\"my-repo/main\",\"metric\":75.5,\"_metrics\":{...},\"_logElements\":[...],\"_title\":\"Org Limits Check\",\"_jobUrl\":\"https://...\"}\n</code></pre>"},{"location":"salesforce-monitoring-config-vector/#fields","title":"Fields","text":"<p>Each log entry contains:</p> Field Description <code>timestamp</code> ISO 8601 timestamp of when the notification was generated <code>source</code> Always \"sfdx-hardis\" <code>type</code> Notification type (e.g., ORG_LIMITS, AUDIT_TRAIL, LEGACY_API) <code>severity</code> Notification severity (critical, error, warning, info, success, log) <code>orgIdentifier</code> Salesforce org identifier <code>gitIdentifier</code> Git repository and branch (format: <code>repo/branch</code>) <code>metric</code> Primary metric value (if applicable) <code>_metrics</code> Object containing all metrics with details (value, min, max, percent) <code>_logElements</code> Array of individual log elements (e.g., suspect audit logs) <code>_title</code> Human-readable notification title <code>_jobUrl</code> CI/CD job URL (if available) <code>limits</code> For ORG_LIMITS notifications: detailed limit information"},{"location":"salesforce-monitoring-config-vector/#usage-examples","title":"Usage Examples","text":""},{"location":"salesforce-monitoring-config-vector/#basic-usage","title":"Basic Usage","text":"<pre><code># Set the log file path\nexport NOTIF_API_LOGS_JSON_FILE=./logs/sfdx-hardis-logs.json\n\n# Run any monitoring command\nsf hardis:org:monitor:limits --target-org myorg\n\n# Logs will be written to ./logs/sfdx-hardis-logs.json\n</code></pre> <p>You can use both file logging AND API endpoint simultaneously:</p> <pre><code># Send to API AND write to file\nexport NOTIF_API_URL=https://my-loki.example.com/loki/api/v1/push\nexport NOTIF_API_LOGS_JSON_FILE=./logs/sfdx-hardis-logs.json\n\nsf hardis:org:monitor:all\n</code></pre>"},{"location":"salesforce-monitoring-config-vector/#file-only-no-api","title":"File Only (No API)","text":"<p>You can also use only file logging without any API endpoint:</p> <pre><code># Only write to file (no API endpoint required)\nexport NOTIF_API_LOGS_JSON_FILE=./logs/sfdx-hardis-logs.json\n\nsf hardis:org:monitor:all\n</code></pre>"},{"location":"salesforce-monitoring-config-vector/#integration-with-monitoring-stack","title":"Integration with Monitoring Stack","text":""},{"location":"salesforce-monitoring-config-vector/#vector-loki-grafana","title":"Vector + Loki + Grafana","text":"<p>This setup is configured to work with the dashboards provided by sfdx-hardis.</p> <p>If you're using a monitoring stack (Vector + Loki + Grafana), configure Vector to watch the log file: </p> <p>1. Set the log file path to your logs directory:</p> <pre><code>export NOTIF_API_LOGS_JSON_FILE=/path/to/monitoring/logs/sfdx-hardis-logs.json\n</code></pre> <p>2. Vector Configuration config/vector/vector.toml</p> <p>The default Vector configuration is already compatible! It: - Reads NDJSON files from the logs directory - Parses JSON and extracts all fields - Sends to Loki with proper labels</p> <p>No changes needed if you're using the standard Vector config!</p> <p>4. Query in Grafana:</p> <pre><code># All sfdx-hardis notifications\n{source=\"sfdx-hardis\"}\n\n# Org limits warnings\n{source=\"sfdx-hardis\", type=\"ORG_LIMITS\", severity=\"warning\"}\n\n# All notifications for a specific org\n{orgIdentifier=\"production-org\"}\n\n# Extract metrics from logs\n{source=\"sfdx-hardis\"} | json | metric &gt; 75\n</code></pre>"},{"location":"salesforce-monitoring-config-vector/#log-rotation","title":"Log Rotation","text":"<p>The file is append-only. Consider rotating logs periodically:</p> <p>Option 1: Include date in filename</p> <pre><code># Set filename with date - creates a new file each day\nexport NOTIF_API_LOGS_JSON_FILE=\"./logs/sfdx-hardis-logs-$(date +%Y-%m-%d).json\"\n</code></pre> <p>Option 2: Rotation script</p> <pre><code># Rotate if file exists and is older than 1 day\nLOG_FILE=\"./logs/sfdx-hardis-logs.json\"\nif [ -f \"$LOG_FILE\" ]; then\n  # Check if file is older than 1 day\n  if [ $(find \"$LOG_FILE\" -mtime +1 | wc -l) -gt 0 ]; then\n    YESTERDAY=$(date -d \"yesterday\" +%Y-%m-%d 2&gt;/dev/null || date -v-1d +%Y-%m-%d)\n    mv \"$LOG_FILE\" \"./logs/sfdx-hardis-logs-$YESTERDAY.json\"\n  fi\nfi\n</code></pre>"},{"location":"salesforce-monitoring-config-vector/#related-environment-variables","title":"Related Environment Variables","text":"<ul> <li>NOTIF_API_LOGS_JSON_FILE : Path to write notification logs</li> <li>NOTIF_API_METRICS_URL : Metrics endpoint (Prometheus Pushgateway or Grafana Cloud)</li> <li>DD_API_KEY : Datadog API key (if using Datadog sink)</li> <li>DD_URL : Datadog endpoint URL (if using Datadog sink)</li> <li>LOG_FILES_PATH :  Vector: Path to watch for log files (only for vector)</li> </ul> <p>Note: If <code>NOTIF_API_METRICS_URL</code> contains <code>/metrics/job/</code> or <code>pushgateway</code>, metrics are automatically formatted for Prometheus. Otherwise, InfluxDB format is used. </p>"},{"location":"salesforce-monitoring-config-vector/#next-steps","title":"Next Steps","text":"<p>After setting up Vector, you can:</p> <ol> <li>Set up Grafana dashboards - See Monitoring Configuration</li> <li>Configure metrics collection - Use <code>NOTIF_API_METRICS_URL</code> for Prometheus/Pushgateway</li> </ol>"},{"location":"salesforce-monitoring-config-vector/#additional-resources","title":"Additional Resources","text":""},{"location":"salesforce-monitoring-config-vector/#official-documentation","title":"Official Documentation","text":"<ul> <li>Vector Configuration Guide</li> <li>Loki LogQL Documentation</li> <li>Datadog Logs</li> <li>Grafana Explore</li> </ul>"},{"location":"salesforce-monitoring-config-vector/#sfdx-hardis-monitoring-guides","title":"sfdx-hardis Monitoring Guides","text":"<ul> <li>Monitoring Home - Overview of all monitoring features</li> <li>Monitoring Configuration - Configuration guides</li> <li>API Integration - Direct API integration (without Vector)</li> </ul>"},{"location":"salesforce-monitoring-config-vector/#sample-vector-configuration","title":"Sample Vector Configuration","text":"<p>Below is a complete Vector configuration that supports both Loki and Datadog destinations. You can use either or both based on your needs.</p>"},{"location":"salesforce-monitoring-config-vector/#configuration-file-vectortoml","title":"Configuration File: <code>vector.toml</code>","text":"<pre><code># Vector Configuration for sfdx-hardis Monitoring\n# https://vector.dev/docs/reference/configuration/\n\n# Data directory for Vector's state\ndata_dir = \"/var/lib/vector\"\n\n# Source: File logs\n# Reads NDJSON log files written by sfdx-hardis apiProvider.ts\n[sources.local_files]\n  type = \"file\"\n  include = [\n    \"${LOG_FILES_PATH:-/logs/**/*.log}\",\n    \"/logs/**/*.json\"\n  ]\n  read_from = \"beginning\"\n  max_line_bytes = 10485760  # 10MB max line size for large aggregate logs\n\n# Transform: Parse JSON logs (flat NDJSON format from sfdx-hardis)\n[transforms.parse_json]\n  type = \"remap\"\n  inputs = [\"local_files\"]\n  source = '''\n  # Parse the JSON line\n  parsed, err = parse_json(.message)\n  if err != null {\n    # Not JSON, skip this line\n    abort\n  }\n\n  # Merge the parsed JSON into the event\n  . = merge!(., parsed)\n\n  # Add metadata\n  .host = get_hostname!()\n  .source_file = string(.file) ?? \"log-file\"\n\n  # Set defaults only if missing (apiProvider.ts should provide all fields)\n  if !exists(.source) {\n    .source = \"sfdx-hardis\"\n  }\n  if !exists(.type) {\n    .type = \"UNKNOWN\"\n  }\n  if !exists(.severity) {\n    .severity = \"info\"\n  }\n  if !exists(.orgIdentifier) {\n    .orgIdentifier = \"unknown-org\"\n  }\n  if !exists(.gitIdentifier) {\n    .gitIdentifier = \"unknown\"\n  }\n\n  # Parse timestamp if it's a string\n  if exists(.timestamp) &amp;&amp; is_string(.timestamp) {\n    ts, ts_err = parse_timestamp(.timestamp, format: \"%+\")\n    if ts_err == null {\n      .timestamp = ts\n    }\n  }\n  '''\n\n# Transform: Ensure dashboard compatibility\n# apiProvider.ts already provides most fields, this just ensures proper structure\n[transforms.ensure_compatibility]\n  type = \"remap\"\n  inputs = [\"parse_json\"]\n  source = '''\n  # For ORG_LIMITS: Transform _metrics to limits structure if needed\n  # Dashboards expect: limits.DataStorageMB.percentUsed, etc.\n  # apiProvider.ts now includes limits field, but transform _metrics as fallback\n  if .type == \"ORG_LIMITS\" &amp;&amp; !exists(.limits) &amp;&amp; exists(._metrics) &amp;&amp; is_object(._metrics) {\n    .limits = {}\n\n    # Dynamically create limit structures from _metrics\n    metrics_keys = keys!(._metrics)\n    for_each(metrics_keys) -&gt; |_index, key| {\n      metric_val = get!(._metrics, [key])\n\n      # Check if this is a limit object (has percent, value, max fields)\n      if is_object(metric_val) &amp;&amp; exists(metric_val.percent) {\n        limit_obj = {}\n        limit_obj.percentUsed = to_float(metric_val.percent) ?? 0.0\n        limit_obj.used = to_int(metric_val.value) ?? 0\n        limit_obj.max = to_int(metric_val.max) ?? 0\n        limit_obj.name = key\n        limit_obj.label = key\n\n        .limits = set!(.limits, [key], limit_obj)\n      }\n    }\n  }\n\n  # FIX: Ensure all Loki label fields have non-empty values\n  # Vector Loki sink silently drops events if label templates resolve to null/empty\n  if !exists(.gitIdentifier) || .gitIdentifier == null || .gitIdentifier == \"\" {\n    .gitIdentifier = \"unknown\"\n  }\n  if !exists(.source_file) || .source_file == null || .source_file == \"\" {\n    .source_file = \"log-file\"\n  }\n  '''\n\n# Sink: Send logs to Loki\n[sinks.loki]\n  type = \"loki\"\n  inputs = [\"ensure_compatibility\"]\n  endpoint = \"http://loki:3100\"\n  encoding.codec = \"json\"\n\n  # Labels for Loki - Required by sfdx-hardis Grafana dashboards\n  labels.job = \"sfdx-hardis\"\n  labels.source = \"{{ source }}\"\n  labels.type = \"{{ type }}\"\n  labels.orgIdentifier = \"{{ orgIdentifier }}\"\n  labels.severity = \"{{ severity }}\"\n  labels.gitIdentifier = \"{{ gitIdentifier }}\"\n  labels.source_file = \"{{ source_file }}\"\n\n# Sink: Send logs to Datadog (OPTIONAL)\n# Remove this entire section if not using Datadog to avoid errors with missing env variables\n[sinks.datadog]\n  type = \"datadog_logs\"\n  inputs = [\"ensure_compatibility\"]\n  default_api_key = \"${DD_API_KEY}\"      # Set this in your environment\n  endpoint = \"${DD_URL}\"                 # Example: https://http-intake.logs.datadoghq.com\n  compression = \"gzip\"\n</code></pre>"},{"location":"salesforce-monitoring-config-vector/#using-the-configuration","title":"Using the Configuration","text":"<p>1. For Loki only:</p> <ul> <li>Keep the <code>[sinks.loki]</code> section</li> <li>Remove or comment out the <code>[sinks.datadog]</code> section</li> </ul> <p>2. For Datadog only:</p> <ul> <li>Remove or comment out the <code>[sinks.loki]</code> section  </li> <li>Keep the <code>[sinks.datadog]</code> section and set <code>DD_API_KEY</code> and <code>DD_URL</code> environment variables</li> </ul> <p>3. For both Loki and Datadog:</p> <ul> <li>Keep both sink sections</li> <li>Set Datadog environment variables</li> </ul> <p>4. Set environment variables:</p> <pre><code># Required for Vector\nexport LOG_FILES_PATH=/path/to/logs\n\n# Optional for Datadog\nexport DD_API_KEY=your_datadog_api_key\nexport DD_URL=https://http-intake.logs.datadoghq.com\n</code></pre>"},{"location":"salesforce-monitoring-deprecated-api-calls/","title":"Suspect Setup Actions (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-deprecated-api-calls/#detect-calls-to-deprecated-api-versions","title":"Detect calls to deprecated API versions","text":"<p>Will check if legacy API versions are called by external tools.</p> <p>Sfdx-hardis command: sf hardis:org:diagnose:legacyapi</p> <p>Key: LEGACY_API</p>"},{"location":"salesforce-monitoring-deprecated-api-calls/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-deprecated-api-calls/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-home/","title":"How to monitor your Salesforce Org","text":"<ul> <li>Monitor your Salesforce org with sfdx-hardis</li> <li>How does it work ?</li> <li>All Monitoring Commands</li> </ul>"},{"location":"salesforce-monitoring-home/#monitor-your-salesforce-org-with-sfdx-hardis","title":"Monitor your Salesforce org with sfdx-hardis","text":"<p>This feature worked yesterday in production, but today it crashes, what happened ?</p> <p>Instead of reading, watch the presentation at Dreamforce 24 conference in San Francisco !</p> <p>or if you like reading, here are the slides !</p> <p>Salesforce provide Audit Trail to trace configuration updates in production or sandbox orgs.</p> <p>You can know who updated what, but not with details (before / after).</p> <p>Sfdx-hardis monitoring provides a simple way to Backup your orgs metadatas everyday, or even several times a day, and provides an exact and detailed comparison with the previous metadata configuration (using git commits comparison)</p> <p>Extra indicators are also available out of the box, like:</p> <ul> <li>Run apex tests (and soon flow tests)</li> <li>Analyze the quality and the security of your metadatas with MegaLinter</li> <li>Checking org limits</li> <li>Be warned of release updates</li> <li>Check if you have deprecated api versions called</li> <li>Custom command lines that you can define in <code>.sfdx-hardis.yml</code></li> </ul> <p>You don't need to work in CI/CD to use Monitoring, it is compliant with any API enabled org :)</p> <p>Installation and usage are admin-friendly, and notifications can be sent via Slack or Microsoft Teams.</p> <p>Example of visualization in Grafana</p> <p></p> <p></p> <p></p> <p>Example notifications with Slack</p> <p></p> <p>Example of a monitoring git repository</p> <p></p>"},{"location":"salesforce-monitoring-home/#how-does-it-work","title":"How does it work ?","text":"<p>Every night (or even more frequently, according to your schedule), a CI job will be triggered.</p> <p>It will extract all the metadatas of your org, then push a new commit in the monitoring repository in case there are updates since the latest metadata backup.</p> <p></p> <p>Example workflow with GitHub actions</p> <p></p> <p>Example diff visualization with GitLens</p> <p></p> <p>The list of updated metadatas will be sent via notification to a Slack and/or Microsoft Teams channel.</p> <p>After the metadata backup, other jobs will be triggered (Apex tests, Code Quality, Legacy API checks + your own commands), and their results will be stored in job artifacts and sent via notifications.</p> <p>Are you ready ? Configure the monitoring on your orgs !</p>"},{"location":"salesforce-monitoring-home/#all-monitoring-commands","title":"All Monitoring Commands","text":"<p>The following checks are active out of the box.</p> <p>In order to avoid to overflow channels of notifications, some commands are run everyday whereas less critical ones are run weekly (on saturday).</p> <p>You can force the daily run of all commands by defining env var <code>MONITORING_IGNORE_FREQUENCY=true</code>.</p> Check Frequency Metadata Backup Daily Detect suspect setup actions in major org Daily Apex tests Daily Quality Checks with MegaLinter Daily Detect limits issues Daily Detect calls to deprecated API versions Daily Check Release Updates Weekly Detect inactive users Weekly Detect not used Apex Classes (Batch,Schedulable,Queueable) Weekly Detect not used Connected Apps Weekly Detect unused licenses Weekly Detect custom elements with no access rights defined in permission sets Weekly Detect custom labels and custom permissions that are not in use Weekly Detect inactive metadata Weekly Detect missing attributes Weekly"},{"location":"salesforce-monitoring-inactive-metadata/","title":"Inactive Metadatas (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-inactive-metadata/#detect-inactive-metadata","title":"Detect inactive metadata","text":"<p>Are you sure this inactive flow should be inactive ?</p> <p>And what about this deactivated Validation Rule ?</p> <p>Maybe it's time to remove them !</p> <p>Full list of metadata types that are checked:</p> <ul> <li>Approval Processes</li> <li>Assignment Rules</li> <li>Auto Response Rules</li> <li>Escalation Rules</li> <li>Flows</li> <li>Forecasting Types</li> <li>Record Types</li> <li>Validation Rules</li> <li>Workflow Rules</li> </ul> <p>Sfdx-hardis command: sf hardis:lint:metadatastatus</p> <p>Key: METADATA_STATUS</p>"},{"location":"salesforce-monitoring-inactive-metadata/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-inactive-metadata/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-inactive-metadata/#local-example","title":"Local example","text":""},{"location":"salesforce-monitoring-inactive-users/","title":"Inactive Users (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-inactive-users/#detect-inactive-users","title":"Detect inactive users","text":"<p>Detect if you are paying licenses for users that did not login for more than 6 months !</p> <p>Sfdx-hardis command: sf hardis:org:diagnose:unusedusers</p> <p>Key: UNUSED_USERS</p>"},{"location":"salesforce-monitoring-inactive-users/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-inactive-users/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-metadata-backup/","title":"Metadata backup (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-metadata-backup/#metadata-backup","title":"Metadata Backup","text":"<p>Adds a new commit in the git branch with the newest updates since latest monitoring run.</p> <p>Sfdx-hardis command: sf hardis:org:monitor:backup</p>"},{"location":"salesforce-monitoring-metadata-backup/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-metadata-backup/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-missing-access/","title":"Missing metadata access (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-missing-access/#detect-custom-elements-with-no-access-rights-defined-in-permission-sets","title":"Detect custom elements with no access rights defined in permission sets","text":"<p>If there are elements that nobody has access to (not existing on any Profile or Permission Set), maybe they should be removed !</p> <p>Sfdx-hardis command: sf hardis:lint:access</p> <p>Key: LINT_ACCESS</p>"},{"location":"salesforce-monitoring-missing-access/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-missing-access/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-missing-metadata-attributes/","title":"Missing metadata attributes (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-missing-metadata-attributes/#detect-missing-attributes","title":"Detect missing attributes","text":"<p>Follow best practices by documenting your data model !</p> <p>Sfdx-hardis command: sf hardis:lint:missingattributes</p> <p>Key: MISSING_ATTRIBUTES</p>"},{"location":"salesforce-monitoring-missing-metadata-attributes/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-missing-metadata-attributes/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-org-limits/","title":"Org limits (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-org-limits/#detect-org-limits-issues","title":"Detect org limits issues","text":"<p>There are many limits on a Salesforce org:</p> <ul> <li>Data storage</li> <li>File storage</li> <li>Daily API Calls</li> <li>Daily Bulk API Calls</li> <li>Daily Platform events</li> <li>and about 40 others !</li> </ul> <p>This feature controls that they are not reached, and will send notifications:</p> <ul> <li>Success &lt;= 50%</li> <li>Warning &gt; 50%</li> <li>Error &gt; 75%</li> </ul> <p>Sfdx-hardis command: sf hardis:org:monitor:limits</p> <p>Key: ORG_LIMITS</p>"},{"location":"salesforce-monitoring-org-limits/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-org-limits/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-quality-checks/","title":"Quality Checks with MegaLinter (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-quality-checks/#quality-checks-with-megalinter","title":"Quality Checks with MegaLinter","text":"<p>Will check if best practices are applied for:</p> <ul> <li>Apex with PMD</li> <li>LWC &amp; Aura with eslint</li> <li>Flows with Lightning Flow Scanner</li> <li>Security with checkov, gitleaks, secretlint, trivy...</li> </ul> <p>Full list in MegaLinter Documentation</p> <p></p>"},{"location":"salesforce-monitoring-release-updates/","title":"Check Release Updates (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-release-updates/#check-release-updates","title":"Check Release Updates","text":"<p>Before publishing Breaking Changes \u274c, Salesforce announce them in the setup menu Release Updates</p> <p>\u26a0\ufe0f Some of them are very important, because if you don't make the related upgrades in time (ex: before Winter 25) , your production org can crash !</p> <p>This command will extract the Release Updates that needs to be checked in your org !</p> <p>Sfdx-hardis command: sf hardis:org:diagnose:releaseupdates</p> <p>Key: RELEASE_UPDATES*</p>"},{"location":"salesforce-monitoring-release-updates/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-release-updates/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-suspect-audit-trail/","title":"Suspect Setup Actions (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-suspect-audit-trail/#detect-suspect-setup-actions-in-major-org","title":"Detect suspect setup actions in major org","text":"<p>Will extract from audit trail all actions that are considered as suspect, excepted the ones related to the deployment user and a given list of users, like the release manager.</p> <p>Sfdx-hardis command: sf hardis:org:diagnose:audittrail</p> <p>Key: AUDIT_TRAIL</p>"},{"location":"salesforce-monitoring-suspect-audit-trail/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-suspect-audit-trail/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-suspect-audit-trail/#excel-output-example","title":"Excel output example","text":""},{"location":"salesforce-monitoring-suspect-audit-trail/#local-output-example","title":"Local output example","text":""},{"location":"salesforce-monitoring-unused-apex-classes/","title":"Detect unused Apex Classes (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-unused-apex-classes/#detect-unused-apex-classes","title":"Detect unused Apex Classes","text":"<p>List all async Apex classes (Batch,Queueable,Schedulable) that has not been called for more than 365 days.</p> <p>The result class list probably can be removed from the project, and that will improve your test classes performances :)</p> <p>The command uses queries on AsyncApexJob and CronTrigger technical tables to build the result.</p> <p>Sfdx-hardis command: sf hardis:org:diagnose:unused-apex-classes</p> <p>Key: UNUSED_APEX_CLASSES</p>"},{"location":"salesforce-monitoring-unused-apex-classes/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-unused-apex-classes/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-unused-connected-apps/","title":"Detect unused Connected Apps (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-unused-connected-apps/#detect-unused-connected-apps","title":"Detect unused Connected Apps","text":"<p>List all Connected Apps that might be not used anymore</p> <p>You might disable them or even delete them to clean your org from technical debt and avoid security risks.</p> <p>Sfdx-hardis command: sf hardis:org:diagnose:unused-connected-apps</p> <p>Key: CONNECTED_APPS</p>"},{"location":"salesforce-monitoring-unused-connected-apps/#grafana-example","title":"Grafana example","text":"<p>TODO</p>"},{"location":"salesforce-monitoring-unused-connected-apps/#slack-example","title":"Slack example","text":"<p>TODO</p>"},{"location":"salesforce-monitoring-unused-licenses/","title":"Unused Licenses (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-unused-licenses/#detect-unused-licenses","title":"Detect unused licenses","text":"<p>When you assign a Permission Set to a user, and that this Permission Set is related to a Permission Set License, a Permission Set License Assignment is automatically created for the user.</p> <p>But when you unassign this Permission Set from the user, the Permission Set License Assignment is not deleted.</p> <p>This leads that you can be charged for Permission Set Licenses that are not used !</p> <p>This command detects such useless Permission Set Licenses Assignments and suggests to delete them.</p> <p>Many thanks to Vincent Finet for the inspiration during his great speaker session at French Touch Dreamin '23, and his kind agreement for reusing such inspiration in this command :)</p> <p>Sfdx-hardis command: sf hardis:org:diagnose:unusedlicenses</p> <p>Key: UNUSED_LICENSES</p>"},{"location":"salesforce-monitoring-unused-licenses/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-unused-licenses/#slack-example","title":"Slack example","text":""},{"location":"salesforce-monitoring-unused-metadata/","title":"Unused Metadatas (Salesforce monitoring)","text":""},{"location":"salesforce-monitoring-unused-metadata/#detect-metadatas-that-are-not-used","title":"Detect metadatas that are not used","text":"<p>If there are elements that are not used by anything, maybe they should be removed !</p> <p>Today working with:</p> <ul> <li>Custom Labels</li> <li>Custom Permissions</li> </ul> <p>Sfdx-hardis command: sf hardis:lint:unusedmetadatas</p> <p>Key: UNUSED_METADATAS</p>"},{"location":"salesforce-monitoring-unused-metadata/#grafana-example","title":"Grafana example","text":""},{"location":"salesforce-monitoring-unused-metadata/#slack-example","title":"Slack example","text":""},{"location":"salesforce-project-doc-ai/","title":"Enhance with AI your Salesforce Project Documentation","text":""},{"location":"salesforce-project-doc-ai/#improve-with-ai","title":"Improve with AI","text":"<p>If AI Integration is configured, the following parts of the documentation with be generated / enhanced</p> <ul> <li>Objects (with fields, validation rules, relationships and dependencies)</li> <li>Automations<ul> <li>Approval Processes</li> <li>Assignment Rules</li> <li>AutoResponse Rules</li> <li>Escalation Rules</li> <li>Flows</li> </ul> </li> <li>Authorizations<ul> <li>Profiles</li> <li>Permission Set Groups</li> <li>Permission Sets</li> </ul> </li> <li>Code<ul> <li>Apex</li> <li>Lightning Web Components</li> </ul> </li> <li>Lightning Pages</li> </ul> <p>Configure AI integration following the related documentation</p> <p>See the list of prompts used by sfdx-hardis to enhance documentation with AI, and how to override them.</p>"},{"location":"salesforce-project-doc-cloudflare/","title":"Host your AI-enhanced Salesforce Project Documentation on Cloudflare free tier","text":""},{"location":"salesforce-project-doc-cloudflare/#host-on-cloudflare","title":"Host on Cloudflare","text":"<p>You can also host your HTML documentation on Cloudflare free tier !</p> <p></p>"},{"location":"salesforce-project-doc-cloudflare/#manually","title":"Manually","text":"<ul> <li>Run command Documentation Generation -&gt; Upload HTML Doc to Cloudflare<ul> <li>Corresponding command line: <code>sf hardis:doc:mkdocs-to-cf</code></li> </ul> </li> </ul>"},{"location":"salesforce-project-doc-cloudflare/#from-cicd","title":"From CI/CD","text":"<p>If using sfdx-hardis monitoring, just set the variable SFDX_HARDIS_DOC_DEPLOY_TO_CLOUDFLARE=true (or the .sfdx-hardis.yml variable <code>docDeployToCloudflare: true</code>)</p> <p>If using custom pipelines, add <code>sf hardis:doc:project2markdown --with-history</code> then <code>sf hardis:doc:mkdocs-to-cf</code> in your workflow.</p> <p>Make sure the following variables are defined and available from the backup command script</p> <ul> <li>SFDX_HARDIS_DOC_DEPLOY_TO_CLOUDFLARE=true</li> <li>CLOUDFLARE_EMAIL</li> <li>CLOUDFLARE_API_TOKEN</li> <li>CLOUDFLARE_ACCOUNT_ID</li> <li>CLOUDFLARE_PROJECT_NAME</li> <li>CLOUDFLARE_DEFAULT_LOGIN_METHOD_TYPE (optional, <code>onetimepin</code> by default)</li> <li>CLOUDFLARE_DEFAULT_ACCESS_EMAIL_DOMAIN  (optional, <code>@cloudity.com</code> by default)</li> <li>CLOUDFLARE_EXTRA_ACCESS_POLICY_ID_LIST (optional)</li> </ul>"},{"location":"salesforce-project-doc-cloudflare/#multilingual-documentation","title":"Multilingual documentation","text":""},{"location":"salesforce-project-doc-cloudflare/#using-sfdx-hardis-monitoring","title":"Using sfdx-hardis monitoring","text":"<p>If you want to generate the documentation in multiple languages, define variable SFDX_DOC_LANGUAGES (ex: <code>SFDX_DOC_LANGUAGES=en,fr,de</code>)</p> <p>You can define one Cloudflare site by language, for example with the following variables:</p> <ul> <li><code>CLOUDFLARE_PROJECT_NAME_EN=cloudity-demo-english</code></li> <li><code>CLOUDFLARE_PROJECT_NAME_FR=cloudity-demo-french</code></li> <li><code>CLOUDFLARE_PROJECT_NAME_DE=cloudity-demo-german</code></li> </ul>"},{"location":"salesforce-project-doc-cloudflare/#using-custom-pipelines","title":"Using custom pipelines","text":"<p>Use variables when you call the commands, for example:</p> <pre><code>PROMPTS_LANGUAGE=fr sf hardis:doc:project2markdown --with-history\nCLOUDFLARE_PROJECT_NAME=cloudity-demo-french sf hardis:doc:mkdocs-to-cf\n\nPROMPTS_LANGUAGE=en sf hardis:doc:project2markdown --with-history\nCLOUDFLARE_PROJECT_NAME=cloudity-demo-english sf hardis:doc:mkdocs-to-cf\n</code></pre>"},{"location":"salesforce-project-doc-cloudflare/#create-configure-cloudflare-free-tier","title":"Create &amp; Configure Cloudflare free tier","text":"<p>Follow the video tutorial to see all described steps click by click :)</p> <ul> <li>Create a new Cloudflare account on cloudflare.com</li> </ul> <ul> <li>Create an Cloudflare API Token with the following scopes, and set it in CI/CD variable CLOUDFLARE_API_TOKEN<ul> <li>Account.Cloudflare Pages</li> <li>Account.Access: Organizations, Identity Providers, and Groups</li> <li>Account.Access: Apps and Policies</li> <li>User.User Details</li> </ul> </li> </ul> <ul> <li>Set CI/CD variable CLOUDFLARE_PROJECT_NAME, it will be used to build the pages site (uses the repo name by default)</li> </ul> <ul> <li>Set CI/CD variable CLOUDFLARE_EMAIL, with the email you used to create the Cloudflare account</li> </ul> <ul> <li>Set CI/CD variable CLOUDFLARE_ACCOUNT_ID<ul> <li>To get its value, run <code>npm install wrangler -g &amp;&amp; wrangler login &amp;&amp; wrangler whoami</code></li> </ul> </li> </ul> <ul> <li>Set CI/CD variable CLOUDFLARE_DEFAULT_ACCESS_EMAIL_DOMAIN , using your company email domain.</li> </ul> <ul> <li>Configure a new Cloudflare Zero Trust Team<ul> <li>Select free tier (you need a credit card that won't be charged)</li> </ul> </li> </ul> <ul> <li>If you want additional access policies, create them manually in Cloudflare Zero trust config, and set their ids in variable CLOUDFLARE_EXTRA_ACCESS_POLICY_ID_LIST</li> </ul>"},{"location":"salesforce-project-doc-complete-manually/","title":"Complete manually sfdx-hardis generated doc","text":""},{"location":"salesforce-project-doc-complete-manually/#manually-complete-documentation","title":"Manually complete documentation","text":"<p>sfdx-hardis generated a brand new doc using Metadata and AI enhancements.</p> <p>But maybe you would like to complete it manually ?</p> <p>We got you covered, with 3 ways to manually update generated doc and even create your own pages !</p>"},{"location":"salesforce-project-doc-complete-manually/#overwrite-ai-generated-parts","title":"Overwrite AI-generated parts","text":"<p>In the generated markdown files in <code>docs</code> folder and sub folders, you will see HTML comments around AI-generated text, like below</p> <pre><code>&lt;!-- The following part has been generated by AI. --&gt;\n&lt;!-- If you want to override it manually, rename the cache file into docs/cache-ai-results/fr-PROMPT_DESCRIBE_FLOW-Opportunity_AfterInsert.md then update it with the content you want. --&gt;\n&lt;!-- Cache file start: docs/cache-ai-results/fr-PROMPT_DESCRIBE_FLOW-Opportunity_AfterInsert-2527848841.md --&gt;\n\n## Describe flow Opportunity_AfterInsert\n\nSome summary generated by calls to LLMs\n...\n\n&lt;!-- Cache file end: docs/cache-ai-results/fr-PROMPT_DESCRIBE_FLOW-Opportunity_AfterInsert-2527848841.md --&gt;\n</code></pre> <p>It tells you which file you have to rename and how.</p> <p>Just rename the file <code>fr-PROMPT_DESCRIBE_FLOW-Opportunity_AfterInsert-2527848841.md</code> as <code>fr-PROMPT_DESCRIBE_FLOW-Opportunity_AfterInsert.md</code>, update the content, generate doc again, and you're all set !</p> <p>Example result:</p> <pre><code>&lt;!-- The following part has been generated by AI then manually updated --&gt;\n&lt;!-- If you want AI to recalculate it again, you can delete file docs/cache-ai-results/fr-PROMPT_DESCRIBE_FLOW-Opportunity_AfterInsert.md --&gt;\n&lt;!-- Cache file: docs/cache-ai-results/fr-PROMPT_DESCRIBE_FLOW-Opportunity_AfterInsert.md --&gt;\n\n## Describe flow Opportunity_AfterInsert\n\nYour own text here !\n...\n\n&lt;!-- Cache file end: docs/cache-ai-results/fr-PROMPT_DESCRIBE_FLOW-Opportunity_AfterInsert.md --&gt;\n</code></pre>"},{"location":"salesforce-project-doc-complete-manually/#overwrite-the-whole-file","title":"Overwrite the whole file","text":"<p>At the beginning of generated markdown files, you will see comments like below.</p> <pre><code>&lt;!-- This file is auto-generated. if you do not want it to be overwritten, set TRUE in the line below --&gt;\n&lt;!-- DO_NOT_OVERWRITE_DOC=FALSE --&gt;\n\nSome sfdx-hardis generated content text\n...\n</code></pre> <p>Update the comment to define <code>&lt;!-- DO_NOT_OVERWRITE_DOC=TRUE --&gt;</code>, then update the documentation with your own text, then you're all set !</p> <pre><code>&lt;!-- This file is auto-generated. if you do not want it to be overwritten, set TRUE in the line below --&gt;\n&lt;!-- DO_NOT_OVERWRITE_DOC=TRUE --&gt;\n\nMy own documentation !\n...\n</code></pre> <p>Note: AI-generated parts won't be calculated anymore if you define <code>&lt;!-- DO_NOT_OVERWRITE_DOC=TRUE --&gt;</code>.</p>"},{"location":"salesforce-project-doc-complete-manually/#add-your-own-pages","title":"Add your own pages","text":"<p>Create markdown files in docs folder.</p> <p>Example: <code>docs/my-custom-doc-page.md</code></p> <p>To add a link to your markdown pages in the menu, update nav section of file mkdocs.yml.</p> <p>Example:</p> <pre><code>  - Branches &amp; Orgs: sfdx-hardis-branches-and-orgs.md\n  - Installed Packages: installed-packages.md\n  - My Custom menu:\n      My Custom Page: my-custom-doc-page.md\n</code></pre>"},{"location":"salesforce-project-doc-generate/","title":"Generate Salesforce Project Documentation","text":""},{"location":"salesforce-project-doc-generate/#how-to-generate","title":"How To generate","text":"<ul> <li>Use the Git repository containing your SFDX project, or create it easily using sfdx-hardis Monitoring, or simply calling BackUp command</li> </ul> <ul> <li>Activate AI Integration (Optional but recommended)</li> </ul> <ul> <li>Call VsCode SFDX-Hardis command Documentation Generation &gt; Generate Project Documentation (with history)<ul> <li>Corresponding command line: <code>sf hardis:doc:project2markdown --with-history</code></li> </ul> </li> </ul> <p>Here is a click by click tutorial to generate your documentation locally (but it's best to use sfdx-hardis monitoring once you are convinced ^^)</p>"},{"location":"salesforce-project-doc-generate/#run-locally","title":"Run Locally","text":"<ul> <li>Run command Documentation Generation &gt; Run local HTML Doc Pages (Note: you need  Python on your computer)<ul> <li>Corresponding command lines: <code>pip install mkdocs-material mdx_truly_sane_lists</code>, then <code>mkdocs serve -v</code></li> <li>Alternative 1: <code>python -m pip install mkdocs-material mdx_truly_sane_lists</code>, then <code>python -m mkdocs serve -v</code></li> <li>Alternative 2: <code>py -m pip install mkdocs-material mdx_truly_sane_lists</code>, then <code>py -m mkdocs serve -v</code></li> </ul> </li> </ul> <ul> <li>Open http://127.0.0.1:8000/ in your Web Browser</li> </ul>"},{"location":"salesforce-project-doc-host-on-salesforce/","title":"Host your AI-enhanced Salesforce Project Documentation on Salesforce","text":""},{"location":"salesforce-project-doc-host-on-salesforce/#host-on-salesforce-org","title":"Host on Salesforce org","text":"<p>You can also host the HTML documentation directly in your Salesforce org !</p> <p>If your have too many metadatas, the pages will be too big for a single static resource. In that case, consider self-hosting your doc website using Cloudflare or your own secured HTTP server.</p> <p></p>"},{"location":"salesforce-project-doc-host-on-salesforce/#manually","title":"Manually","text":"<ul> <li>Run command Documentation Generation -&gt; Upload HTML Doc to Salesforce<ul> <li>Corresponding command line: <code>sf hardis:doc:mkdocs-to-salesforce</code></li> </ul> </li> </ul> <ul> <li>Set generated Custom Tab as <code>Default On</code> on your Profile if necessary</li> </ul> <ul> <li>Assign generated Permission Set to the users you want to access the SFDX Doc tab</li> </ul> <ul> <li>Add the tab in a Lightning Application (optional)</li> </ul>"},{"location":"salesforce-project-doc-host-on-salesforce/#from-cicd","title":"From CI/CD","text":"<p>If using sfdx-hardis monitoring, just set the variable SFDX_HARDIS_DOC_DEPLOY_TO_ORG=true (or the .sfdx-hardis.yml variable <code>docDeployToOrg: true</code>)</p> <p>If using custom pipelines, add <code>sf hardis:doc:project2markdown --with-history</code> then <code>sf hardis:doc:mkdocs-to-salesforce</code> in your workflow.</p>"},{"location":"salesforce-project-documentation/","title":"Your AI-enhanced Salesforce Project Documentation","text":""},{"location":"salesforce-project-documentation/#salesforce-project-documentation","title":"Salesforce Project Documentation","text":"<p>With a single command, you can generate a Web Site documenting your Salesforce metadatas</p> <ul> <li>Objects (with fields, validation rules, relationships and dependencies)</li> <li>Automations<ul> <li>Approval Processes</li> <li>Assignment Rules</li> <li>AutoResponse Rules</li> <li>Escalation Rules</li> <li>Flows</li> </ul> </li> <li>Authorizations<ul> <li>Profiles</li> <li>Permission Set Groups</li> <li>Permission Sets</li> </ul> </li> <li>Code<ul> <li>Apex</li> <li>Lightning Web Components</li> </ul> </li> <li>Lightning Pages</li> <li>Packages</li> <li>SFDX-Hardis Config</li> <li>Branches &amp; Orgs</li> <li>Manifests</li> </ul> <p>The documentation will be supercharged with AI if activated;</p> <p></p> <p></p> <p></p> <p></p> <p>If it is a sfdx-hardis CI/CD project, a diagram of the branches and orgs strategy will be generated.</p> <p></p>"},{"location":"sfdx-hardis-config-file/","title":".sfdx-hardis.yml config file","text":"<p>sfdx-hardis projects are like any other sfdx projects, but with an additional configuration stored in a .sfdx-hardis.yml config file</p> <p>Many of these properties are automatically set by CI/CD setup and maintenance operations.</p> <p>You can see the list of all configuration properties.</p> <p>Additional environment variables are also used by sfdx-hardis, see the complete list of environment variables.</p> <p>Here is an example of a .sfdx-hardis.yml config file:</p> <pre><code>projectName: MyClient\ndevHubAlias: DevHub_MyClient\ndevelopmentBranch: integration\nallowedOrgTypes:\n  - sandbox\navailableTargetBranches:\n  - develop\n  - preprod\nautoCleanTypes:\n  - destructivechanges\n  - datadotcom\n  - minimizeProfiles\n  - listViewsMine\nautoRemoveUserPermissions:\n  - EnableCommunityAppLauncher\n  - FieldServiceAccess\n  - OmnichannelInventorySync\n  - SendExternalEmailAvailable\n  - UseOmnichannelInventoryAPIs\n  - ViewDataLeakageEvents\n  - ViewMLModels\n  - ViewPlatformEvents\n  - WorkCalibrationUser\nautoRetrieveWhenPull:\n  - CustomApplication:MyClient\n  - CustomApplication:MyClientConnectApplication\n  - CustomApplication:MyOtherApplication\n  - CustomMetadata\ndevHubUsername: nicolas.vuillamy@ext.myclient.com\ninstallPackagesDuringCheckDeploy: true\ninstalledPackages:\n  - Id: 0A37Z000000AtDYSA0\n    SubscriberPackageId: 033i0000000LVMYAA4\n    SubscriberPackageName: Marketing Cloud\n    SubscriberPackageNamespace: et4ae5\n    SubscriberPackageVersionId: 04t6S000001UjutQAC\n    SubscriberPackageVersionName: Marketing Cloud\n    SubscriberPackageVersionNumber: 238.3.0.2\n    installOnScratchOrgs: true\n    installDuringDeployments: true\n  - Id: 0A35r0000009F9CCAU\n    SubscriberPackageId: 033b0000000Pf2AAAS\n    SubscriberPackageName: Declarative Lookup Rollup Summaries Tool\n    SubscriberPackageNamespace: dlrs\n    SubscriberPackageVersionId: 04t5p000001BmLvAAK\n    SubscriberPackageVersionName: Release\n    SubscriberPackageVersionNumber: 2.15.0.9\n    installOnScratchOrgs: true\n    installDuringDeployments: true\ninitPermissionSets:\n  - AdminDefault\n  - MarketingCloudConnectedApp\n  - ApiUserPS\nlistViewsToSetToMine:\n  - force-app/main/default/objects/Operation__c/listViews/MyCurrentOperations.listView-meta.xml\n  - force-app/main/default/objects/Operation__c/listViews/MyFinalizedOperations.listView-meta.xml\n</code></pre>"},{"location":"sfdx-hardis-help/","title":"sfdx-hardis help","text":"<p>You have a question or need assistance ?</p> <p>Feel free to contact us \ud83d\ude42 :)</p>"},{"location":"special-thanks/","title":"Special Thanks about sfdx-hardis","text":""},{"location":"special-thanks/#trailblazer-community","title":"Trailblazer community","text":"<ul> <li>Roman Hentschke, for building the BitBucket CI/CD integration</li> <li>Leo Jokinen, for building the GitHub CI/CD integration</li> </ul>"},{"location":"special-thanks/#contributors","title":"Contributors","text":""},{"location":"special-thanks/#inspirations","title":"Inspirations","text":""},{"location":"hardis/auth/login/","title":"login","text":""},{"location":"hardis/auth/login/#hardisauthlogin","title":"hardis:auth:login","text":""},{"location":"hardis/auth/login/#description","title":"Description","text":""},{"location":"hardis/auth/login/#command-behavior","title":"Command Behavior","text":"<p>Authenticates to a Salesforce org, primarily designed for CI/CD workflows.</p> <p>This command facilitates secure and automated logins to Salesforce organizations within continuous integration and continuous delivery pipelines. It leverages pre-configured authentication details, ensuring that CI/CD processes can interact with Salesforce without manual intervention.</p> <p>Key aspects:</p> <ul> <li>Configuration-Driven: It relies on authentication variables and files set up by dedicated configuration commands:<ul> <li>For CI/CD repositories: Configure Org CI Authentication</li> <li>For Monitoring repositories: Configure Org Monitoring</li> </ul> </li> <li>Technical Org Support: Supports authentication to a 'technical org' (e.g., for calling Agentforce from another org) by utilizing the <code>SFDX_AUTH_URL_TECHNICAL_ORG</code> environment variable. If this variable is set, the command authenticates to this org with the alias <code>TECHNICAL_ORG</code>.</li> </ul> <p>To obtain the <code>SFDX_AUTH_URL_TECHNICAL_ORG</code> value, you can run <code>sf org display --verbose --json</code> and copy the <code>sfdxAuthUrl</code> field from the output.</p> Technical explanations <p>The command's technical flow involves:</p> <ul> <li>Flag Parsing: It parses command-line flags such as <code>instanceurl</code>, <code>devhub</code>, <code>scratchorg</code>, and <code>debug</code> to determine the authentication context.</li> <li>Authentication Hook: It triggers an internal authentication hook (<code>this.config.runHook('auth', ...</code>)) which is responsible for executing the actual authentication logic based on the provided flags (e.g., whether it's a Dev Hub or a scratch org).</li> <li>Environment Variable Check: It checks for the presence of <code>SFDX_AUTH_URL_TECHNICAL_ORG</code> or <code>TECHNICAL_ORG_ALIAS</code> environment variables.</li> <li><code>authOrg</code> Utility: If a technical org is configured, it calls the <code>authOrg</code> utility function to perform the authentication for that specific org, ensuring it's connected and available for subsequent operations.</li> <li>Salesforce CLI Integration: It integrates with the Salesforce CLI's authentication mechanisms to establish and manage org connections.</li> </ul>"},{"location":"hardis/auth/login/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) devhub-h boolean Also connect associated DevHub flags-dir option undefined instanceurl-r option URL of org instance json boolean Format output as json. scratchorg-s boolean Scratch org skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/auth/login/#examples","title":"Examples","text":"<pre><code>$ sf hardis:auth:login\n</code></pre> <pre><code>CI=true CI_COMMIT_REF_NAME=monitoring_myclient sf hardis:auth:login\n</code></pre>"},{"location":"hardis/cache/clear/","title":"clear","text":""},{"location":"hardis/cache/clear/#hardiscacheclear","title":"hardis:cache:clear","text":""},{"location":"hardis/cache/clear/#description","title":"Description","text":""},{"location":"hardis/cache/clear/#command-behavior","title":"Command Behavior","text":"<p>Clears the local cache generated by the sfdx-hardis plugin.</p> <p>This command is designed to remove temporary files, stored configurations, and other cached data that sfdx-hardis uses to optimize its operations. Clearing the cache can be beneficial for:</p> <ul> <li>Troubleshooting: Resolving unexpected behavior or inconsistencies.</li> <li>Disk Space Management: Freeing up storage on your local machine.</li> <li>Ensuring Fresh Data: Guaranteeing that the plugin operates with the most current data and configurations.</li> </ul>"},{"location":"hardis/cache/clear/#technical-explanations","title":"Technical explanations","text":"<p>The command's technical implementation is straightforward:</p> <ul> <li>Direct Function Call: It directly invokes the <code>clearCache()</code> function, which is imported from \buri../../../common/cache/index.js\buri.</li> <li>Cache Management Logic: The \buriclearCache()` function encapsulates the logic for identifying and removing the specific files and directories that constitute the sfdx-hardis cache.</li> </ul>"},{"location":"hardis/cache/clear/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/cache/clear/#examples","title":"Examples","text":"<pre><code>$ sf hardis:cache:clear\n</code></pre>"},{"location":"hardis/config/get/","title":"get","text":""},{"location":"hardis/config/get/#hardisconfigget","title":"hardis:config:get","text":""},{"location":"hardis/config/get/#description","title":"Description","text":""},{"location":"hardis/config/get/#command-behavior","title":"Command Behavior","text":"<p>Retrieves and displays the sfdx-hardis configuration for a specified level.</p> <p>This command allows you to inspect the configuration that is currently in effect for your project, which is useful for debugging and understanding how sfdx-hardis will behave.</p> <ul> <li>Configuration levels: It can retrieve configuration from three different levels:<ul> <li>Project: The configuration defined in the project's <code>.sfdx-hardis.yml</code> file.</li> <li>Branch: The configuration defined in a branch-specific configuration file (e.g., <code>.sfdx-hardis.production.yml</code>).</li> <li>User: The global user-level configuration.</li> </ul> </li> </ul>"},{"location":"hardis/config/get/#technical-explanations","title":"Technical explanations","text":"<p>The command's logic is straightforward:</p> <ul> <li><code>getConfig</code> function: It calls the <code>getConfig</code> utility function, passing the desired configuration level as an argument.</li> <li>Configuration loading: The <code>getConfig</code> function is responsible for finding the appropriate configuration file, reading its contents, and parsing it as YAML or JSON.</li> <li>Output: The retrieved configuration is then displayed to the user as a JSON string.</li> </ul>"},{"location":"hardis/config/get/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. level-l option project,branch or user project projectbranchuser skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/config/get/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:deploy:sources:metadata\n</code></pre>"},{"location":"hardis/deploy/quick/","title":"quick","text":""},{"location":"hardis/deploy/quick/#hardisdeployquick","title":"hardis:deploy:quick","text":""},{"location":"hardis/deploy/quick/#description","title":"Description","text":"<p>sfdx-hardis wrapper for sf project deploy quick that displays tips to solve deployment errors.</p> <p>Note: Use --json argument to have better results</p> <p></p> <p>See documentation of Salesforce command</p>"},{"location":"hardis/deploy/quick/#deployment-pre-or-post-commands","title":"Deployment pre or post commands","text":"<p>You can define command lines to run before or after a deployment, with parameters:</p> <ul> <li>id: Unique Id for the command</li> <li>label: Human readable label for the command</li> <li>skipIfError: If defined to \"true\", the post-command won't be run if there is a deployment failure</li> <li>context: Defines the context where the command will be run. Can be all (default), check-deployment-only or process-deployment-only</li> <li>runOnlyOnceByOrg: If set to true, the command will be run only one time per org. A record of SfdxHardisTrace__c is stored to make that possible (it needs to be existing in target org)</li> </ul> <p>If the commands are not the same depending on the target org, you can define them into config/branches/.sfdx-hardis-BRANCHNAME.yml instead of root config/.sfdx-hardis.yml</p> <p>Example:</p> <pre><code>commandsPreDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='deploy.github@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n\ncommandsPostDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to desired username\n    command: sf data update record --sobject User --where \"Username='admin-yser@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n  - id: someActionToRunJustOneTime\n    label: And to run only if deployment is success\n    command: sf sfdmu:run ...\n    skipIfError: true\n    context: process-deployment-only\n    runOnlyOnceByOrg: true\n</code></pre>"},{"location":"hardis/deploy/quick/#parameters","title":"Parameters","text":"Name Type Description Default Required Options --job-id-i option job-id --use-most-recent-r boolean use-most-recent api-version-a option api-version async boolean async debug boolean debug flags-dir option undefined json boolean Format output as json. target-org-o option undefined tests option tests wait-w option wait 33"},{"location":"hardis/deploy/quick/#examples","title":"Examples","text":""},{"location":"hardis/deploy/start/","title":"start","text":""},{"location":"hardis/deploy/start/#hardisdeploystart","title":"hardis:deploy:start","text":""},{"location":"hardis/deploy/start/#description","title":"Description","text":"<p>sfdx-hardis wrapper for sf project deploy start that displays tips to solve deployment errors.</p> <p>Note: Use --json argument to have better results</p> <p></p> <p>See documentation of Salesforce command</p>"},{"location":"hardis/deploy/start/#deployment-pre-or-post-commands","title":"Deployment pre or post commands","text":"<p>You can define command lines to run before or after a deployment, with parameters:</p> <ul> <li>id: Unique Id for the command</li> <li>label: Human readable label for the command</li> <li>skipIfError: If defined to \"true\", the post-command won't be run if there is a deployment failure</li> <li>context: Defines the context where the command will be run. Can be all (default), check-deployment-only or process-deployment-only</li> <li>runOnlyOnceByOrg: If set to true, the command will be run only one time per org. A record of SfdxHardisTrace__c is stored to make that possible (it needs to be existing in target org)</li> </ul> <p>If the commands are not the same depending on the target org, you can define them into config/branches/.sfdx-hardis-BRANCHNAME.yml instead of root config/.sfdx-hardis.yml</p> <p>Example:</p> <pre><code>commandsPreDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='deploy.github@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n\ncommandsPostDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to desired username\n    command: sf data update record --sobject User --where \"Username='admin-yser@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n  - id: someActionToRunJustOneTime\n    label: And to run only if deployment is success\n    command: sf sfdmu:run ...\n    skipIfError: true\n    context: process-deployment-only\n    runOnlyOnceByOrg: true\n</code></pre>"},{"location":"hardis/deploy/start/#parameters","title":"Parameters","text":"Name Type Description Default Required Options api-version-a option api-version async boolean async coverage-formatters option coverage-formatters debug boolean debug dry-run boolean dry-run flags-dir option undefined ignore-conflicts-c boolean ignore-conflicts ignore-errors-r boolean ignore-errors ignore-warnings-g boolean ignore-warnings json boolean Format output as json. junit boolean junit manifest-x option manifest metadata-m option metadata metadata-dir option metadata-dir post-destructive-changes option post-destructive-changes pre-destructive-changes option pre-destructive-changes purge-on-delete boolean purge-on-delete results-dir option results-dir single-package boolean single-package source-dir-d option source-dir target-org-o option undefined test-level option test-level tests option tests wait-w option wait 33"},{"location":"hardis/deploy/start/#examples","title":"Examples","text":""},{"location":"hardis/deploy/validate/","title":"validate","text":""},{"location":"hardis/deploy/validate/#hardisdeployvalidate","title":"hardis:deploy:validate","text":""},{"location":"hardis/deploy/validate/#description","title":"Description","text":"<p>sfdx-hardis wrapper for sf project deploy validate that displays tips to solve deployment errors.</p> <p>Note: Use --json argument to have better results</p> <p></p> <p>See documentation of Salesforce command</p>"},{"location":"hardis/deploy/validate/#deployment-pre-or-post-commands","title":"Deployment pre or post commands","text":"<p>You can define command lines to run before or after a deployment, with parameters:</p> <ul> <li>id: Unique Id for the command</li> <li>label: Human readable label for the command</li> <li>skipIfError: If defined to \"true\", the post-command won't be run if there is a deployment failure</li> <li>context: Defines the context where the command will be run. Can be all (default), check-deployment-only or process-deployment-only</li> <li>runOnlyOnceByOrg: If set to true, the command will be run only one time per org. A record of SfdxHardisTrace__c is stored to make that possible (it needs to be existing in target org)</li> </ul> <p>If the commands are not the same depending on the target org, you can define them into config/branches/.sfdx-hardis-BRANCHNAME.yml instead of root config/.sfdx-hardis.yml</p> <p>Example:</p> <pre><code>commandsPreDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='deploy.github@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n\ncommandsPostDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to desired username\n    command: sf data update record --sobject User --where \"Username='admin-yser@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n  - id: someActionToRunJustOneTime\n    label: And to run only if deployment is success\n    command: sf sfdmu:run ...\n    skipIfError: true\n    context: process-deployment-only\n    runOnlyOnceByOrg: true\n</code></pre>"},{"location":"hardis/deploy/validate/#parameters","title":"Parameters","text":"Name Type Description Default Required Options api-version-a option api-version async boolean async coverage-formatters option coverage-formatters debug boolean debug dry-run boolean dry-run flags-dir option undefined ignore-conflicts-c boolean ignore-conflicts ignore-errors-r boolean ignore-errors ignore-warnings-g boolean ignore-warnings json boolean Format output as json. junit boolean junit manifest-x option manifest metadata-m option metadata metadata-dir option metadata-dir post-destructive-changes option post-destructive-changes pre-destructive-changes option pre-destructive-changes purge-on-delete boolean purge-on-delete results-dir option results-dir single-package boolean single-package source-dir-d option source-dir target-org-o option undefined test-level option test-level tests option tests wait-w option wait 33"},{"location":"hardis/deploy/validate/#examples","title":"Examples","text":""},{"location":"hardis/doc/fieldusage/","title":"fieldusage","text":""},{"location":"hardis/doc/fieldusage/#hardisdocfieldusage","title":"hardis:doc:fieldusage","text":""},{"location":"hardis/doc/fieldusage/#description","title":"Description","text":""},{"location":"hardis/doc/fieldusage/#command-behavior","title":"Command Behavior","text":"<p>Retrieves and displays the usage of custom fields within a Salesforce org, based on metadata dependencies.</p> <p>This command helps identify where custom fields are referenced across various metadata components in your Salesforce environment. It's particularly useful for impact analysis before making changes to fields, or for understanding the complexity and interconnectedness of your Salesforce customizations.</p> <ul> <li>Targeted sObjects: You can specify a comma-separated list of sObjects (e.g., <code>Account,Contact</code>) to narrow down the analysis to relevant objects. If no sObjects are specified, it will analyze all customizable sObjects.</li> <li>Usage Details: For each custom field, the command lists the metadata components (e.g., Apex Classes, Visualforce Pages, Flows, Reports) that reference it, along with their types and names.</li> </ul> <p></p> Technical explanations <p>The command operates by querying Salesforce's Tooling API and Metadata Component Dependency API:</p> <ul> <li>sObject Retrieval: It first queries <code>EntityDefinition</code> to get a list of customizable sObjects, optionally filtered by the user's input.</li> <li>Custom Field Identification: For each identified sObject, it queries <code>CustomField</code> to retrieve all custom fields associated with it.</li> <li>Dependency Lookup: The core of the command involves querying <code>MetadataComponentDependency</code> using the IDs of the custom fields. This API provides information about which other metadata components depend on the specified fields.</li> <li>Data Aggregation &amp; Reporting: The retrieved data is then processed and formatted into a tabular output, showing the sObject name, field name, field type, dependency type, and dependency name. The results are also generated into various report formats (e.g., CSV, JSON) for further analysis.</li> <li>SOQL Queries: It uses <code>soqlQuery</code> and <code>soqlQueryTooling</code> utilities to execute SOQL queries against the Salesforce org.</li> </ul>"},{"location":"hardis/doc/fieldusage/#parameters","title":"Parameters","text":"Name Type Description Default Required Options flags-dir option undefined json boolean Format output as json. sObjects-s option Comma-separated list of sObjects to filter target-org-o option undefined"},{"location":"hardis/doc/fieldusage/#examples","title":"Examples","text":"<pre><code>$ sf hardis:doc:fieldusage\n</code></pre> <pre><code>$ sf hardis:doc:fieldusage --sObjects Account,Contact,Opportunity\n</code></pre> <pre><code>$ sf hardis:doc:fieldusage --target-org myOrgAlias --sObjects CustomObject__c\n</code></pre>"},{"location":"hardis/doc/flow2markdown/","title":"flow2markdown","text":""},{"location":"hardis/doc/flow2markdown/#hardisdocflow2markdown","title":"hardis:doc:flow2markdown","text":""},{"location":"hardis/doc/flow2markdown/#description","title":"Description","text":""},{"location":"hardis/doc/flow2markdown/#command-behavior","title":"Command Behavior","text":"<p>Generates comprehensive Markdown documentation from a Salesforce Flow metadata file.</p> <p>This command automates the creation of human-readable documentation for Salesforce Flows, making it easier to understand their logic and behavior. It can process a single Flow file or multiple Flow files, generating a Markdown file for each.</p> <p>Key features include:</p> <ul> <li>Detailed Flow Description: Extracts and presents the Flow's structure, elements, and decision logic in a clear, organized Markdown format.</li> <li>AI-Powered Summarization (Optional): If AI integration is configured, the documentation will include an AI-generated summary of the Flow's purpose and functionality.</li> <li>Mermaid Diagram Generation: Integrates with Mermaid to visualize the Flow's structure, providing a graphical representation alongside the textual description.</li> <li>History Diff (Optional): Can generate a Markdown file showing the historical differences of the Flow, useful for tracking changes over time.</li> <li>PDF Export (Optional): Allows for the generation of the documentation in PDF format for easy sharing and archiving.</li> <li>Interactive File Selection: If no input file is specified, the command interactively prompts the user to select Flow files.</li> </ul> Technical explanations <p>The command leverages several internal utilities and external libraries to achieve its functionality:</p> <ul> <li>Flow Metadata Parsing: Reads and parses the XML content of Salesforce Flow metadata files (.flow-meta.xml).</li> <li>Markdown Generation: Utilizes     exttt{generateFlowMarkdownFile} to transform the parsed Flow data into a structured Markdown format.</li> <li>Mermaid Integration: Employs  exttt{generateMarkdownFileWithMermaid} to embed Mermaid diagrams within the Markdown output, which are then rendered by compatible Markdown viewers.</li> <li>AI Integration: If enabled, it interacts with an AI service (via  exttt{describeWithAi} option) to generate a high-level summary of the Flow.</li> <li>Git History Analysis: For the --with-history flag, it uses    exttt{generateHistoryDiffMarkdown} to analyze Git history and present changes to the Flow.</li> <li>File System Operations: Uses  exttt{fs-extra} for file system operations like reading input files, creating output directories (e.g.,     exttt{docs/flows/}), and writing Markdown and PDF files.</li> <li>Salesforce CLI Integration: Uses  exttt{@salesforce/sf-plugins-core} for command-line parsing and     exttt{setConnectionVariables} for Salesforce organization context.</li> <li>WebSocket Communication: Interacts with a WebSocket client (  exttt{WebSocketClient.requestOpenFile}) to open the generated Markdown file in a VS Code tab, enhancing user experience.</li> </ul>"},{"location":"hardis/doc/flow2markdown/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined inputfile-x option Path to Flow metadata file. If not specified, the command will prompt the user json boolean Format output as json. outputfile-f option Force the path and name of output markdown file. Must end with .md pdf boolean Also generate the documentation in PDF format skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration with-history boolean Generate a markdown file with the history diff of the Flow"},{"location":"hardis/doc/flow2markdown/#examples","title":"Examples","text":"<pre><code>$ sf hardis:doc:flow2markdown\n</code></pre> <pre><code>$ sf hardis:doc:flow2markdown --inputfile force-app/main/default/flows/MyFlow.flow-meta.xml\n</code></pre> <pre><code>$ sf hardis:doc:flow2markdown --pdf\n</code></pre> <pre><code>$ sf hardis:doc:flow2markdown --inputfile force-app/main/default/flows/MyFlow.flow-meta.xml --pdf\n</code></pre>"},{"location":"hardis/doc/mkdocs-to-cf/","title":"mkdocs-to-cf","text":""},{"location":"hardis/doc/mkdocs-to-cf/#hardisdocmkdocs-to-cf","title":"hardis:doc:mkdocs-to-cf","text":""},{"location":"hardis/doc/mkdocs-to-cf/#description","title":"Description","text":""},{"location":"hardis/doc/mkdocs-to-cf/#command-behaviorgenerates-mkdocs-html-pages-and-uploads-them-to-cloudflare-as-a-static-site-secured-with-cloudflare-accessthis-command-automates-the-deployment-of-your-projects-documentation-built-with-mkdocs-to-cloudflare-pages-making-it-accessible-and-secure-it-handles-the-entire-process-from-html-generation-to-cloudflare-configurationkey-operations-performed-mkdocs-html-generation-builds-the-mkdocs-project-into-static-html-pages-it-can-use-a-locally-installed-mkdocs-material-or-a-mkdocs-docker-image-cloudflare-pages-project-creationupdate-creates-a-new-cloudflare-pages-project-if-one-doesnt-exist-for-your-documentation-or-updates-an-existing-one-cloudflare-access-policy-assignment-assigns-a-policy-to-restrict-access-to-the-deployed-application-ensuring-only-authorized-users-can-view-your-documentation-cloudflare-access-application-setup-configures-a-cloudflare-access-application-for-the-deployed-site-integrating-it-with-your-zero-trust-policies-html-page-upload-deploys-the-generated-html-pages-to-cloudflare-pages-browser-opening-non-ci-opens-the-newly-deployed-website-in-your-default-browser-if-the-command-is-not-run-in-a-cicd-environmentprerequisite-the-documentation-must-have-been-previously-generated-using-sf-hardisdocproject2markdown-with-historycustomization-you-can-override-default-styles-by-customizing-your-mkdocsyml-filemore-information-can-be-found-in-the-documentation-sectionenvironment-variables-for-cloudflare-configuration-variable-description-default-cloudflare_email-cloudflare-account-email-required-cloudflare_api_token-cloudflare-api-token-required-cloudflare_account_id-cloudflare-account-id-required-cloudflare_project_name-project-name-also-used-for-the-site-url-built-from-git-branch-name-cloudflare_default_login_method_type-cloudflare-default-login-method-type-onetimepin-cloudflare_default_access_email_domain-cloudflare-default-access-email-domain-clouditycom-cloudflare_extra_access_policy_id_list-comma-separated-list-of-additional-policy-ids-to-assign-to-the-application-optional","title":"Command BehaviorGenerates MkDocs HTML pages and uploads them to Cloudflare as a static site, secured with Cloudflare Access.This command automates the deployment of your project's documentation (built with MkDocs) to Cloudflare Pages, making it accessible and secure. It handles the entire process from HTML generation to Cloudflare configuration.Key operations performed:- MkDocs HTML Generation: Builds the MkDocs project into static HTML pages. It can use a locally installed <code>mkdocs-material</code> or a <code>mkdocs</code> Docker image.- Cloudflare Pages Project Creation/Update: Creates a new Cloudflare Pages project if one doesn't exist for your documentation, or updates an existing one.- Cloudflare Access Policy Assignment: Assigns a policy to restrict access to the deployed application, ensuring only authorized users can view your documentation.- Cloudflare Access Application Setup: Configures a Cloudflare Access application for the deployed site, integrating it with your Zero Trust policies.- HTML Page Upload: Deploys the generated HTML pages to Cloudflare Pages.- Browser Opening (Non-CI): Opens the newly deployed website in your default browser if the command is not run in a CI/CD environment.Prerequisite: The documentation must have been previously generated using <code>sf hardis:doc:project2markdown --with-history</code>.Customization: You can override default styles by customizing your <code>mkdocs.yml</code> file.More information can be found in the Documentation section.Environment Variables for Cloudflare Configuration:| Variable                                  | Description                                                              | Default                               || :---------------------------------------- | :----------------------------------------------------------------------- | :------------------------------------: || <code>CLOUDFLARE_EMAIL</code>                        | Cloudflare account email                                                 | Required                            || <code>CLOUDFLARE_API_TOKEN</code>                    | Cloudflare API token                                                     | Required                            || <code>CLOUDFLARE_ACCOUNT_ID</code>                   | Cloudflare account ID                                                    | Required                            || <code>CLOUDFLARE_PROJECT_NAME</code>                 | Project name, also used for the site URL                                 | Built from Git branch name            || <code>CLOUDFLARE_DEFAULT_LOGIN_METHOD_TYPE</code>    | Cloudflare default login method type                                     | <code>onetimepin</code>                          || <code>CLOUDFLARE_DEFAULT_ACCESS_EMAIL_DOMAIN</code>  | Cloudflare default access email domain                                   | <code>@cloudity.com</code>                       || <code>CLOUDFLARE_EXTRA_ACCESS_POLICY_ID_LIST</code>  | Comma-separated list of additional policy IDs to assign to the application | Optional                            |","text":"Technical explanations <p>The command orchestrates interactions with MkDocs, Cloudflare APIs, and Git:- MkDocs Integration: It calls <code>generateMkDocsHTML()</code> to execute the MkDocs build process, which converts Markdown files into static HTML. It checks for the presence of <code>mkdocs.yml</code> to ensure it's a valid MkDocs project.- Cloudflare API Interaction: It uses the <code>cloudflare</code> npm package to interact with the Cloudflare API. This involves:  - Authentication: Initializes the Cloudflare client using <code>CLOUDFLARE_EMAIL</code>, <code>CLOUDFLARE_API_TOKEN</code>, and <code>CLOUDFLARE_ACCOUNT_ID</code> environment variables.  - Pages Project Management: Calls <code>client.pages.projects.get()</code> to check for an existing project and <code>client.pages.projects.create()</code> to create a new one if needed.  - Access Policy Management: Lists existing access policies (<code>client.zeroTrust.access.policies.list()</code>) and creates a new one (<code>client.zeroTrust.access.policies.create()</code>) if the required policy doesn't exist. It configures the policy with email domain restrictions and a default login method.  - Access Application Management: Lists existing access applications (<code>client.zeroTrust.access.applications.list()</code>) and creates a new one (<code>client.zeroTrust.access.applications.create()</code>) for the deployed site. It then updates the application to associate it with the created access policy.- Git Integration: Retrieves the current Git branch name using <code>getCurrentGitBranch()</code> to construct the Cloudflare project name and branch for deployment.- Wrangler CLI: Uses the <code>wrangler</code> CLI (Cloudflare's developer tool) to deploy the generated HTML pages to Cloudflare Pages via <code>wrangler pages deploy</code>.- Environment Variable Management: Reads various environment variables to configure Cloudflare settings and project names.- Error Handling: Includes checks for missing <code>mkdocs.yml</code> and Cloudflare environment variables, throwing <code>SfError</code> when necessary.</p>"},{"location":"hardis/doc/mkdocs-to-cf/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/doc/mkdocs-to-cf/#examples","title":"Examples","text":"<pre><code>$ sf hardis:doc:mkdocs-to-cf\n</code></pre>"},{"location":"hardis/doc/mkdocs-to-salesforce/","title":"mkdocs-to-salesforce","text":""},{"location":"hardis/doc/mkdocs-to-salesforce/#hardisdocmkdocs-to-salesforce","title":"hardis:doc:mkdocs-to-salesforce","text":""},{"location":"hardis/doc/mkdocs-to-salesforce/#description","title":"Description","text":""},{"location":"hardis/doc/mkdocs-to-salesforce/#command-behavior","title":"Command Behavior","text":"<p>Generates MkDocs HTML pages and deploys them to a Salesforce org as a static resource, Visualforce page, and Custom Tab.</p> <p>This command provides a convenient way to host your project's documentation directly within Salesforce, making it easily accessible to users. It automates the entire process of converting your MkDocs project into a deployable Salesforce package.</p> <p>Key operations performed:</p> <ul> <li>MkDocs HTML Generation: Builds the MkDocs project into static HTML pages. It can use a locally installed <code>mkdocs-material</code> or a <code>mkdocs</code> Docker image.</li> <li>Salesforce Metadata Creation: Creates the necessary Salesforce metadata components:<ul> <li>A Static Resource to store the generated HTML, CSS, and JavaScript files.</li> <li>A Visualforce Page that embeds the static resource, allowing it to be displayed within Salesforce.</li> <li>A Custom Tab to provide a user-friendly entry point to the documentation from the Salesforce navigation.</li> <li>A Permission Set to grant access to the Visualforce page and Custom Tab.</li> </ul> </li> <li>Metadata Deployment: Deploys these newly created metadata components to the specified Salesforce org.</li> <li>Permission Set Assignment: Assigns the newly created permission set to the current user, ensuring immediate access to the documentation.</li> <li>Browser Opening (Non-CI): Opens the Custom Tab in your default browser if the command is not run in a CI/CD environment.</li> </ul> <p>Prerequisite: The documentation must have been previously generated using <code>sf hardis:doc:project2markdown --with-history</code>.</p> <p>Customization:</p> <ul> <li>You can specify the type of documentation to generate (e.g., <code>CICD</code> or <code>Monitoring</code>) using the <code>--type</code> flag. The default is <code>CICD</code>.</li> <li>You can override default styles by customizing your <code>mkdocs.yml</code> file.</li> </ul> <p>More information can be found in the Documentation section.</p> Technical explanations <p>The command orchestrates interactions with MkDocs, Salesforce CLI, and file system operations:</p> <ul> <li>MkDocs Integration: It first modifies the <code>mkdocs.yml</code> file to ensure compatibility with Salesforce static resources (e.g., setting <code>use_directory_urls</code> to <code>false</code>). Then, it calls <code>generateMkDocsHTML()</code> to build the static HTML content.</li> <li>Temporary SFDX Project: It creates a temporary SFDX project using <code>createTempDir</code> and <code>createBlankSfdxProject</code> to stage the generated Salesforce metadata before deployment.</li> <li>Metadata Generation: It dynamically creates the XML metadata files for the Static Resource, Visualforce Page, Custom Tab, and Permission Set. The HTML content from the MkDocs build is moved into the static resource folder.</li> <li>Salesforce CLI Deployment: It constructs and executes a <code>sf project deploy start</code> command to deploy the generated metadata to the target Salesforce org. It intelligently adds <code>--test-level RunLocalTests</code> for production orgs and <code>--test-level NoTestRun</code> for sandboxes.</li> <li>Permission Set Assignment: After successful deployment, it calls <code>initPermissionSetAssignments</code> to assign the newly created permission set to the current user.</li> <li>Browser Launch: For non-CI environments, it uses <code>execCommand</code> to open the deployed Custom Tab in the user's default browser.</li> <li>Error Handling and Cleanup: It includes error handling for deployment failures (e.g., static resource size limits) and ensures that the <code>mkdocs.yml</code> file is restored to its original state after execution.</li> <li>File System Operations: It extensively uses <code>fs-extra</code> for file manipulation, including creating directories, moving files, and writing XML content.</li> </ul>"},{"location":"hardis/doc/mkdocs-to-salesforce/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined type-t option Type of the documentation to generate. Default is \"all\" CICD CICDMonitoring websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/doc/mkdocs-to-salesforce/#examples","title":"Examples","text":"<pre><code>$ sf hardis:doc:mkdocs-to-salesforce\n</code></pre>"},{"location":"hardis/doc/override-prompts/","title":"override-prompts","text":""},{"location":"hardis/doc/override-prompts/#hardisdocoverride-prompts","title":"hardis:doc:override-prompts","text":""},{"location":"hardis/doc/override-prompts/#description","title":"Description","text":""},{"location":"hardis/doc/override-prompts/#command-behavior","title":"Command Behavior","text":"<p>Creates local override files for AI prompt templates and variables, allowing for customization of sfdx-hardis AI interactions.</p> <p>This command sets up a <code>config/prompt-templates/</code> folder within your project. It populates this folder with <code>.txt</code> files containing the default AI prompt templates and variables used by sfdx-hardis. This enables you to tailor the AI's behavior and responses to your organization's specific needs, terminology, and coding standards.</p> <p>Key functionalities:</p> <ul> <li>Template Customization: Modify templates used for generating documentation, solving deployment errors, and describing Salesforce metadata.</li> <li>Variable Customization: Adjust common instruction patterns (e.g., role definitions, formatting requirements, security cautions) that are reused across multiple templates.</li> <li>Persistent Overrides: Once created, these local files will override the default sfdx-hardis templates and variables, and they will not be overwritten by future sfdx-hardis updates unless explicitly requested with the <code>--overwrite</code> flag.</li> </ul> <p>Important: After running this command, you can modify any of the <code>.txt</code> files in <code>config/prompt-templates/</code> to customize the AI's behavior.</p> <p>Available templates: - PROMPT_SOLVE_DEPLOYMENT_ERROR\\n- PROMPT_DESCRIBE_FLOW\\n- PROMPT_DESCRIBE_FLOW_DIFF\\n- PROMPT_DESCRIBE_OBJECT\\n- PROMPT_COMPLETE_OBJECT_ATTRIBUTES_MD\\n- PROMPT_DESCRIBE_APEX\\n- PROMPT_DESCRIBE_PAGE\\n- PROMPT_DESCRIBE_PACKAGE\\n- PROMPT_DESCRIBE_PROFILE\\n- PROMPT_DESCRIBE_PERMISSION_SET\\n- PROMPT_DESCRIBE_PERMISSION_SET_GROUP\\n- PROMPT_DESCRIBE_ASSIGNMENT_RULES\\n- PROMPT_DESCRIBE_APPROVAL_PROCESS\\n- PROMPT_DESCRIBE_LWC\\n- PROMPT_DESCRIBE_AUTORESPONSE_RULES\\n- PROMPT_DESCRIBE_ESCALATION_RULES\\n- PROMPT_DESCRIBE_ROLES</p> <p>Available variables: - VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC\\n- VARIABLE_FORMATTING_REQUIREMENTS\\n- VARIABLE_ADDITIONAL_INSTRUCTIONS</p> <p>More info on AI Prompts documentation</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Directory Creation: Ensures the <code>config/prompt-templates/</code> directory exists using <code>fs.ensureDirSync()</code>.</li> <li>File Copying: Iterates through predefined <code>PROMPT_TEMPLATES</code> and <code>PROMPT_VARIABLES</code> objects. For each template/variable, it extracts the English text content and writes it to a corresponding <code>.txt</code> file in the <code>config/prompt-templates/</code> directory.</li> <li>Overwrite Logic: Checks if a file already exists. If the <code>--overwrite</code> flag is provided, it overwrites the existing file; otherwise, it skips the file and logs a message.</li> <li>User Feedback: Provides detailed logs about created, overwritten, and skipped files, along with instructions on how to use the customized prompts and variables.</li> <li>Dynamic Content: The description itself dynamically lists available templates and variables by iterating over <code>PROMPT_TEMPLATES</code> and <code>PROMPT_VARIABLES</code> objects.</li> </ul>"},{"location":"hardis/doc/override-prompts/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. overwrite boolean Overwrite existing template files if they already exist skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/doc/override-prompts/#examples","title":"Examples","text":"<pre><code>$ sf hardis:doc:override-prompts\n</code></pre> <pre><code>$ sf hardis:doc:override-prompts --overwrite\n</code></pre>"},{"location":"hardis/doc/packagexml2markdown/","title":"packagexml2markdown","text":""},{"location":"hardis/doc/packagexml2markdown/#hardisdocpackagexml2markdown","title":"hardis:doc:packagexml2markdown","text":""},{"location":"hardis/doc/packagexml2markdown/#description","title":"Description","text":""},{"location":"hardis/doc/packagexml2markdown/#command-behavior","title":"Command Behavior","text":"<p>Generates a Markdown documentation file from a Salesforce <code>package.xml</code> file.</p> <p>This command provides a convenient way to visualize and document the metadata components defined within a <code>package.xml</code> file. It's particularly useful for:</p> <ul> <li>Understanding Project Scope: Quickly grasp what metadata types and components are included in a specific deployment or retrieval.</li> <li>Documentation: Create human-readable documentation of your project's metadata structure.</li> <li>Collaboration: Share a clear overview of metadata changes with team members or stakeholders.</li> </ul> <p>Key features:</p> <ul> <li>Flexible Input: You can specify the path to a <code>package.xml</code> file using the <code>--inputfile</code> flag. If not provided, the command will automatically look for <code>package.xml</code> files in the <code>manifest</code> folder.</li> <li>Customizable Output: You can force the path and name of the output Markdown file using the <code>--outputfile</code> flag.</li> <li>VS Code Integration: Automatically opens the generated Markdown file in a new VS Code tab for immediate review.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>XML Parsing: It reads the content of the specified <code>package.xml</code> file and parses its XML structure to extract the metadata types and their members.</li> <li>Markdown Generation: It utilizes the <code>DocBuilderPackageXML.generatePackageXmlMarkdown</code> utility to transform the parsed <code>package.xml</code> data into a structured Markdown format. This utility handles the formatting and organization of the metadata information.</li> <li>File System Operations: It uses <code>fs-extra</code> (implicitly through <code>DocBuilderPackageXML</code>) to read the input <code>package.xml</code> and write the generated Markdown file.</li> <li>WebSocket Communication: It interacts with a WebSocket client (<code>WebSocketClient.requestOpenFile</code>) to open the generated Markdown file in a VS Code tab, enhancing user experience.</li> <li>Salesforce Org Context: It can optionally use the <code>target-org</code> flag to provide context, such as the instance URL, which might be used for generating links or additional information within the Markdown.</li> </ul>"},{"location":"hardis/doc/packagexml2markdown/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined inputfile-x option Path to package.xml file. If not specified, the command will look in manifest folder json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .md skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/doc/packagexml2markdown/#examples","title":"Examples","text":"<pre><code>$ sf hardis:doc:packagexml2markdown\n</code></pre> <pre><code>$ sf hardis:doc:packagexml2markdown --inputfile manifest/package-all.xml\n</code></pre>"},{"location":"hardis/doc/project2markdown/","title":"project2markdown","text":""},{"location":"hardis/doc/project2markdown/#hardisdocproject2markdown","title":"hardis:doc:project2markdown","text":""},{"location":"hardis/doc/project2markdown/#description","title":"Description","text":"<p>Generates Markdown documentation from a SFDX project</p> <ul> <li>Objects (with fields, validation rules, relationships and dependencies)</li> <li>Automations<ul> <li>Approval Processes</li> <li>Assignment Rules</li> <li>AutoResponse Rules</li> <li>Escalation Rules</li> <li>Flows</li> </ul> </li> <li>Authorizations<ul> <li>Profiles</li> <li>Permission Set Groups</li> <li>Permission Sets</li> </ul> </li> <li>Code<ul> <li>Apex</li> <li>Lightning Web Components</li> </ul> </li> <li>Lightning Pages</li> <li>Packages</li> <li>SFDX-Hardis Config</li> <li>Branches &amp; Orgs</li> <li>Manifests</li> </ul> <p>Can work on any sfdx project, no need for it to be a sfdx-hardis flavored one.</p> <p>Generated markdown files will be written in the docs folder (except README.md, where a link to the doc index is added).</p> <ul> <li>You can customize the pages following mkdocs-material setup documentation</li> <li>You can manually add new markdown files in the \"docs\" folder to extend this documentation and add references to them in \"mkdocs.yml\"</li> <li>You can also add images in folder \"docs/assets\" and embed them in markdown files.</li> </ul> <p>To read flow documentation, if your markdown reader doesn't handle MermaidJS syntax this command may require @mermaid-js/mermaid-cli.</p> <ul> <li>Run <code>npm install @mermaid-js/mermaid-cli --global</code> if puppeteer works in your environment</li> <li>It can also be run as a docker image</li> </ul> <p>Both modes will be tried by default, but you can also force one of them by defining environment variable <code>MERMAID_MODES=docker</code> or <code>MERMAID_MODES=cli</code></p> <p>sfdx-hardis docker image is alpine-based and does not succeed to run mermaid/puppeteer: if you can help, please submit a PR !</p> <p>If Flow history doc always display a single state, you probably need to update your workflow configuration:</p> <ul> <li>on Gitlab: Env variable <code>GIT_FETCH_EXTRA_FLAGS: --depth 10000</code></li> <li>on GitHub: <code>fetch-depth: 0</code></li> <li>on Azure: <code>fetchDepth: \"0\"</code></li> <li>on Bitbucket: <code>step: clone: depth: full</code></li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>If it is a sfdx-hardis CI/CD project, a diagram of the branches and orgs strategy will be generated.</p> <p></p> <p>If AI integration is configured, documentation will contain a summary of the Flow.</p> <ul> <li>Use variable PROMPTS_LANGUAGE (ex: PROMPTS_LANGUAGE=fr) to force language for LLM calls (default:en)</li> </ul> <p>If you have a complex strategy, you might need to input property mergeTargets in branch-scoped sfdx-hardis.yml file to have a correct diagram.</p> <p>Define DO_NOT_OVERWRITE_INDEX_MD=true to avoid overwriting the index.md file in docs folder, useful if you want to keep your own index.md file.</p>"},{"location":"hardis/doc/project2markdown/#doc-html-pages","title":"Doc HTML Pages","text":"<p>To read the documentation as HTML pages, run the following code (you need Python on your computer)</p> <pre><code>pip install mkdocs-material mkdocs-exclude-search mdx_truly_sane_lists || python -m pip install mkdocs-material mkdocs-exclude-search mdx_truly_sane_lists || py -m pip install mkdocs-material mkdocs-exclude-search mdx_truly_sane_lists\nmkdocs serve -v || python -m mkdocs serve -v || py -m mkdocs serve -v\n</code></pre> <p>To just generate HTML pages that you can host anywhere, run <code>mkdocs build -v || python -m mkdocs build -v || py -m mkdocs build -v</code></p>"},{"location":"hardis/doc/project2markdown/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) diff-only boolean Generate documentation only for changed files (used for monitoring) flags-dir option undefined hide-apex-code boolean Hide Apex code in the generated documentation for Apex classes. json boolean Format output as json. pdf boolean Also generate the documentation in PDF format skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration with-history boolean Generate a markdown file with the history diff of the Flow"},{"location":"hardis/doc/project2markdown/#examples","title":"Examples","text":"<pre><code>$ sf hardis:doc:project2markdown\n</code></pre> <pre><code>$ sf hardis:doc:project2markdown --with-history\n</code></pre> <pre><code>$ sf hardis:doc:project2markdown --with-history --pdf\n</code></pre> <pre><code>$ sf hardis:doc:project2markdown --hide-apex-code\n</code></pre>"},{"location":"hardis/doc/extract/permsetgroups/","title":"permsetgroups","text":""},{"location":"hardis/doc/extract/permsetgroups/#hardisdocextractpermsetgroups","title":"hardis:doc:extract:permsetgroups","text":""},{"location":"hardis/doc/extract/permsetgroups/#description","title":"Description","text":""},{"location":"hardis/doc/extract/permsetgroups/#command-behavior","title":"Command Behavior","text":"<p>Extracts and documents Salesforce Permission Set Groups and their assigned Permission Sets.</p> <p>This command generates two types of output: a CSV file and a Markdown file, providing a clear overview of how Permission Set Groups are structured and what Permission Sets they contain within your Salesforce project. This is particularly useful for:</p> <ul> <li>Documentation: Creating human-readable documentation of your permission architecture.</li> <li>Auditing: Understanding the composition of permission sets for security and compliance checks.</li> <li>Analysis: Gaining insights into how permissions are bundled and assigned in your Salesforce environment.</li> </ul> <p>The generated CSV file provides a structured, machine-readable format, while the Markdown file offers a more descriptive, human-friendly view, including the group's name, label, description, and a list of its constituent permission sets.</p>"},{"location":"hardis/doc/extract/permsetgroups/#technical-explanations","title":"Technical explanations","text":"<p>The command performs the following technical steps:</p> <ul> <li>File Discovery: It uses <code>glob</code> to find all <code>.permissionsetgroup-meta.xml</code> files within the current working directory, respecting <code>.gitignore</code> patterns.</li> <li>XML Parsing: For each discovered Permission Set Group XML file, it parses the XML content using <code>parseXmlFile</code> to extract relevant information such as the group's name, label, description, and the names of the Permission Sets it contains.</li> <li>Data Structuring: The extracted data is then structured into a list of objects, making it easy to process.</li> <li>CSV Generation: It constructs a CSV file with two columns: 'Permission set group' and 'Permission sets'. The 'Permission sets' column lists all assigned permission sets for each group, enclosed in quotes and separated by commas. The CSV file is saved to a temporary directory or a user-specified path.</li> <li>Markdown Generation: It generates a Markdown file (<code>docs/permission-set-groups.md</code>) that includes a title, a table of contents, and detailed sections for each Permission Set Group. Each section lists the group's name, label, description, and a bulleted list of its assigned Permission Sets.</li> <li>File System Operations: It uses <code>fs-extra</code> to ensure output directories exist and to write the generated CSV and Markdown files.</li> <li>VS Code Integration: It uses <code>WebSocketClient.requestOpenFile</code> to automatically open the generated CSV and Markdown files in VS Code, enhancing the user experience.</li> </ul>"},{"location":"hardis/doc/extract/permsetgroups/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/doc/extract/permsetgroups/#examples","title":"Examples","text":"<pre><code>$ sf hardis:doc:extract:permsetgroups\n</code></pre>"},{"location":"hardis/doc/plugin/generate/","title":"generate","text":""},{"location":"hardis/doc/plugin/generate/#hardisdocplugingenerate","title":"hardis:doc:plugin:generate","text":""},{"location":"hardis/doc/plugin/generate/#description","title":"Description","text":""},{"location":"hardis/doc/plugin/generate/#command-behavior","title":"Command Behavior","text":"<p>Generates Markdown documentation for an SF CLI plugin, ready for conversion into HTML with MkDocs.</p> <p>This command automates the creation of comprehensive documentation for your Salesforce CLI plugin. It processes your plugin's commands and their flags to generate structured Markdown files, which can then be used with MkDocs to produce a professional-looking website.</p> <p>Key functionalities:</p> <ul> <li>Command Documentation: Generates a dedicated Markdown file for each command, including its description, parameters (flags), and examples.</li> <li>Index and Commands Pages: Creates an <code>index.md</code> and <code>commands.md</code> file that list all available commands, providing an overview and easy navigation.</li> <li>MkDocs Integration: Sets up the basic MkDocs project structure and updates the <code>mkdocs.yml</code> navigation to include the generated command documentation.</li> <li>Default File Copying: Copies essential MkDocs configuration files and GitHub Actions workflows to your project, streamlining the setup for continuous documentation deployment.</li> </ul> <p>Post-Generation Steps:</p> <p>After the initial run, you will need to manually update:</p> <ul> <li><code>mkdocs.yml</code>: Customize the project title, theme, and other MkDocs settings.</li> <li><code>.github/workflows/build-deploy-docs.yml</code>: Configure the GitHub Actions workflow for automatic documentation deployment.</li> <li><code>docs/javascripts/gtag.js</code>: If desired, set up Google Analytics tracking.</li> </ul> <p>Finally, activate GitHub Pages with <code>gh_pages</code> as the target branch. This will enable automatic documentation rebuilding and publishing to GitHub Pages upon each merge into your <code>master</code>/<code>main</code> branch.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Plugin Configuration Loading: It loads the SF CLI plugin's configuration using <code>@oclif/core</code>'s <code>Config.load()</code>, which provides access to all registered commands and their metadata.</li> <li>Command Iteration: It iterates through each command defined in the plugin's configuration.</li> <li>Markdown File Generation: For each command, it constructs a Markdown file (<code>.md</code>) containing:<ul> <li>The command ID as the main heading.</li> <li>The command's <code>description</code> property.</li> <li>A table of parameters (flags), including their name, type, description, default value, required status, and available options. It dynamically extracts this information from the command's <code>flags</code> property.</li> <li>Code blocks for each example provided in the command's <code>examples</code> property.</li> </ul> </li> <li>Navigation Structure: It builds a nested JavaScript object (<code>commandsNav</code>) that mirrors the command hierarchy, which is then converted to YAML and inserted into <code>mkdocs.yml</code> to create the navigation menu.</li> <li>Index and Commands Page Generation: It reads the project's <code>README.md</code> and extracts relevant sections to create the <code>index.md</code> file. It also generates a separate <code>commands.md</code> file listing all commands.</li> <li>File System Operations: It uses <code>fs-extra</code> to create directories, copy default MkDocs files (<code>defaults/mkdocs</code>), and write the generated Markdown and YAML files.</li> <li>YAML Serialization: It uses <code>js-yaml</code> to serialize the navigation object into YAML format for <code>mkdocs.yml</code>.</li> </ul>"},{"location":"hardis/doc/plugin/generate/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/doc/plugin/generate/#examples","title":"Examples","text":"<pre><code>$ sf hardis:doc:plugin:generate\n</code></pre>"},{"location":"hardis/git/pull-requests/extract/","title":"extract","text":""},{"location":"hardis/git/pull-requests/extract/#hardisgitpull-requestsextract","title":"hardis:git:pull-requests:extract","text":""},{"location":"hardis/git/pull-requests/extract/#description","title":"Description","text":""},{"location":"hardis/git/pull-requests/extract/#command-behavior","title":"Command Behavior","text":"<p>Extracts pull request information from your Git server based on specified filtering criteria.</p> <p>This command provides a powerful way to query and retrieve details about pull requests (or merge requests, depending on your Git provider) in your repository. It's highly useful for reporting, auditing, and analyzing development workflows.</p> <p>Key functionalities include:</p> <ul> <li>Target Branch Filtering: You can filter pull requests by their target branch using the <code>--target-branch</code> flag. If not specified, the command will prompt you to select one.</li> <li>Status Filtering: Filter pull requests by their status: <code>open</code>, <code>merged</code>, or <code>abandoned</code> using the <code>--status</code> flag. An interactive prompt is provided if no status is specified.</li> <li>Minimum Date Filtering: Use the <code>--min-date</code> flag to retrieve pull requests created or updated after a specific date.</li> <li>CSV Output: The extracted pull request data is generated into a CSV file, which can be used for further analysis in spreadsheet software.</li> </ul> Technical explanations <p>The command's technical implementation involves interacting with a Git provider's API:</p> <ul> <li>Git Provider Abstraction: It uses the <code>GitProvider.getInstance(true)</code> to abstract away the specifics of different Git platforms (e.g., GitHub, GitLab, Azure DevOps). This ensures the command can work across various environments.</li> <li>API Calls: The <code>gitProvider.listPullRequests()</code> method is called with a <code>prConstraint</code> object that encapsulates the filtering criteria (target branch, minimum date, status).</li> <li>Interactive Prompts: The <code>prompts</code> library is used to interactively gather input from the user for the target branch and pull request status if they are not provided as command-line flags.</li> <li>Date Handling: The <code>moment</code> library is used to parse and handle date inputs for the <code>--min-date</code> flag.</li> <li>CSV Generation: The <code>generateCsvFile</code> utility is responsible for converting the retrieved pull request data into a CSV format, and <code>generateReportPath</code> determines the output file location.</li> <li>Error Handling: It includes error handling for cases where a Git provider cannot be identified.</li> </ul>"},{"location":"hardis/git/pull-requests/extract/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. min-date-m option Minimum date for PR outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required status-x option Status of the PR openmergedabandoned target-branch-t option Target branch of PRs websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/git/pull-requests/extract/#examples","title":"Examples","text":"<pre><code>$ sf hardis:git:pull-requests:extract\n</code></pre> <pre><code>$ sf hardis:git:pull-requests:extract --target-branch main --status merged\n</code></pre>"},{"location":"hardis/lint/access/","title":"access","text":""},{"location":"hardis/lint/access/#hardislintaccess","title":"hardis:lint:access","text":""},{"location":"hardis/lint/access/#description","title":"Description","text":""},{"location":"hardis/lint/access/#command-behavior","title":"Command Behavior","text":"<p>Checks if specified Salesforce metadata elements (Apex classes and custom fields) have at least one permission defined in any Permission Set or Profile.</p> <p>This command is crucial for maintaining proper access control and identifying potential security vulnerabilities or misconfigurations in your Salesforce project. It helps ensure that all custom elements are accessible to the intended users through appropriate permission assignments.</p> <p>Key functionalities:</p> <ul> <li>Element Validation: Verifies that Apex classes and custom fields have <code>enabled</code> (for Apex classes) or <code>readable</code>/<code>editable</code> (for custom fields) access in at least one Permission Set or Profile.</li> <li>Configurable Ignores: Allows you to ignore specific elements or entire types of elements (e.g., all Apex classes, a particular custom field) using the <code>--elementsignored</code> flag or project configuration.</li> <li>Permission Set/Profile Filtering: You can specify Permission Sets or Profiles to ignore during the access check using the <code>--ignorerights</code> flag.</li> <li>Reporting: Generates a CSV report of all missing access elements, which can be used for auditing or further analysis.</li> <li>Notifications: Integrates with notification providers (Grafana, Slack, MS Teams) to alert about missing access issues, making it suitable for CI/CD monitoring.</li> <li>Interactive Fix: In non-CI environments, it offers an interactive prompt to automatically add missing accesses to selected Permission Sets.</li> </ul> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File System Traversal: Uses <code>glob</code> to find all Apex class (<code>.cls</code>) and custom field (<code>.field-meta.xml</code>) files within the specified root folder.</li> <li>XML Parsing: Parses the XML content of Permission Set (<code>.permissionset-meta.xml</code>) and Profile (<code>.profile-meta.xml</code>) files to extract access configurations.</li> <li>Element Filtering: Filters out elements that are explicitly ignored (via flags or configuration) or are not subject to access checks (e.g., Master-Detail fields, required fields, Custom Metadata Types, Custom Settings).</li> <li>Access Verification Logic: Iterates through each element to check and verifies if it has the necessary access enabled in any of the non-ignored Permission Sets or Profiles.</li> <li>Data Aggregation: Collects all elements with missing access into a <code>missingElements</code> array and <code>missingElementsMap</code> for reporting and notification purposes.</li> </ul>"},{"location":"hardis/lint/access/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) elementsignored-e option Ignore specific elements separated by commas flags-dir option undefined folder-f option Root folder force-app ignorerights-i option Ignore permission sets or profiles json boolean Format output as json. outputfile-x option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/lint/access/#examples","title":"Examples","text":"<pre><code>$ sf hardis:lint:access\n</code></pre> <pre><code>$ sf hardis:lint:access -e \"ApexClass:ClassA, CustomField:Account.CustomField\"\n</code></pre> <pre><code>$ sf hardis:lint:access -i \"PermissionSet:permissionSetA, Profile\"\n</code></pre>"},{"location":"hardis/lint/metadatastatus/","title":"metadatastatus","text":""},{"location":"hardis/lint/metadatastatus/#hardislintmetadatastatus","title":"hardis:lint:metadatastatus","text":""},{"location":"hardis/lint/metadatastatus/#description","title":"Description","text":""},{"location":"hardis/lint/metadatastatus/#command-behavior","title":"Command Behavior","text":"<p>Checks for inactive metadata elements within your Salesforce DX project, helping to maintain a clean and efficient codebase.</p> <p>This command identifies various types of metadata components that are marked as inactive in your local project files. Keeping metadata active and relevant is crucial for deployment success, performance, and avoiding confusion. This tool helps you pinpoint and address such inactive elements.</p> <p>It specifically checks for the inactive status of:</p> <ul> <li>Approval Processes</li> <li>Assignment Rules</li> <li>Auto Response Rules</li> <li>Escalation Rules</li> <li>Flows (specifically those in 'Draft' status)</li> <li>Forecasting Types</li> <li>Record Types</li> <li>Validation Rules</li> <li>Workflow Rules</li> </ul> <p></p> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: It uses <code>glob</code> patterns (e.g., <code>**/flows/**/*.flow-meta.xml</code>, <code>**/objects/**/validationRules/*.validationRule-meta.xml</code>) to locate relevant metadata files within your project.</li> <li>XML Parsing: For each identified metadata file, it reads the XML content and parses it to extract the <code>active</code> or <code>status</code> flag (e.g., <code>&lt;active&gt;false&lt;/active&gt;</code>, <code>&lt;status&gt;Draft&lt;/status&gt;</code>).</li> <li>Status Verification: It checks the value of these flags to determine if the metadata component is inactive.</li> <li>Data Aggregation: All detected inactive items are collected into a list, including their type, name, and a severity level.</li> <li>Report Generation: It generates a CSV report (<code>lint-metadatastatus.csv</code>) containing details of all inactive metadata elements, which can be used for further analysis or record-keeping.</li> <li>Notification Integration: It integrates with the <code>NotifProvider</code> to send notifications (e.g., to Slack, MS Teams, Grafana) about the presence and count of inactive metadata, making it suitable for automated monitoring in CI/CD pipelines.</li> <li>Error Handling: It includes basic error handling for file operations and ensures that the process continues even if some files cannot be read.</li> </ul>"},{"location":"hardis/lint/metadatastatus/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/lint/metadatastatus/#examples","title":"Examples","text":"<pre><code>$ sf hardis:lint:metadatastatus\n</code></pre>"},{"location":"hardis/lint/missingattributes/","title":"missingattributes","text":""},{"location":"hardis/lint/missingattributes/#hardislintmissingattributes","title":"hardis:lint:missingattributes","text":""},{"location":"hardis/lint/missingattributes/#description","title":"Description","text":""},{"location":"hardis/lint/missingattributes/#command-behavior","title":"Command Behavior","text":"<p>Checks for missing descriptions on custom fields within your Salesforce DX project.</p> <p>This command helps enforce documentation standards by identifying custom fields that lack a descriptive explanation. Comprehensive field descriptions are crucial for:</p> <ul> <li>Maintainability: Making it easier for developers and administrators to understand the purpose and usage of each field.</li> <li>Data Governance: Ensuring data quality and consistency.</li> <li>User Adoption: Providing clear guidance to end-users on how to interact with fields.</li> </ul> <p>It specifically targets custom fields (ending with <code>__c</code>) and excludes standard fields, managed package fields, and fields on Custom Settings or Data Cloud objects.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: It uses <code>glob</code> to find all custom field metadata files (<code>.field-meta.xml</code>) within your project.</li> <li>Custom Setting Exclusion: It first filters out fields belonging to Custom Settings by reading the corresponding object metadata files (<code>.object-meta.xml</code>) and checking for the <code>&lt;customSettingsType&gt;</code> tag. It also excludes Data Cloud objects (<code>__dlm</code>, <code>__dll</code>) and managed package fields.</li> <li>XML Parsing: For each remaining custom field file, it reads the XML content and parses it using <code>xml2js</code> to extract the <code>fullName</code> and <code>description</code> attributes.</li> <li>Description Check: It verifies if the <code>description</code> attribute is present and not empty for each custom field.</li> <li>Data Aggregation: All custom fields found to be missing a description are collected into a list, along with their object and field names.</li> <li>Report Generation: It generates a CSV report (<code>lint-missingattributes.csv</code>) containing details of all fields with missing descriptions.</li> <li>Notification Integration: It integrates with the <code>NotifProvider</code> to send notifications (e.g., to Slack, MS Teams, Grafana) about the presence and count of fields with missing descriptions, making it suitable for automated quality checks in CI/CD pipelines.</li> </ul>"},{"location":"hardis/lint/missingattributes/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/lint/missingattributes/#examples","title":"Examples","text":"<pre><code>$ sf hardis:lint:missingattributes\n</code></pre>"},{"location":"hardis/lint/unusedmetadatas/","title":"unusedmetadatas","text":""},{"location":"hardis/lint/unusedmetadatas/#hardislintunusedmetadatas","title":"hardis:lint:unusedmetadatas","text":""},{"location":"hardis/lint/unusedmetadatas/#description","title":"Description","text":""},{"location":"hardis/lint/unusedmetadatas/#command-behavior","title":"Command Behavior","text":"<p>Checks for unused custom labels and custom permissions within your Salesforce DX project.</p> <p>This command helps identify and report on custom labels and custom permissions that are defined in your project but do not appear to be referenced anywhere in your codebase. Identifying unused metadata is crucial for:</p> <ul> <li>Code Cleanliness: Removing dead code and unnecessary metadata improves project maintainability.</li> <li>Performance: Reducing the overall size of your metadata, which can positively impact deployment times and org performance.</li> <li>Clarity: Ensuring that all defined components serve a purpose, making the codebase easier to understand.</li> </ul> <p>It specifically scans for references to custom labels (e.g., <code>$Label.MyLabel</code>) and custom permissions (by their API name or label) across various file types (Apex, JavaScript, HTML, XML, etc.).</p> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: It uses <code>glob</code> to find all relevant project files (Apex classes, triggers, JavaScript, HTML, XML, Aura components, Visualforce pages) and custom label (<code>CustomLabels.labels-meta.xml</code>) and custom permission (<code>.customPermission-meta.xml</code>) definition files.</li> <li>XML Parsing: It uses <code>xml2js</code> to parse the XML content of <code>CustomLabels.labels-meta.xml</code> and custom permission files to extract the full names of labels and permissions.</li> <li>Content Scanning: For each label and custom permission, it iterates through all other project files and checks if their names or associated labels are present in the file content. It performs case-insensitive checks for labels.</li> <li>Usage Tracking: It maintains a count of how many times each custom permission is referenced. Labels are checked for any inclusion.</li> <li>Unused Identification: Elements with no or very few references (for custom permissions, less than 2 to account for their own definition file) are flagged as unused.</li> <li>Data Aggregation: All identified unused labels and custom permissions are collected into a list.</li> <li>Report Generation: It generates a CSV report (<code>lint-unusedmetadatas.csv</code>) containing details of all unused metadata elements.</li> <li>Notification Integration: It integrates with the <code>NotifProvider</code> to send notifications (e.g., to Slack, MS Teams, Grafana) about the presence and count of unused metadata, making it suitable for automated monitoring in CI/CD pipelines.</li> </ul>"},{"location":"hardis/lint/unusedmetadatas/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/lint/unusedmetadatas/#examples","title":"Examples","text":"<pre><code>$ sf hardis:lint:unusedmetadatas\n</code></pre>"},{"location":"hardis/mdapi/deploy/","title":"deploy","text":""},{"location":"hardis/mdapi/deploy/#hardismdapideploy","title":"hardis:mdapi:deploy","text":""},{"location":"hardis/mdapi/deploy/#description","title":"Description","text":""},{"location":"hardis/mdapi/deploy/#command-behavior","title":"Command Behavior","text":"<p>A wrapper command for Salesforce CLI's <code>sf project deploy start</code> (formerly <code>sfdx force:mdapi:deploy</code>), designed to assist with deployment error resolution.</p> <p>This command facilitates the deployment of metadata API source (either from a zip file, a deployment directory, or a validated deploy request ID) to a Salesforce org. Its primary enhancement over the standard Salesforce CLI command is its ability to provide tips and guidance for solving common deployment errors.</p> <p>Key features:</p> <ul> <li>Flexible Input: Supports deploying from a <code>.zip</code> file (<code>--zipfile</code>), a local directory (<code>--deploydir</code>), or by referencing a previously validated deployment (<code>--validateddeployrequestid</code>).</li> <li>Test Level Control: Allows specifying the test level for deployments (<code>NoTestRun</code>, <code>RunSpecifiedTests</code>, <code>RunLocalTestsInOrg</code>, <code>RunAllTestsInOrg</code>).</li> <li>Error Handling Assistance: Displays helpful tips and links to documentation to guide you through resolving deployment failures.</li> </ul> <p>Important Note: The underlying Salesforce CLI command <code>sfdx force:mdapi:deploy</code> is being deprecated by Salesforce in November 2024. It is recommended to migrate to <code>sf project deploy start</code> for future compatibility. See Salesforce CLI Migration Guide for more information.</p> <p>For visual assistance with solving deployment errors, refer to this article:</p> <p></p> Technical explanations <p>This command acts as an intelligent wrapper around the Salesforce CLI's metadata deployment functionality:</p> <ul> <li>Command Wrapping: It uses the <code>wrapSfdxCoreCommand</code> utility to execute the <code>sfdx force:mdapi:deploy</code> (or its equivalent <code>sf project deploy start</code>) command, passing through all relevant flags and arguments.</li> <li>Error Analysis (Implicit): While the direct code snippet doesn't show explicit error analysis, the description implies that the <code>wrapSfdxCoreCommand</code> or a subsequent process intercepts deployment failures and provides contextual help.</li> <li>User Guidance: It logs messages to the console, including deprecation warnings and pointers to external documentation for troubleshooting.</li> <li>Argument Passthrough: It directly passes the command-line arguments (<code>this.argv</code>) to the underlying Salesforce CLI command, ensuring all standard deployment options are supported.</li> </ul>"},{"location":"hardis/mdapi/deploy/#parameters","title":"Parameters","text":"Name Type Description Default Required Options checkonly-c boolean checkOnly concise boolean concise debug boolean debug deploydir-d option deployDir flags-dir option undefined ignoreerrors boolean ignoreErrors ignorewarnings-g boolean ignoreWarnings json boolean Format output as json. purgeondelete boolean purgeOnDelete runtests-r option runTests singlepackage-s boolean singlePackage soapdeploy boolean soapDeploy target-org-o option undefined testlevel-l option testLevel NoTestRun NoTestRunRunSpecifiedTestsRunLocalTestsRunAllTestsInOrg validateddeployrequestid-q option validatedDeployRequestId verbose boolean verbose wait-w option wait 120 websocket option websocket zipfile-f option zipFile"},{"location":"hardis/mdapi/deploy/#examples","title":"Examples","text":""},{"location":"hardis/misc/custom-label-translations/","title":"custom-label-translations","text":""},{"location":"hardis/misc/custom-label-translations/#hardismisccustom-label-translations","title":"hardis:misc:custom-label-translations","text":""},{"location":"hardis/misc/custom-label-translations/#description","title":"Description","text":""},{"location":"hardis/misc/custom-label-translations/#command-behavior","title":"Command Behavior","text":"<p>Extracts selected custom labels, or all custom labels used within a given Lightning Web Component (LWC), from all available language translation files in the project.</p> <p>This command streamlines the process of managing and isolating specific custom label translations. It's particularly useful for:</p> <ul> <li>Localization Management: Focusing on translations for a subset of labels or for labels relevant to a specific UI component.</li> <li>Collaboration: Sharing only the necessary translation files with translators, reducing complexity.</li> <li>Debugging: Isolating translation issues for specific labels or components.</li> </ul> <p>Key functionalities:</p> <ul> <li>Label Selection: You can specify custom label names directly using the <code>--label</code> flag (comma-separated).</li> <li>LWC-based Extraction: Alternatively, you can provide an LWC developer name using the <code>--lwc</code> flag, and the command will automatically identify and extract all custom labels referenced within that LWC's JavaScript files.</li> <li>Interactive Prompts: If neither <code>--label</code> nor <code>--lwc</code> is provided, the command will interactively prompt you to choose between selecting specific labels or extracting from an LWC.</li> <li>Output Generation: For each language found in your project's <code>translations</code> folder, it generates a new <code>.translation-meta.xml</code> file containing only the extracted custom labels and their translations. These files are placed in a timestamped output directory.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: It uses <code>glob</code> to find all <code>*.translation-meta.xml</code> files in the <code>**/translations/</code> directory and, if an LWC is specified, it searches for the LWC's JavaScript files (<code>**/lwc/**/*.js</code>).</li> <li>LWC Label Extraction: The <code>extractLabelsFromLwc</code> function uses regular expressions (<code>@salesforce/label/c.([a-zA-Z0-9_]+)</code>) to parse LWC JavaScript files and identify referenced custom labels.</li> <li>XML Parsing and Building: It uses <code>xml2js</code> (<code>parseStringPromise</code> and <code>Builder</code>) to:<ul> <li>Read and parse existing <code>.translation-meta.xml</code> files.</li> <li>Filter the <code>customLabels</code> array to include only the requested labels.</li> <li>Construct a new XML structure containing only the filtered labels.</li> <li>Build a new XML string with proper formatting and write it to a new file.</li> </ul> </li> <li>Interactive Prompts: The <code>prompts</code> library is used extensively to guide the user through the selection of extraction methods (labels or LWC) and specific labels/components.</li> <li>File System Operations: It uses <code>fs-extra</code> for creating output directories (<code>extracted-translations/</code>) and writing the generated translation files.</li> <li>WebSocket Communication: It uses <code>WebSocketClient.requestOpenFile</code> to open the output directory in VS Code for easy access to the generated files.</li> </ul>"},{"location":"hardis/misc/custom-label-translations/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. label-l option Developer name(s) of the custom label(s), comma-separated lwc-c option Developer name of the Lightning Web Component skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/misc/custom-label-translations/#examples","title":"Examples","text":"<pre><code>$ sf hardis:misc:custom-label-translations --label CustomLabelName\n</code></pre> <pre><code>$ sf hardis:misc:custom-label-translations --label Label1,Label2\n</code></pre> <pre><code>$ sf hardis:misc:custom-label-translations --lwc MyComponent\n</code></pre>"},{"location":"hardis/misc/purge-references/","title":"purge-references","text":""},{"location":"hardis/misc/purge-references/#hardismiscpurge-references","title":"hardis:misc:purge-references","text":""},{"location":"hardis/misc/purge-references/#description","title":"Description","text":""},{"location":"hardis/misc/purge-references/#command-behavior","title":"Command Behavior","text":"<p>Purges references to specified strings within your Salesforce metadata files before deployment.</p> <p>This command is a powerful, yet dangerous, tool designed to modify your local Salesforce metadata by removing or altering references to specific strings. It's primarily intended for advanced use cases, such as refactoring a custom field's API name (e.g., changing a Master-Detail relationship to a Lookup) where direct string replacement across many files is necessary.</p> <p>USE WITH EXTREME CAUTION AND CAREFULLY READ ALL MESSAGES! Incorrect usage can lead to data loss or metadata corruption.</p> <p>Key functionalities:</p> <ul> <li>Reference String Input: You can provide a comma-separated list of strings (e.g., <code>Affaire__c,MyField__c</code>) that you want to find and modify within your metadata.</li> <li>Automatic Related Field Inclusion: If a custom field API name (ending with <code>__c</code>) is provided, it automatically includes its relationship name (ending with <code>__r</code>) in the list of references to purge, ensuring comprehensive cleanup.</li> <li>Source Synchronization Check: Prompts you to confirm if your local sources are up-to-date with the target org, offering to retrieve metadata if needed.</li> <li>Targeted File Scan: Scans <code>.cls</code>, <code>.trigger</code>, and <code>.xml</code> files within your SFDX project to identify occurrences of the specified reference strings.</li> <li>Configurable Replacements: Applies predefined replacement rules based on file type (e.g., Apex classes, XML files) to modify the content where references are found.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Interactive Input: Uses <code>prompts</code> to get the list of reference strings from the user if not provided via flags.</li> <li>Metadata Retrieval: If the user indicates that local sources are not up-to-date, it executes <code>sf project retrieve start</code> to fetch the latest metadata from the target org.</li> <li>File System Scan: It uses <code>glob</code> to efficiently find all relevant source files (<code>.cls</code>, <code>.trigger</code>, <code>.xml</code>) within the project's package directories.</li> <li>Content Matching: Reads the content of each source file and checks for the presence of any of the specified reference strings.</li> </ul> <p>The core utility function for replacements is called <code>applyAllReplacementsDefinitions</code>. It is responsible for iterating through the identified files and applying the defined replacement rules. These rules are structured to target specific patterns (for example, <code>,{{REF}},</code> or <code>{{REF}}[ |=].+</code> in Apex code) and replace them with a desired string (often an empty string or a modified version).</p> <ul> <li>Regular Expressions: The replacement rules heavily rely on regular expressions (<code>regex</code>) to precisely match and modify the content.</li> <li>User Feedback: Provides real-time feedback using <code>ora</code> for spinners and <code>uxLog</code> for logging messages about the progress and results of the operation.</li> </ul>"},{"location":"hardis/misc/purge-references/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. references-r option Comma-separated list of references to find in metadatas skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/misc/purge-references/#examples","title":"Examples","text":"<pre><code>$ sf hardis:misc:purge-references\n</code></pre>"},{"location":"hardis/misc/servicenow-report/","title":"servicenow-report","text":""},{"location":"hardis/misc/servicenow-report/#hardismiscservicenow-report","title":"hardis:misc:servicenow-report","text":""},{"location":"hardis/misc/servicenow-report/#description","title":"Description","text":"<p>This command retrieves user stories from Salesforce and enriches them with data from ServiceNow.</p> <p>Define the following environment variables (in CICD variables or locally in a .env file):</p> <ul> <li>SERVICENOW_URL: The base URL of the ServiceNow API (ex: https://your-instance.service-now.com/)</li> <li>SERVICENOW_USERNAME: The username for ServiceNow API authentication.</li> <li>SERVICENOW_PASSWORD: The password for ServiceNow API authentication.</li> </ul> <p>You also need to define JSON configuration file(e) in folder config/user-stories/</p> <p>Example:</p> <pre><code>{\n    \"userStoriesConfig\": {\n        \"fields\": [\n            \"Id\",\n            \"Name\",\n            \"Ticket_Number__c\",\n            \"copado__User_Story_Title__c\",\n            \"CreatedBy.Name\",\n            \"copado__Release__r.Name\",\n            \"copado__Environment__r.Name\"\n        ],\n        \"table\": \"copado__User_Story__c\",\n        \"where\": \"copado__Environment__r.Name ='UAT'\",\n        \"whereChoices\": {\n          \"UAT all\": \"copado__Environment__r.Name ='UAT'\",\n          \"UAT postponed\": \"copado__Environment__r.Name ='UAT' AND copado__Release__r.Name = 'postponed'\",\n          \"UAT in progress\": \"copado__Environment__r.Name ='UAT' AND copado__Release__r.Name != 'postponed' AND copado__Release__r.Name != 'cancelled'\"\n        },\n        \"orderBy\": \"Ticket_Number__c ASC\",\n        \"ticketField\": \"Ticket_Number__c\",\n        \"reportFields\": [\n            { \"key\": \"US Name\", \"path\": \"Name\" },\n            { \"key\": \"US SN Identifier\", \"path\": \"Ticket_Number__c\" },\n            { \"key\": \"US Title\", \"path\": \"copado__User_Story_Title__c\" },\n            { \"key\": \"US Created By\", \"path\": \"CreatedBy.Name\" },\n            { \"key\": \"US Environment\", \"path\": \"copado__Environment__r.Name\" },\n            { \"key\": \"US Release\", \"path\": \"copado__Release__r.Name\" },\n            { \"key\": \"SN Identifier\", \"path\": \"serviceNowInfo.number\", \"default\": \"NOT FOUND\" },\n            { \"key\": \"SN Title\", \"path\": \"serviceNowInfo.short_description\", \"default\": \"NOT FOUND\" },\n            { \"key\": \"SN Status\", \"path\": \"serviceNowInfo.state\", \"default\": \"NOT FOUND\" },\n            { \"key\": \"SN Created By\", \"path\": \"serviceNowInfo.sys_created_by\", \"default\": \"NOT FOUND\" },\n            { \"key\": \"SN URL\", \"special\": \"serviceNowTicketUrl\" }\n        ]\n    },\n    \"serviceNowConfig\": {\n        \"tables\": [\n            { \"tableName\": \"dmn_demand\" },\n            { \"tableName\": \"incident\" }\n        ]\n    }\n}\n</code></pre>"},{"location":"hardis/misc/servicenow-report/#parameters","title":"Parameters","text":"Name Type Description Default Required Options config-c option Path to JSON config file containing user stories and ServiceNow configuration debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration where-choice-w option Where selection for user stories. If not provided, you will be prompted to select one from the config file."},{"location":"hardis/misc/servicenow-report/#examples","title":"Examples","text":"<pre><code>$ sf hardis:misc:servicenow-report\n</code></pre> <pre><code>$ sf hardis:misc:servicenow-report --config config/user-stories/my-config.json --where-choice \"UAT all\"\n</code></pre>"},{"location":"hardis/misc/toml2csv/","title":"toml2csv","text":""},{"location":"hardis/misc/toml2csv/#hardismisctoml2csv","title":"hardis:misc:toml2csv","text":""},{"location":"hardis/misc/toml2csv/#description","title":"Description","text":""},{"location":"hardis/misc/toml2csv/#command-behavior","title":"Command Behavior","text":"<p>Splits a TOML (Tom's Obvious, Minimal Language) file into multiple CSV files, applying transformations and filters based on a JSON configuration.</p> <p>This command is designed for data processing workflows where data is initially stored in a TOML-like format and needs to be converted into structured CSV files for import into Salesforce or other systems. It offers powerful capabilities for data manipulation and cleansing during the conversion process.</p> <p>Key functionalities:</p> <ul> <li>TOML Parsing: Reads an input TOML file, identifying sections (e.g., <code>[COMPTES]</code>) and processing data lines within each section.</li> <li>Configurable Transformations: Applies transformations to individual data fields based on a JSON configuration file (<code>transfoConfig.json</code>). This can include:<ul> <li>Date Formatting: Reformatting date strings to a desired output format.</li> <li>Enum Transcoding: Mapping input values to predefined output values using lookup tables (enums).</li> <li>Concatenation: Combining multiple input fields into a single output field.</li> <li>Record Type ID Resolution: Dynamically retrieving Salesforce Record Type IDs.</li> </ul> </li> <li>Data Filtering: Filters data lines based on specified criteria (e.g., date ranges, parent ID existence, column values), allowing you to exclude irrelevant data from the output.</li> <li>Duplicate Removal: Optionally removes duplicate lines from the output CSV files.</li> <li>Error Handling and Reporting: Catches transformation errors, logs them, and can output problematic lines to separate error CSV files for review.</li> <li>CSV Output: Generates one or more CSV files, with configurable separators and headers, ready for Salesforce Data Loader or other import tools.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File I/O: Uses <code>fs-extra</code> for file system operations (reading TOML, writing CSVs, creating directories) and <code>readline</code> for efficient line-by-line processing of large TOML files.</li> <li>Configuration Loading: Reads and parses the <code>transfoConfig.json</code> file, which defines the mapping rules, transformations, and filters. It also loads external enum files if specified in the configuration.</li> <li>Data Processing Pipeline: Iterates through each line of the TOML file:<ul> <li>Identifies section headers to determine the current data context.</li> <li>Parses data lines based on the input separator.</li> <li>Applies filters defined in <code>transfoConfig</code> to decide whether to process or skip a line.</li> <li>Performs data transformations (date formatting, enum lookups, concatenations) as specified in the <code>transfoConfig</code>.</li> <li>Resolves Salesforce Record Type IDs by querying the target org using <code>getRecordTypeId</code>.</li> <li>Formats the output CSV cells, handling special characters and separators.</li> <li>Writes the transformed data to the appropriate CSV output stream.</li> </ul> </li> <li>Error Management: Catches exceptions during transformation and logs detailed error messages, including the problematic line and the reason for the error.</li> <li>Progress Indication: Uses <code>ora</code> for a command-line spinner to provide visual feedback on the processing progress.</li> <li>Statistics Collection: Tracks various statistics, such as the number of processed lines, successful lines, error lines, and filtered lines, providing a summary at the end.</li> <li>File Copying: Optionally copies generated CSV files to other specified locations.</li> </ul>"},{"location":"hardis/misc/toml2csv/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) filtersections-l option List of sections to process (if not set, all sections will be processed) flags-dir option undefined json boolean Format output as json. outputdir-z option Output directory skipauth boolean Skip authentication check when a default username is required skiptransfo-s boolean Do not apply transformation to input data target-org-o option undefined tomlfile-f option Input TOML file path transfoconfig-t option Path to JSON config file for mapping and transformation websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/misc/toml2csv/#examples","title":"Examples","text":"<pre><code>$ sf hardis:misc:toml2csv --tomlfile 'D:/clients/toto/V1_full.txt' \n</code></pre> <pre><code>$ sf hardis:misc:toml2csv --skiptransfo --tomlfile 'D:/clients/toto/V1_full.txt' \n</code></pre> <pre><code>$ sf hardis:misc:toml2csv --skiptransfo --tomlfile 'D:/clients/toto/V1_full.txt' --outputdir 'C:/tmp/rrrr'\n</code></pre> <pre><code>$ NODE_OPTIONS=--max_old_space_size=9096 sf hardis:misc:toml2csv --skiptransfo --tomlfile './input/V1.txt' --outputdir './output' --filtersections 'COMPTES,SOUS'\n</code></pre>"},{"location":"hardis/org/connect/","title":"connect","text":""},{"location":"hardis/org/connect/#hardisorgconnect","title":"hardis:org:connect","text":""},{"location":"hardis/org/connect/#description","title":"Description","text":""},{"location":"hardis/org/connect/#command-behavior","title":"Command Behavior","text":"<p>Connects to a Salesforce org without setting it as the default username, and optionally opens the org in a web browser.</p> <p>This command provides a quick way to establish a connection to a Salesforce organization for one-off tasks or when you don't want to change your default org. It's useful for accessing different environments without disrupting your primary development setup.</p> <p>Key functionalities:</p> <ul> <li>Org Selection: Prompts the user to select an existing Salesforce org or connect to a new one.</li> <li>Non-Default Connection: Ensures that the selected org is connected but does not set it as the default username for subsequent Salesforce CLI commands.</li> <li>Browser Launch (Optional): Offers to open the connected org directly in your default web browser, providing immediate access to the Salesforce UI.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Interactive Org Prompt: Uses the <code>promptOrg</code> utility to display a list of available Salesforce orgs and allows the user to select one or initiate a new authentication flow.</li> <li>Salesforce CLI Integration: Internally, it leverages Salesforce CLI commands to establish the connection to the chosen org. It does not use <code>sf config set target-org</code> to avoid changing the default org.</li> <li>Browser Launch: If the user opts to open the org in a browser, it executes the <code>sf org open</code> command, passing the selected org's username as the target.</li> <li>Environment Awareness: Checks the <code>isCI</code> flag to determine whether to offer the browser launch option, as it's typically not applicable in continuous integration environments.</li> </ul>"},{"location":"hardis/org/connect/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/connect/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:connect\n</code></pre>"},{"location":"hardis/org/create/","title":"create","text":""},{"location":"hardis/org/create/#hardisorgcreate","title":"hardis:org:create","text":""},{"location":"hardis/org/create/#description","title":"Description","text":""},{"location":"hardis/org/create/#command-behavior","title":"Command Behavior","text":"<p>Creates and initializes a Salesforce sandbox org.</p> <p>This command automates the process of provisioning a new sandbox environment, making it ready for development or testing. It handles various aspects of sandbox creation and initial setup, reducing manual effort and ensuring consistency.</p> <p>Key functionalities:</p> <ul> <li>Sandbox Definition: Uses a <code>project-sandbox-def.json</code> file (if present in <code>config/</code>) to define sandbox properties like name, description, license type, and source sandbox. If not provided, it uses default values.</li> <li>Dynamic Naming: Generates a unique sandbox alias based on the current username, Git branch, and a timestamp.</li> <li>Sandbox Creation: Executes the Salesforce CLI command to create the sandbox, including setting it as the default org and waiting for its completion.</li> <li>User Update: Updates the main sandbox user's details (e.g., Last Name, First Name) and can fix country values or marketing user permissions if needed.</li> <li>Initialization Scripts: Runs predefined Apex scripts, assigns permission sets, and imports initial data into the newly created sandbox, based on configurations in your project.</li> <li>Error Handling: Provides detailed error messages for common sandbox creation issues, including Salesforce-specific errors.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Configuration Loading: It loads project and user configurations using <code>getConfig</code> to retrieve settings like <code>projectName</code>, <code>devHubAlias</code>, and <code>userEmail</code>.</li> <li>Git Integration: Retrieves the current Git branch name using <code>getCurrentGitBranch</code> to inform sandbox naming.</li> <li>File System Operations: Uses <code>fs-extra</code> to manage sandbox definition files (reading <code>project-sandbox-def.json</code>, writing a user-specific definition file) and temporary directories.</li> <li>Salesforce CLI Execution: Executes Salesforce CLI commands (<code>sf org create sandbox</code>, <code>sf data get record</code>, <code>sf data update record</code>, <code>sf org open</code>) using <code>execSfdxJson</code> for sandbox creation, user updates, and opening the org in a browser.</li> <li>Cache Management: Clears the Salesforce CLI org list cache (<code>clearCache('sf org list')</code>) to ensure the newly created sandbox is immediately recognized.</li> <li>Initialization Utilities: Calls a suite of utility functions (<code>initPermissionSetAssignments</code>, <code>initApexScripts</code>, <code>initOrgData</code>) to perform post-creation setup tasks.</li> <li>Error Assertions: Uses <code>assert</code> to check the success of Salesforce CLI commands and provides custom error messages for better debugging.</li> <li>WebSocket Communication: Uses <code>WebSocketClient.sendRefreshStatusMessage</code> to notify connected VS Code clients about the new sandbox.</li> <li>Required Plugin Check: Explicitly lists <code>sfdmu</code> as a required plugin, indicating its role in data initialization.</li> </ul>"},{"location":"hardis/org/create/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/create/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:create\n</code></pre>"},{"location":"hardis/org/multi-org-query/","title":"multi-org-query","text":""},{"location":"hardis/org/multi-org-query/#hardisorgmulti-org-query","title":"hardis:org:multi-org-query","text":""},{"location":"hardis/org/multi-org-query/#description","title":"Description","text":"<p>Executes a SOQL query across multiple Salesforce organizations and consolidates the results into a single report.</p> <p>This command is highly valuable for administrators and developers who need to gather consistent data from various Salesforce environments (e.g., sandboxes, production orgs) for reporting, auditing, or comparison purposes. It streamlines the process of querying multiple orgs, eliminating the need to log into each one individually.</p> <p>Key functionalities:</p> <ul> <li>Flexible Query Input: You can provide a custom SOQL query directly using the <code>--query</code> flag, or select from a list of predefined query templates (e.g., <code>active-users</code>, <code>all-users</code>) using the <code>--query-template</code> flag.</li> <li>Multiple Org Targeting: Specify a list of Salesforce org usernames or aliases using the <code>--target-orgs</code> flag. If not provided, an interactive menu will allow you to select multiple authenticated orgs.</li> <li>Consolidated Report: All query results from the different orgs are combined into a single CSV file, making data analysis and comparison straightforward.</li> <li>Authentication Handling: For CI/CD jobs, ensure that the target orgs are already authenticated using Salesforce CLI. In interactive mode, it will prompt for authentication if an org is not connected.</li> </ul> <p>Visual Demo:</p> <p></p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Org Authentication and Connection: It uses <code>AuthInfo.create</code> and <code>Connection.create</code> to establish connections to each target Salesforce org. It also leverages <code>makeSureOrgIsConnected</code> and <code>promptOrgList</code> for interactive org selection and authentication checks.</li> <li>SOQL Query Execution (Bulk API): It executes the specified SOQL query against each connected org using <code>bulkQuery</code> for efficient data retrieval, especially for large datasets.</li> <li>Data Aggregation: It collects the records from each org's query result and adds metadata about the source org (instance URL, alias, username) to each record, enabling easy identification of data origin in the consolidated report.</li> <li>Report Generation: It uses <code>generateCsvFile</code> to create the final CSV report and <code>generateReportPath</code> to determine the output file location.</li> <li>Interactive Prompts: The <code>prompts</code> library is used to guide the user through selecting a query template or entering a custom query, and for selecting target orgs if not provided as command-line arguments.</li> <li>Error Handling: It logs errors for any orgs where the query fails, ensuring that the overall process continues and provides a clear summary of successes and failures.</li> </ul>"},{"location":"hardis/org/multi-org-query/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv query-q option SOQL Query to run on multiple orgs query-template-t option Use one of predefined SOQL Query templates active-usersall-users skipauth boolean Skip authentication check when a default username is required target-orgs-x option List of org usernames or aliases. websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/multi-org-query/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:multi-org-query\n</code></pre> <pre><code>$ sf hardis:org:multi-org-query --query \"SELECT Id,Username FROM User\"\n</code></pre> <pre><code>$ sf hardis:org:multi-org-query --query \"SELECT Id,Username FROM User\" --target-orgs nico@cloudity.com nico@cloudity.com.preprod nico@cloudity.com.uat\n</code></pre> <pre><code>$ sf hardis:org:multi-org-query --query-template active-users --target-orgs nico@cloudity.com nico@cloudity.com.preprod nico@cloudity.com.uat\n</code></pre>"},{"location":"hardis/org/select/","title":"select","text":""},{"location":"hardis/org/select/#hardisorgselect","title":"hardis:org:select","text":""},{"location":"hardis/org/select/#description","title":"Description","text":""},{"location":"hardis/org/select/#command-behavior","title":"Command Behavior","text":"<p>Allows you to select a Salesforce org and set it as your default, optionally filtering by Dev Hub or scratch orgs.</p> <p>This command simplifies switching between different Salesforce environments. It presents an interactive list of your authenticated orgs, enabling you to quickly set a new default org for subsequent Salesforce CLI commands.</p> <p>Key functionalities:</p> <ul> <li>Interactive Org Selection: Displays a list of your authenticated Salesforce orgs, allowing you to choose one.</li> <li>Default Org Setting: Sets the selected org as the default for your Salesforce CLI environment.</li> <li>Dev Hub Filtering: The <code>--devhub</code> flag filters the list to show only Dev Hub orgs.</li> <li>Scratch Org Filtering: The <code>--scratch</code> flag filters the list to show only scratch orgs related to your default Dev Hub.</li> <li>Connection Verification: Ensures that the selected org is connected and prompts for re-authentication if necessary.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Interactive Org Prompt: Uses the <code>promptOrg</code> utility to display a list of available Salesforce orgs and allows the user to select one. It passes the <code>devHub</code> and <code>scratch</code> flags to <code>promptOrg</code> to filter the displayed list.</li> <li>Default Org Configuration: The <code>promptOrg</code> utility (internally) handles setting the selected org as the default using Salesforce CLI's configuration mechanisms.</li> <li>Connection Check: It calls <code>makeSureOrgIsConnected</code> to verify the connection status of the selected org and guides the user to re-authenticate if the org is not connected.</li> <li>Salesforce CLI Integration: It leverages Salesforce CLI's underlying commands for org listing and authentication.</li> </ul>"},{"location":"hardis/org/select/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) devhub-h boolean Also connect associated DevHub flags-dir option undefined json boolean Format output as json. prompt-default-e boolean Prompt to set the selected org as default scratch-s boolean Select scratch org related to default DevHub skipauth boolean Skip authentication check when a default username is required username-t option Username of the org you want to authenticate (overrides the interactive prompt) websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/select/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:select\n</code></pre>"},{"location":"hardis/org/community/update/","title":"update","text":""},{"location":"hardis/org/community/update/#hardisorgcommunityupdate","title":"hardis:org:community:update","text":""},{"location":"hardis/org/community/update/#description","title":"Description","text":""},{"location":"hardis/org/community/update/#command-behavior","title":"Command Behavior","text":"<p>Updates the status of one or more Salesforce Experience Cloud (Community) networks.</p> <p>This command provides a way to programmatically change the status of your Salesforce Communities, allowing you to manage their availability. This is particularly useful for:</p> <ul> <li>Maintenance: Taking communities offline for planned maintenance (<code>DownForMaintenance</code>).</li> <li>Activation/Deactivation: Bringing communities online or offline (<code>Live</code>, <code>DownForMaintenance</code>).</li> <li>Automation: Integrating community status changes into CI/CD pipelines or scheduled jobs.</li> </ul> <p>Key functionalities:</p> <ul> <li>Network Selection: You can specify one or more community network names (separated by commas) using the <code>--name</code> flag.</li> <li>Status Update: You can set the new status for the selected communities using the <code>--status</code> flag. Supported values are <code>Live</code> and <code>DownForMaintenance</code>.</li> <li>Confirmation Prompt: In non-CI environments, it provides a confirmation prompt before executing the update, ensuring intentional changes.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Salesforce SOQL Query: It first queries the Salesforce <code>Network</code> object using SOQL to retrieve the <code>Id</code>, <code>Name</code>, and <code>Status</code> of the specified communities. This ensures that only existing communities are targeted.</li> <li>SObject Update: It then constructs an array of <code>Network</code> sObjects with their <code>Id</code> and the new <code>Status</code> and performs a DML update operation using <code>conn.sobject(\"Network\").update()</code>. The <code>allOrNone: false</code> option is used to allow partial success in case some updates fail.</li> <li>Error Handling and Reporting: It iterates through the update results, logging success or failure for each community. It also provides a summary of successful and erroneous updates.</li> <li>User Interaction: Uses <code>prompts</code> to confirm the update action with the user when not running in a CI environment.</li> <li>Salesforce Connection: Establishes a connection to the target Salesforce org using the <code>target-org</code> flag.</li> </ul>"},{"location":"hardis/org/community/update/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. name-n option List of Networks Names that you want to update, separated by comma status-s option New status for the community, available values are: Live, DownForMaintenance target-org-o option undefined"},{"location":"hardis/org/community/update/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:community:update --name 'MyNetworkName' --status DownForMaintenance\n</code></pre> <pre><code>$ sf hardis:org:community:update --name 'MyNetworkName,MySecondNetworkName' --status Live\n</code></pre>"},{"location":"hardis/org/configure/data/","title":"data","text":""},{"location":"hardis/org/configure/data/#hardisorgconfiguredata","title":"hardis:org:configure:data","text":""},{"location":"hardis/org/configure/data/#description","title":"Description","text":""},{"location":"hardis/org/configure/data/#command-behavior","title":"Command Behavior","text":"<p>Configures a Salesforce Data Migration Utility (SFDMU) project for data export and import operations.</p> <p>This command assists in setting up SFDMU workspaces, which are essential for managing data within your Salesforce environments. It streamlines the creation of <code>export.json</code> files and related configurations, enabling efficient data seeding, migration, and synchronization.</p> <p>Key functionalities:</p> <ul> <li>Template-Based Configuration: Allows you to choose from predefined SFDMU templates or start with a blank configuration. Templates can pre-populate <code>export.json</code> with common data migration scenarios.</li> <li>Interactive Setup: Guides you through the process of defining the SFDMU project folder name, label, and description.</li> <li><code>export.json</code> Generation: Creates the <code>export.json</code> file, which is the core configuration file for SFDMU, defining objects to export/import, queries, and operations.</li> <li>Additional File Generation: Can generate additional configuration files, such as a <code>badwords.json</code> file for data filtering scenarios.</li> <li>Scratch Org Integration: Offers to automatically configure the SFDMU project to be used for data import when initializing a new scratch org, ensuring consistent test data across development environments.</li> </ul> <p>See this article for a practical example:</p> <p></p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>SFDMU Integration: It acts as a setup wizard for SFDMU, generating the necessary configuration files that the <code>sfdmu</code> plugin consumes.</li> <li>Interactive Prompts: Uses the <code>prompts</code> library to gather user input for various configuration parameters, such as the data path, label, and description.</li> <li>File System Operations: Employs <code>fs-extra</code> to create directories (e.g., <code>data/your-project-name/</code>) and write the <code>export.json</code> and any additional configuration files.</li> <li>JSON Manipulation: Constructs the <code>export.json</code> content dynamically based on user input and selected templates, including defining objects, queries, and operations.</li> <li>PascalCase Conversion: Uses <code>pascalcase</code> to format the SFDMU folder name consistently.</li> <li>Configuration Persistence: Updates the project's <code>sfdx-hardis.yml</code> file (via <code>setConfig</code>) to include the newly configured data package if it's intended for scratch org initialization.</li> <li>WebSocket Communication: Uses <code>WebSocketClient.requestOpenFile</code> to open the generated <code>export.json</code> file in VS Code, facilitating immediate configuration.</li> <li>Required Plugin Check: Explicitly lists <code>sfdmu</code> as a required plugin, ensuring the necessary dependency is present.</li> </ul>"},{"location":"hardis/org/configure/data/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/configure/data/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:configure:data\n</code></pre>"},{"location":"hardis/org/configure/files/","title":"files","text":""},{"location":"hardis/org/configure/files/#hardisorgconfigurefiles","title":"hardis:org:configure:files","text":""},{"location":"hardis/org/configure/files/#description","title":"Description","text":""},{"location":"hardis/org/configure/files/#command-behavior","title":"Command Behavior","text":"<p>Configures a project for exporting file attachments from a Salesforce org.</p> <p>This command streamlines the setup of configurations for mass downloading files (such as Notes, Attachments, or Salesforce Files) associated with Salesforce records. It's particularly useful for data backups, migrations, or integrating Salesforce files with external systems.</p> <p>Key functionalities:</p> <ul> <li>Template-Based Configuration: Allows you to choose from predefined templates for common file export scenarios or start with a blank configuration. Templates can pre-populate the export settings.</li> <li>Interactive Setup: Guides you through defining the export project folder name and other export parameters.</li> <li><code>export.json</code> Generation: Creates an <code>export.json</code> file within the designated project folder. This file contains the configuration for the file export operation, including:<ul> <li>SOQL Query: A SOQL query to select the parent records from which files will be exported.</li> <li>File Types: Specifies which types of files (e.g., <code>ContentVersion</code>, <code>Attachment</code>) to include.</li> <li>File Size Filtering: Minimum file size in KB to filter files during export (files smaller than this will be skipped).</li> <li>Output Folder/File Naming: Defines how the exported files and their containing folders will be named based on record fields.</li> <li>Overwrite Options: Controls whether existing files or parent records should be overwritten during the export.</li> </ul> </li> </ul> <p>See this article for a practical example:</p> <p></p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Template Selection: It uses <code>selectTemplate</code> to present predefined file export templates or a blank option to the user.</li> <li>Interactive Prompts: The <code>promptFilesExportConfiguration</code> utility is used to gather detailed export settings from the user, such as the SOQL query, file types, and naming conventions.</li> <li>File System Operations: Employs <code>fs-extra</code> to create the project directory (<code>files/your-project-name/</code>) and write the <code>export.json</code> configuration file.</li> <li>PascalCase Conversion: Uses <code>pascalcase</code> to format the files export path consistently.</li> <li>JSON Serialization: Serializes the collected export configuration into a JSON string and writes it to <code>export.json</code>.</li> <li>WebSocket Communication: Uses <code>WebSocketClient.requestOpenFile</code> to open the generated <code>export.json</code> file in VS Code, facilitating immediate configuration.</li> </ul>"},{"location":"hardis/org/configure/files/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/configure/files/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:configure:files\n</code></pre>"},{"location":"hardis/org/configure/monitoring/","title":"monitoring","text":""},{"location":"hardis/org/configure/monitoring/#hardisorgconfiguremonitoring","title":"hardis:org:configure:monitoring","text":""},{"location":"hardis/org/configure/monitoring/#description","title":"Description","text":""},{"location":"hardis/org/configure/monitoring/#command-behavior","title":"Command Behavior","text":"<p>Configures the monitoring of a Salesforce org within a dedicated Git repository.</p> <p>This command streamlines the setup of continuous monitoring for a Salesforce organization, ensuring that changes and health metrics are tracked and reported. It is designed to be run within a Git repository specifically dedicated to monitoring configurations.</p> <p>Key functionalities include:</p> <ul> <li>Git Repository Validation: Ensures the current Git repository's name contains \"monitoring\" to enforce best practices for separating monitoring configurations from deployment sources.</li> <li>Prerequisite Check: Guides the user to confirm that necessary monitoring prerequisites (CI/CD variables, permissions) are configured on their Git server.</li> <li>Org Selection: Prompts the user to select or connect to the Salesforce org they wish to monitor.</li> <li>Monitoring Branch Creation: Creates or checks out a dedicated Git branch (e.g., <code>monitoring_yourinstanceurl</code>) for the monitoring configuration.</li> <li>SFDX Project Setup: Initializes an SFDX project structure within the repository if it doesn't already exist, and copies default monitoring files.</li> <li>Configuration File Update: Updates the local <code>.sfdx-hardis.yml</code> file with the target org's username and instance URL.</li> <li>SSL Certificate Generation: Generates an SSL certificate for secure authentication to the monitored org.</li> <li>Automated Commit and Push: Offers to automatically commit and push the generated configuration files to the remote Git repository.</li> <li>Scheduling Guidance: Provides instructions and links for scheduling the monitoring job on the Git server.</li> </ul> Technical explanations <p>The command's technical implementation involves a series of Git operations, file system manipulations, and Salesforce CLI interactions:</p> <ul> <li>Git Operations: Utilizes <code>ensureGitRepository</code>, <code>getGitRepoName</code>, <code>execCommand</code> (for <code>git add</code>, <code>git stash</code>), <code>ensureGitBranch</code>, and <code>gitAddCommitPush</code> to manage the Git repository, branches, and commits.</li> <li>Interactive Prompts: Employs the <code>prompts</code> library to interact with the user for confirmations and selections.</li> <li>File System Management: Uses <code>fs-extra</code> for copying default monitoring files (<code>defaults/monitoring</code>) and managing the SFDX project structure.</li> <li>Salesforce CLI Integration: Calls <code>sf project generate</code> to create a new SFDX project and uses <code>promptOrg</code> for Salesforce org authentication and selection.</li> <li>Configuration Management: Updates the <code>.sfdx-hardis.yml</code> file using <code>setInConfigFile</code> to store org-specific monitoring configurations.</li> <li>SSL Certificate Generation: Leverages <code>generateSSLCertificate</code> to create the necessary SSL certificates for JWT-based authentication to the Salesforce org.</li> <li>External Tool Integration: Requires <code>openssl</code> to be installed on the system for SSL certificate generation.</li> <li>WebSocket Communication: Uses <code>WebSocketClient.sendRunSfdxHardisCommandMessage</code> to restart the command in VS Code if the default org changes, and <code>WebSocketClient.sendRefreshStatusMessage</code> to update the status.</li> </ul>"},{"location":"hardis/org/configure/monitoring/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. orginstanceurl option Org instance url (technical param, do not use manually) skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/configure/monitoring/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:configure:monitoring\n</code></pre>"},{"location":"hardis/org/data/delete/","title":"delete","text":""},{"location":"hardis/org/data/delete/#hardisorgdatadelete","title":"hardis:org:data:delete","text":""},{"location":"hardis/org/data/delete/#description","title":"Description","text":""},{"location":"hardis/org/data/delete/#command-behavior","title":"Command Behavior","text":"<p>Deletes records in multiple Salesforce objects using an SFDMU (Salesforce Data Migration Utility) workspace.</p> <p>This command provides a powerful and controlled way to remove data from your Salesforce orgs based on configurations defined in an SFDMU workspace. It's particularly useful for:</p> <ul> <li>Data Cleanup: Removing test data, obsolete records, or sensitive information.</li> <li>Environment Reset: Preparing sandboxes for new development cycles by clearing specific data sets.</li> <li>Compliance: Deleting data to meet regulatory requirements.</li> </ul> <p>Important Considerations for Production Environments:</p> <p>If you intend to run this command in a production environment, you must:</p> <ul> <li>Set <code>runnableInProduction</code> to <code>true</code> in your <code>export.json</code> file within the SFDMU workspace.</li> <li>Define <code>sfdmuCanModify: YOUR_INSTANCE_URL</code> in your branch-specific configuration file (e.g., <code>config/branches/.sfdx-hardis.YOUR_BRANCH.yml</code>) to explicitly authorize data modification for that instance.</li> </ul> Technical explanations <p>The command's technical implementation relies heavily on the SFDMU plugin:</p> <ul> <li>SFDMU Integration: It leverages the <code>sfdmu</code> plugin to perform the actual data deletion operations. The command acts as a wrapper, providing an assisted interface for SFDMU execution.</li> <li>Workspace Selection: If the SFDMU workspace path is not provided via the <code>--path</code> flag, it interactively prompts the user to select a data workspace using <code>selectDataWorkspace</code>.</li> <li>Org Selection: It ensures that a target Salesforce org is selected (either via the <code>--target-org</code> flag or through an interactive prompt using <code>promptOrgUsernameDefault</code>) to specify where the data deletion will occur.</li> <li><code>deleteData</code> Utility: The core logic for executing the SFDMU deletion process is encapsulated within the <code>deleteData</code> utility function, which takes the SFDMU workspace path and the target username as arguments.</li> <li>Environment Awareness: It checks the <code>isCI</code> flag to determine whether to run in an interactive mode (prompting for user input) or a non-interactive mode (relying solely on command-line flags).</li> <li>Required Plugin: It explicitly lists <code>sfdmu</code> as a required plugin, ensuring that the necessary dependency is in place before execution.</li> </ul>"},{"location":"hardis/org/data/delete/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. path-p option Path to the sfdmu workspace folder skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/data/delete/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:data:delete\n</code></pre>"},{"location":"hardis/org/data/export/","title":"export","text":""},{"location":"hardis/org/data/export/#hardisorgdataexport","title":"hardis:org:data:export","text":""},{"location":"hardis/org/data/export/#description","title":"Description","text":""},{"location":"hardis/org/data/export/#command-behavior","title":"Command Behavior","text":"<p>Exports data from a Salesforce org using an SFDMU (Salesforce Data Migration Utility) project.</p> <p>This command facilitates the extraction of data from your Salesforce environments based on configurations defined in an SFDMU workspace. It's a powerful tool for various data-related tasks, including:</p> <ul> <li>Data Backup: Creating snapshots of your Salesforce data.</li> <li>Data Migration: Extracting data for transfer to another Salesforce org or external system.</li> <li>Reporting and Analysis: Exporting specific datasets for detailed analysis outside of Salesforce.</li> <li>Data Seeding: Preparing data for import into other environments.</li> </ul> <p>Key functionalities:</p> <ul> <li>SFDMU Workspace Integration: Leverages an existing SFDMU workspace (defined by an <code>export.json</code> file) to determine which objects and records to export, along with any filtering or transformation rules.</li> <li>Interactive Workspace Selection: If the SFDMU workspace path is not provided via the <code>--path</code> flag, it interactively prompts the user to select one.</li> <li>Org Selection: Ensures that a target Salesforce org is selected (either via the <code>--target-org</code> flag or through an interactive prompt) to specify the source of the data export.</li> </ul> <p>See this article for a practical example:</p> <p></p> Technical explanations <p>The command's technical implementation relies heavily on the SFDMU plugin:</p> <ul> <li>SFDMU Integration: It acts as a wrapper around the <code>sfdmu</code> plugin, which performs the actual data export operations. The command provides an assisted interface for SFDMU execution.</li> <li><code>exportData</code> Utility: The core logic for executing the SFDMU export process is encapsulated within the <code>exportData</code> utility function, which takes the SFDMU workspace path and the source username as arguments.</li> <li>Interactive Prompts: Uses <code>selectDataWorkspace</code> to allow the user to choose an SFDMU project and <code>promptOrgUsernameDefault</code> for selecting the source Salesforce org when not running in a CI environment.</li> <li>Environment Awareness: Checks the <code>isCI</code> flag to determine whether to run in an interactive mode (prompting for user input) or a non-interactive mode (relying solely on command-line flags).</li> <li>Required Plugin: It explicitly lists <code>sfdmu</code> as a required plugin, ensuring that the necessary dependency is in place before execution.</li> </ul>"},{"location":"hardis/org/data/export/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. no-prompt-r boolean Do not prompt for Org, use default org path-p option Path to the sfdmu workspace folder project-name-n option Name of the sfdmu project to use (if not defined, you will be prompted to select one) skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/data/export/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:data:export\n</code></pre> <pre><code>$ sf hardis:org:data:export --project-name MyDataProject --target-org my-org@example.com\n</code></pre> <pre><code>$ sf hardis:org:data:export --path ./scripts/data/MyDataProject --no-prompt --target-org my-org@example.com\n</code></pre>"},{"location":"hardis/org/data/import/","title":"import","text":""},{"location":"hardis/org/data/import/#hardisorgdataimport","title":"hardis:org:data:import","text":""},{"location":"hardis/org/data/import/#description","title":"Description","text":"<p>Import/Load data in an org using a SFDX Data Loader Project</p> <p>If you need to run this command in a production org, you need to either:</p> <ul> <li>Define sfdmuCanModify in your .sfdx-hardis.yml config file. (Example: <code>sfdmuCanModify: prod-instance.my.salesforce.com</code>)</li> <li>Define an environment variable SFDMU_CAN_MODIFY. (Example: <code>SFDMU_CAN_MODIFY=prod-instance.my.salesforce.com</code>)</li> </ul> <p>See article:</p> <p></p>"},{"location":"hardis/org/data/import/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. no-prompt-r boolean Do not prompt for Org, use default org path-p option Path to the sfdmu workspace folder project-name-n option Name of the sfdmu project to use (if not defined, you will be prompted to select one) skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/data/import/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:data:import\n</code></pre> <pre><code>$ sf hardis:org:data:import --project-name MyDataProject --target-org my-org@example.com\n</code></pre> <pre><code>$ sf hardis:org:data:import --path ./scripts/data/MyDataProject --no-prompt --target-org my-org@example.com\n</code></pre> <pre><code>$ SFDMU_CAN_MODIFY=prod-instance.my.salesforce.com sf hardis:org:data:import --project-name MyDataProject --target-org prod@example.com\n</code></pre>"},{"location":"hardis/org/diagnose/audittrail/","title":"audittrail","text":""},{"location":"hardis/org/diagnose/audittrail/#hardisorgdiagnoseaudittrail","title":"hardis:org:diagnose:audittrail","text":""},{"location":"hardis/org/diagnose/audittrail/#description","title":"Description","text":"<p>Export Audit trail into a CSV file with selected criteria, and highlight suspect actions</p> <p>Also detects updates of Custom Settings values (disable by defining <code>SKIP_AUDIT_TRAIL_CUSTOM_SETTINGS=true</code>)</p> <p>Regular setup actions performed in major orgs are filtered.</p> <ul> <li>\"\"<ul> <li>createScratchOrg</li> <li>changedsenderemail</li> <li>deleteScratchOrg</li> <li>loginasgrantedtopartnerbt</li> </ul> </li> <li>Certificate and Key Management<ul> <li>insertCertificate</li> </ul> </li> <li>Custom App Licenses<ul> <li>addeduserpackagelicense</li> <li>granteduserpackagelicense</li> <li>revokeduserpackagelicense</li> </ul> </li> <li>Customer Portal<ul> <li>createdcustomersuccessuser</li> <li>CSPUserDisabled</li> </ul> </li> <li>Currency<ul> <li>updateddatedexchrate</li> </ul> </li> <li>Data Management<ul> <li>queueMembership</li> </ul> </li> <li>Email Administration<ul> <li>dkimRotationPreparationSuccessful</li> <li>dkimRotationSuccessful</li> </ul> </li> <li>External Objects<ul> <li>xdsEncryptedFieldChange</li> </ul> </li> <li>Groups<ul> <li>groupMembership</li> </ul> </li> <li>Holidays<ul> <li>holiday_insert</li> </ul> </li> <li>Inbox mobile and legacy desktop apps<ul> <li>enableSIQUserNonEAC</li> <li>siqUserAcceptedTOS</li> </ul> </li> <li>Manage Users<ul> <li>activateduser</li> <li>createduser</li> <li>changedcommunitynickname</li> <li>changedemail</li> <li>changedfederationid</li> <li>changedpassword</li> <li>changedinteractionuseroffon</li> <li>changedinteractionuseronoff</li> <li>changedmarketinguseroffon</li> <li>changedmarketinguseronoff</li> <li>changedofflineuseroffon</li> <li>changedprofileforuserstdtostd</li> <li>changedprofileforuser</li> <li>changedprofileforusercusttostd</li> <li>changedprofileforuserstdtocust</li> <li>changedroleforusertonone</li> <li>changedroleforuser</li> <li>changedroleforuserfromnone</li> <li>changedUserAdminVerifiedStatusVerified</li> <li>changedUserEmailVerifiedStatusUnverified</li> <li>changedUserEmailVerifiedStatusVerified</li> <li>changedknowledgeuseroffon</li> <li>changedsfcontentuseroffon</li> <li>changedsupportuseroffon</li> <li>changedusername</li> <li>changedUserPhoneNumber</li> <li>changedUserPhoneVerifiedStatusUnverified</li> <li>changedUserPhoneVerifiedStatusVerified</li> <li>deactivateduser</li> <li>deleteAuthenticatorPairing</li> <li>deleteTwoFactorInfo2</li> <li>deleteTwoFactorTempCode</li> <li>frozeuser</li> <li>insertAuthenticatorPairing</li> <li>insertTwoFactorInfo2</li> <li>insertTwoFactorTempCode</li> <li>lightningloginenroll</li> <li>PermSetAssign</li> <li>PermSetGroupAssign</li> <li>PermSetGroupUnassign</li> <li>PermSetLicenseAssign</li> <li>PermSetUnassign</li> <li>PermSetLicenseUnassign</li> <li>registeredUserPhoneNumber</li> <li>resetpassword</li> <li>suNetworkAdminLogin</li> <li>suNetworkAdminLogout</li> <li>suOrgAdminLogin</li> <li>suOrgAdminLogout</li> <li>unfrozeuser</li> <li>useremailchangesent</li> </ul> </li> <li>Mobile Administration<ul> <li>assigneduserstomobileconfig</li> </ul> </li> <li>Reporting Snapshots<ul> <li>createdReportJob</li> <li>deletedReportJob</li> </ul> </li> <li>Sandboxes<ul> <li>DeleteSandbox</li> </ul> </li> </ul> <p>By default, deployment user defined in .sfdx-hardis.yml targetUsername property will be excluded.</p> <p>You can define additional users to exclude in .sfdx-hardis.yml monitoringExcludeUsernames property.</p> <p>You can also add more sections / actions considered as not suspect using property monitoringAllowedSectionsActions</p> <p>Example:</p> <pre><code>monitoringExcludeUsernames:\n  - deploymentuser@cloudity.com\n  - marketingcloud@cloudity.com\n  - integration-user@cloudity.com\n\nmonitoringAllowedSectionsActions:\n  \"Some section\": [] // Will ignore all actions from such section\n  \"Some other section\": [\"actionType1\",\"actionType2\",\"actionType3\"] // Will ignore only those 3 actions from section \"Some other section\". Other actions in the same section will be considered as suspect.\n</code></pre>"},{"location":"hardis/org/diagnose/audittrail/#excel-output-example","title":"Excel output example","text":""},{"location":"hardis/org/diagnose/audittrail/#local-output-example","title":"Local output example","text":"<p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p>"},{"location":"hardis/org/diagnose/audittrail/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) excludeusers-e option Comma-separated list of usernames to exclude flags-dir option undefined json boolean Format output as json. lastndays-t option Number of days to extract from today (included) outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/audittrail/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:audittrail\n</code></pre> <pre><code>$ sf hardis:org:diagnose:audittrail --excludeusers baptiste@titi.com\n</code></pre> <pre><code>$ sf hardis:org:diagnose:audittrail --excludeusers baptiste@titi.com,bertrand@titi.com\n</code></pre> <pre><code>$ sf hardis:org:diagnose:audittrail --lastndays 5\n</code></pre>"},{"location":"hardis/org/diagnose/instanceupgrade/","title":"instanceupgrade","text":""},{"location":"hardis/org/diagnose/instanceupgrade/#hardisorgdiagnoseinstanceupgrade","title":"hardis:org:diagnose:instanceupgrade","text":""},{"location":"hardis/org/diagnose/instanceupgrade/#description","title":"Description","text":""},{"location":"hardis/org/diagnose/instanceupgrade/#command-behavior","title":"Command Behavior","text":"<p>Retrieves and displays the scheduled upgrade date for a Salesforce org's instance.</p> <p>This command provides crucial information about when your Salesforce instance will be upgraded to the next major release (Spring, Summer, or Winter). This is vital for release planning, testing, and ensuring compatibility with upcoming Salesforce features.</p> <p>Key functionalities:</p> <ul> <li>Instance Identification: Determines the Salesforce instance name of your target org.</li> <li>Upgrade Date Retrieval: Fetches the planned start time of the next major core service upgrade for that instance from the Salesforce Status API.</li> <li>Days Until Upgrade: Calculates and displays the number of days remaining until the next major upgrade.</li> <li>Severity-Based Logging: Adjusts the log severity (info, warning) based on the proximity of the upgrade date, providing a visual cue for urgency.</li> <li>Notifications: Sends notifications to configured channels (e.g., Slack, MS Teams, Grafana) with the upgrade information, making it suitable for automated monitoring.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Salesforce SOQL Query: It first queries the <code>Organization</code> object in Salesforce to get the <code>InstanceName</code> of the target org.</li> <li>Salesforce Status API Integration: It makes an HTTP GET request to the Salesforce Status API (<code>https://api.status.salesforce.com/v1/instances/{instanceName}/status</code>) to retrieve detailed information about the instance, including scheduled maintenances.</li> <li>Data Parsing: It parses the JSON response from the Status API to extract the relevant major release upgrade information.</li> <li>Date Calculation: Uses the <code>moment</code> library to calculate the difference in days between the current date and the planned upgrade date.</li> <li>Notification Integration: It integrates with the <code>NotifProvider</code> to send notifications, including the instance name, upgrade date, and days remaining, along with relevant metrics for monitoring dashboards.</li> <li>User Feedback: Provides clear messages to the user about the upgrade status and proximity.</li> </ul>"},{"location":"hardis/org/diagnose/instanceupgrade/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/instanceupgrade/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:instanceupgrade\n</code></pre>"},{"location":"hardis/org/diagnose/legacyapi/","title":"legacyapi","text":""},{"location":"hardis/org/diagnose/legacyapi/#hardisorgdiagnoselegacyapi","title":"hardis:org:diagnose:legacyapi","text":""},{"location":"hardis/org/diagnose/legacyapi/#description","title":"Description","text":"<p>Checks if an org uses retired or someday retired API version</p> <p>See article below</p> <p></p> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p>"},{"location":"hardis/org/diagnose/legacyapi/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) eventtype-e option Type of EventLogFile event to analyze ApiTotalUsage flags-dir option undefined json boolean Format output as json. limit-l option Number of latest EventLogFile events to analyze 999 outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/legacyapi/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:legacyapi\n</code></pre> <pre><code>$ sf hardis:org:diagnose:legacyapi -u hardis@myclient.com\n</code></pre> <pre><code>$ sf hardis:org:diagnose:legacyapi --outputfile 'c:/path/to/folder/legacyapi.csv'\n</code></pre> <pre><code>$ sf hardis:org:diagnose:legacyapi -u hardis@myclient.com --outputfile ./tmp/legacyapi.csv\n</code></pre>"},{"location":"hardis/org/diagnose/licenses/","title":"licenses","text":""},{"location":"hardis/org/diagnose/licenses/#hardisorgdiagnoselicenses","title":"hardis:org:diagnose:licenses","text":""},{"location":"hardis/org/diagnose/licenses/#description","title":"Description","text":"<p>Lists and analyzes User Licenses and Permission Set Licenses subscribed and used in a Salesforce org.</p> <p>This command provides a comprehensive overview of your Salesforce license consumption. It's particularly useful for:</p> <ul> <li>License Management: Understanding which licenses are active, how many are available, and how many are being used.</li> <li>Cost Optimization: Identifying unused or underutilized licenses that could be reallocated or decommissioned.</li> <li>Compliance: Ensuring that your organization is compliant with Salesforce licensing agreements.</li> <li>Monitoring: Tracking license usage trends over time.</li> </ul> <p>Key functionalities:</p> <ul> <li>User License Details: Retrieves information about standard and custom User Licenses, including <code>MasterLabel</code>, <code>Name</code>, <code>TotalLicenses</code>, and <code>UsedLicenses</code>.</li> <li>Permission Set License Details: Retrieves information about Permission Set Licenses, including <code>MasterLabel</code>, <code>PermissionSetLicenseKey</code>, <code>TotalLicenses</code>, and <code>UsedLicenses</code>.</li> <li>Used Licenses Filter: The <code>--usedonly</code> flag allows you to filter the report to show only licenses that have at least one <code>UsedLicenses</code> count greater than zero.</li> <li>CSV Report Generation: Generates a CSV file containing all the retrieved license information, suitable for detailed analysis.</li> <li>Notifications: Sends notifications to configured channels (e.g., Grafana, Slack, MS Teams) with a summary of license usage, including lists of active and used licenses.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Salesforce SOQL Queries: It executes SOQL queries against the <code>UserLicense</code> and <code>PermissionSetLicense</code> objects in Salesforce to retrieve license data.</li> <li>Data Transformation: It processes the query results, reformatting the data to be more readable and consistent for reporting purposes (e.g., removing <code>Id</code> and <code>attributes</code>, renaming <code>PermissionSetLicenseKey</code> to <code>Name</code>).</li> <li>Data Aggregation: It aggregates license information, creating a <code>licensesByKey</code> object for quick lookups and a <code>usedLicenses</code> array for a concise list of actively used licenses.</li> <li>Report Generation: It uses <code>generateCsvFile</code> to create the CSV report of license data.</li> <li>Notification Integration: It integrates with the <code>NotifProvider</code> to send notifications, including attachments of the generated CSV report and metrics for monitoring dashboards.</li> <li>User Feedback: Provides clear messages to the user about the license extraction process and the used licenses.</li> </ul>"},{"location":"hardis/org/diagnose/licenses/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined usedonly-u boolean Filter to have only used licenses websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/licenses/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:licenses\n</code></pre>"},{"location":"hardis/org/diagnose/releaseupdates/","title":"releaseupdates","text":""},{"location":"hardis/org/diagnose/releaseupdates/#hardisorgdiagnosereleaseupdates","title":"hardis:org:diagnose:releaseupdates","text":""},{"location":"hardis/org/diagnose/releaseupdates/#description","title":"Description","text":"<p>Export Release Updates into a CSV file with selected criteria, and highlight Release Updates that should be checked.</p> <p>Before publishing Breaking Changes \u274c, Salesforce announce them in the setup menu Release Updates</p> <p>\u26a0\ufe0f Some of them are very important, because if you don't make the related upgrades in time (ex: before Winter 25) , your production org can crash !</p> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p>"},{"location":"hardis/org/diagnose/releaseupdates/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/releaseupdates/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:releaseupdates\n</code></pre>"},{"location":"hardis/org/diagnose/storage-stats/","title":"storage-stats","text":""},{"location":"hardis/org/diagnose/storage-stats/#hardisorgdiagnosestorage-stats","title":"hardis:org:diagnose:storage-stats","text":""},{"location":"hardis/org/diagnose/storage-stats/#description","title":"Description","text":"<p>Extracts and analyzes Data Storage usage for a Salesforce org, providing detailed per-object breakdowns with yearly trends.</p> <p>This command provides a comprehensive overview of your Salesforce data storage consumption. It's particularly useful for:</p> <ul> <li>Storage Management: Understanding which SObjects consume the most storage and how usage has evolved over time.</li> <li>Cost Optimization: Identifying storage-heavy objects that could be candidates for data archival or cleanup strategies.</li> <li>Capacity Planning: Tracking storage trends to predict when additional capacity will be needed.</li> <li>Compliance &amp; Governance: Monitoring data growth patterns to ensure alignment with data retention policies.</li> </ul> <p>Key functionalities:</p> <ul> <li>Storage Limits Analysis: Retrieves and displays org data storage limits, including total capacity, used storage, remaining storage, and percentage used. Detects and alerts on over-usage scenarios.</li> <li>SObject Discovery &amp; Filtering: Automatically discovers all SObjects in the org and filters them to focus on production/custom objects (excludes metadata types, platform-only objects, and cached empty objects).</li> <li>Interactive Selection: Prompts the user to select which SObjects to analyze and choose between <code>CreatedDate</code> or <code>LastModifiedDate</code> for temporal breakdown.</li> <li>Yearly Storage Breakdown: Executes grouped SOQL queries per object to calculate record counts by year, providing historical growth trends.</li> <li>Storage Estimation: Estimates storage usage for each object using an average record size heuristic (2 KB per record) and calculates the percentage of org quota consumed.</li> <li>Dual CSV Reports: Generates two CSV files: a detailed by-year breakdown and a totals-per-object summary, both suitable for spreadsheet analysis and reporting.</li> <li>Empty Objects Cache: Maintains a per-user cache of objects detected with zero records to optimize subsequent runs by skipping empty tables.</li> <li>Progress Tracking: Sends WebSocket progress messages for integration with external UIs and monitoring dashboards.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Limits Retrieval: Calls <code>conn.limits()</code> to retrieve the <code>DataStorageMB</code> object containing <code>Max</code> and <code>Remaining</code> values. Handles negative <code>Remaining</code> values (over-usage scenarios) by calculating <code>overUsageMB</code> and adjusting display values.</li> <li>SObject Discovery: Uses <code>conn.metadata.list([{ type: 'CustomObject' }])</code> to get custom objects and <code>conn.describeGlobal()</code> to get all SObjects. Filters by object capabilities (<code>layoutable</code>, <code>queryable</code>, <code>retrieveable</code>, <code>createable</code>, <code>updateable</code>, <code>deletable</code>) and excludes metadata types (<code>__mdt</code> suffix) and cached empty objects.</li> <li>User Interaction: Uses <code>prompts</code> for interactive multi-select of SObjects and single-select for date field choice. All objects are pre-selected by default for user convenience.</li> <li>Yearly Aggregation Queries: For each selected SObject, executes a grouped SOQL query: <code>SELECT CALENDAR_YEAR(&lt;DateField&gt;) year, COUNT(Id) total FROM &lt;SObject&gt; GROUP BY CALENDAR_YEAR(&lt;DateField&gt;) ORDER BY CALENDAR_YEAR(&lt;DateField&gt;) DESC</code>. Handles query errors gracefully (logs error and continues with next object).</li> <li>Storage Calculation: Applies a conservative average record size of 2 KB (2048 bytes) to estimate storage consumption. Calculates both MB usage and percentage of org quota for each object and year.</li> <li>Report Generation: Uses <code>generateCsvFile</code> and <code>generateReportPath</code> helpers to create two CSV files in the reports directory:<ul> <li>Detailed breakdown: includes all yearly statistics per object</li> <li>Totals summary: includes only aggregate totals per object</li> </ul> </li> <li>Caching Mechanism: Writes a JSON cache file per authenticated username (sanitized) in the reports directory (<code>&lt;username&gt;_empty_tables_cache.json</code>) containing an array of empty object names. The cache is updated after each run with newly detected empty objects.</li> <li>Progress &amp; UX: Uses <code>WebSocketClient</code> to emit start/step/end progress messages for external monitoring. Outputs summary tables with <code>uxLogTable</code> and status messages with <code>uxLog</code>.</li> <li>Return Value: Returns a JSON object containing <code>tableStorageInfos</code> (all rows), <code>tableStorageInfosTotals</code> (summary rows), <code>storageLimits</code> (org limits object), and <code>outputFiles</code> (paths to generated CSV/XLSX reports).</li> </ul> <p></p> <p></p>"},{"location":"hardis/org/diagnose/storage-stats/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/storage-stats/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:storage-stats\n</code></pre>"},{"location":"hardis/org/diagnose/unsecure-connected-apps/","title":"unsecure-connected-apps","text":""},{"location":"hardis/org/diagnose/unsecure-connected-apps/#hardisorgdiagnoseunsecure-connected-apps","title":"hardis:org:diagnose:unsecure-connected-apps","text":""},{"location":"hardis/org/diagnose/unsecure-connected-apps/#description","title":"Description","text":""},{"location":"hardis/org/diagnose/unsecure-connected-apps/#command-behavior","title":"Command Behavior","text":"<p>Detects unsecured Connected Apps in a Salesforce org and generates detailed reports for security analysis.</p> <p>This command is a critical security diagnostic tool that helps administrators identify Connected Apps that may pose security risks due to improper configuration. It provides comprehensive analysis of OAuth tokens and Connected App security settings to ensure proper access control.</p> <p>Key functionalities:</p> <ul> <li>OAuth Token Analysis: Queries all OAuth tokens in the org using SOQL to retrieve comprehensive token information including app names, users, authorization status, and usage statistics.</li> <li>Security Status Assessment: Evaluates each Connected App's security configuration by checking the <code>IsUsingAdminAuthorization</code> flag to determine if admin pre-approval is required.</li> <li>Unsecured App Detection: Identifies Connected Apps that allow users to authorize themselves without admin approval, which can pose security risks.</li> <li>Detailed Reporting: Generates two comprehensive CSV reports:<ul> <li>OAuth Tokens Report: Lists all OAuth tokens with security status, user information, and usage data</li> <li>Connected Apps Summary: Aggregates unsecured Connected Apps with counts of associated OAuth tokens</li> </ul> </li> <li>Visual Indicators: Uses status icons (\u274c for unsecured, \u2705 for secured) to provide immediate visual feedback on security status.</li> <li>Security Recommendations: Provides actionable guidance on how to secure Connected Apps through proper configuration.</li> <li>Notifications: Sends alerts to configured channels (Grafana, Slack, MS Teams) with security findings and attached reports.</li> </ul> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>SOQL Query Execution: Executes a comprehensive SOQL query on the <code>OauthToken</code> object, joining with <code>AppMenuItem</code> and <code>User</code> objects to gather complete security context.</li> <li>Security Analysis Logic: Analyzes the <code>AppMenuItem.IsUsingAdminAuthorization</code> field to determine if a Connected App requires admin pre-approval for user authorization.</li> <li>Data Transformation: Processes raw SOQL results to add security status indicators and reorganize data for optimal reporting and analysis.</li> <li>Aggregation Processing: Groups OAuth tokens by Connected App name to provide summary statistics and identify the most problematic applications.</li> <li>Report Generation: Uses <code>generateCsvFile</code> to create structured CSV reports with proper formatting and metadata for easy analysis and sharing.</li> <li>Notification Integration: Integrates with the <code>NotifProvider</code> to send security alerts with detailed metrics, including the number of unsecured Connected Apps and associated OAuth tokens.</li> <li>File Management: Generates multiple output formats (CSV, XLSX) and manages file paths using <code>generateReportPath</code> for consistent report organization.</li> <li>Connection Management: Uses <code>setConnectionVariables</code> to ensure proper authentication context for notification providers that require org connection details.</li> </ul>"},{"location":"hardis/org/diagnose/unsecure-connected-apps/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/unsecure-connected-apps/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:unsecure-connected-apps\n</code></pre>"},{"location":"hardis/org/diagnose/unused-apex-classes/","title":"unused-apex-classes","text":""},{"location":"hardis/org/diagnose/unused-apex-classes/#hardisorgdiagnoseunused-apex-classes","title":"hardis:org:diagnose:unused-apex-classes","text":""},{"location":"hardis/org/diagnose/unused-apex-classes/#description","title":"Description","text":"<p>List all async Apex classes (Batch,Queueable,Schedulable) that has not been called for more than 365 days.</p> <p>The result class list probably can be removed from the project, and that will improve your test classes performances \ud83d\ude0a</p> <p>The number of unused day is overridable using --days option. </p> <p>The command uses queries on AsyncApexJob and CronTrigger technical tables to build the result.</p> <p>Apex Classes CreatedBy and CreatedOn fields are calculated from MIN(date from git, date from org)</p> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p> <p></p>"},{"location":"hardis/org/diagnose/unused-apex-classes/#parameters","title":"Parameters","text":"Name Type Description Default Required Options days-t option Extracts the users that have been inactive for the amount of days specified. In CI, default is 180 days debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/unused-apex-classes/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:unused-apex-classes\n</code></pre> <pre><code>$ sf hardis:org:diagnose:unused-apex-classes --days 700\n</code></pre>"},{"location":"hardis/org/diagnose/unused-connected-apps/","title":"unused-connected-apps","text":""},{"location":"hardis/org/diagnose/unused-connected-apps/#hardisorgdiagnoseunused-connected-apps","title":"hardis:org:diagnose:unused-connected-apps","text":""},{"location":"hardis/org/diagnose/unused-connected-apps/#description","title":"Description","text":""},{"location":"hardis/org/diagnose/unused-connected-apps/#command-behavior","title":"Command Behavior","text":"<p>Identifies and reports on potentially unused Connected Apps in a Salesforce org, suggesting candidates for deletion or deactivation.</p> <p>This command helps improve org security and reduce technical debt by pinpointing Connected Apps that are no longer actively used. Connected Apps can pose security risks if left unmonitored, and cleaning them up contributes to a healthier Salesforce environment.</p> <p>Key functionalities:</p> <ul> <li>Connected App Data Collection: Gathers information about all Connected Apps in the org, including creation and last modified dates, and associated users.</li> <li>Usage Analysis: Analyzes <code>LoginHistory</code> and <code>OAuthToken</code> records to determine the last usage date of each Connected App.</li> <li>Inactivity Detection: Flags Connected Apps as potentially unused if they have no recent login history or OAuth token usage.</li> <li>Accessibility Check: Examines Connected App metadata to identify if they are accessible (e.g., if they require admin approval and have no profiles or permission sets assigned).</li> <li>Ignored Apps: Automatically ignores a predefined list of common Salesforce Connected Apps (e.g., <code>Salesforce CLI</code>, <code>Salesforce Mobile Dashboards</code>). You can extend this list by defining the <code>ALLOWED_INACTIVE_CONNECTED_APPS</code> environment variable.</li> <li>CSV Report Generation: Generates a CSV file containing details of all analyzed Connected Apps, including their usage status, last usage date, and reasons for being flagged as potentially unused.</li> <li>Notifications: Sends notifications to configured channels (Grafana, Slack, MS Teams) with a summary of potentially unused Connected Apps.</li> </ul> <p>Default Ignored Connected Apps:</p> <ul> <li>Ant Migration Tool</li> <li>Chatter Desktop</li> <li>Chatter Mobile for BlackBerry</li> <li>Force.com IDE</li> <li>OIQ_Integration</li> <li>Salesforce CLI</li> <li>Salesforce Files</li> <li>Salesforce Mobile Dashboards</li> <li>Salesforce Touch</li> <li>Salesforce for Outlook</li> <li>SalesforceA</li> <li>SalesforceA for Android</li> <li>SalesforceA for iOS</li> <li>SalesforceDX Namespace Registry</li> <li>SalesforceIQ</li> </ul> <p>You can add more ignored apps by defining a comma-separated list of names in the <code>ALLOWED_INACTIVE_CONNECTED_APPS</code> environment variable.</p> <p>Example:  ALLOWED_INACTIVE_CONNECTED_APPS=My App 1,My App 2, My App 3</p> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Salesforce SOQL Queries: It performs SOQL queries against <code>ConnectedApplication</code>, <code>LoginHistory</code>, and <code>OAuthToken</code> objects to gather comprehensive data about Connected Apps and their usage.</li> <li>Temporary SFDX Project: It creates a temporary SFDX project to retrieve Connected App metadata, allowing for local parsing and analysis of their XML files.</li> <li>Metadata Parsing: It parses the <code>connectedApp-meta.xml</code> files to check for <code>isAdminApproved</code> and the presence of <code>profileName</code> or <code>permissionsetName</code> to determine accessibility.</li> <li>Data Correlation: It correlates data from various Salesforce objects to build a complete picture of each Connected App's usage and status.</li> <li>Date Calculation: Uses <code>moment</code> to calculate the time since the last OAuth token usage.</li> <li>Report Generation: It uses <code>generateCsvFile</code> to create the CSV report of unused Connected Apps.</li> <li>Notification Integration: It integrates with the <code>NotifProvider</code> to send notifications, including attachments of the generated CSV report and metrics for monitoring dashboards.</li> <li>File System Operations: Uses <code>fs-extra</code> for creating and removing temporary directories and files.</li> <li>Environment Variable Reading: Reads the <code>ALLOWED_INACTIVE_CONNECTED_APPS</code> environment variable to customize the list of ignored Connected Apps.</li> </ul>"},{"location":"hardis/org/diagnose/unused-connected-apps/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/unused-connected-apps/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:unused-connected-apps\n</code></pre>"},{"location":"hardis/org/diagnose/unusedlicenses/","title":"unusedlicenses","text":""},{"location":"hardis/org/diagnose/unusedlicenses/#hardisorgdiagnoseunusedlicenses","title":"hardis:org:diagnose:unusedlicenses","text":""},{"location":"hardis/org/diagnose/unusedlicenses/#description","title":"Description","text":""},{"location":"hardis/org/diagnose/unusedlicenses/#command-behavior","title":"Command Behavior","text":"<p>Detects and suggests the deletion of unused Permission Set License Assignments in a Salesforce org.</p> <p>When a Permission Set (PS) linked to a Permission Set License (PSL) is assigned to a user, a Permission Set License Assignment (PSLA) is automatically created. However, when that PS is unassigned from the user, the PSLA is not automatically deleted. This can lead to organizations being charged for unused PSLAs, representing a hidden cost and technical debt.</p> <p>This command identifies such useless PSLAs and provides options to delete them, helping to optimize license usage and reduce unnecessary expenses.</p> <p>Key functionalities:</p> <ul> <li>PSLA Detection: Queries the Salesforce org to find all active PSLAs.</li> <li>Usage Verification: Correlates PSLAs with actual Permission Set Assignments and Permission Set Group Assignments to determine if the underlying Permission Sets are still assigned to the user.</li> <li>Special Case Handling: Accounts for specific scenarios where profiles might implicitly assign PSLAs (e.g., <code>Salesforce API Only</code> profile assigning <code>SalesforceAPIIntegrationPsl</code>) and allows for always excluding certain PSLAs from the unused check.</li> <li>Reporting: Generates a CSV report of all identified unused PSLAs, including the user and the associated Permission Set License.</li> <li>Notifications: Sends notifications to configured channels (Grafana, Slack, MS Teams) with a summary of unused PSLAs.</li> <li>Interactive Deletion: In non-CI environments, it offers an interactive prompt to bulk delete the identified unused PSLAs.</li> </ul> <p>Many thanks to Vincent Finet for the inspiration during his great speaker session at French Touch Dreamin '23, and his kind agreement for reusing such inspiration in this command \ud83d\ude0a</p> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p> Technical explanations <p>The command's technical implementation involves extensive querying of Salesforce objects and data correlation:</p> <ul> <li>SOQL Queries (Bulk API): It uses <code>bulkQuery</code> and <code>bulkQueryChunksIn</code> to efficiently retrieve large volumes of data from <code>PermissionSetLicenseAssign</code>, <code>PermissionSetLicense</code>, <code>PermissionSet</code>, <code>PermissionSetGroupComponent</code>, and <code>PermissionSetAssignment</code> objects.</li> <li>Data Correlation: It meticulously correlates data across these objects to determine if a <code>PermissionSetLicenseAssign</code> record has a corresponding active assignment to a Permission Set or Permission Set Group for the same user.</li> <li>Filtering Logic: It applies complex filtering logic to exclude PSLAs that are genuinely in use or are part of predefined exceptions (e.g., <code>alwaysExcludeForActiveUsersPermissionSetLicenses</code>).</li> <li>Bulk Deletion: If the user opts to delete unused PSLAs, it uses <code>bulkUpdate</code> with the <code>delete</code> operation to efficiently remove multiple records.</li> <li>Report Generation: It uses <code>generateCsvFile</code> to create the CSV report of unused PSLAs.</li> <li>Notification Integration: It integrates with the <code>NotifProvider</code> to send notifications, including attachments of the generated CSV report and metrics for monitoring dashboards.</li> <li>User Interaction: Uses <code>prompts</code> for interactive confirmation before performing deletion operations.</li> </ul>"},{"location":"hardis/org/diagnose/unusedlicenses/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/unusedlicenses/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:unusedlicenses\n</code></pre> <pre><code>$ sf hardis:org:diagnose:unusedlicenses --fix\n</code></pre>"},{"location":"hardis/org/diagnose/unusedusers/","title":"unusedusers","text":""},{"location":"hardis/org/diagnose/unusedusers/#hardisorgdiagnoseunusedusers","title":"hardis:org:diagnose:unusedusers","text":""},{"location":"hardis/org/diagnose/unusedusers/#description","title":"Description","text":""},{"location":"hardis/org/diagnose/unusedusers/#command-behavior","title":"Command Behavior","text":"<p>Detects and reports on inactive or unused Salesforce user accounts, helping to optimize license usage and enhance security.</p> <p>Efficient user management is vital in Salesforce to ensure resources are optimized and costs are controlled. However, inactive or unused user accounts can often go unnoticed, leading to wasted licenses and potential security risks. This tool addresses this challenge by enabling administrators to identify users who haven't logged in within a specified period.</p> <p>By analyzing user login activity and last login timestamps, this feature highlights inactive user accounts, allowing administrators to take appropriate action. Whether it's deactivating dormant accounts, freeing up licenses, or ensuring compliance with security policies, this functionality empowers administrators to maintain a lean and secure Salesforce environment.</p> <p>Key functionalities:</p> <ul> <li>Inactivity Detection: Identifies users who have not logged in for a specified number of days (<code>--days</code> flag, default 180 days in CI, 365 days otherwise).</li> <li>License Type Filtering: Allows filtering users by license type using <code>--licensetypes</code> (e.g., <code>all-crm</code>, <code>all-paying</code>) or specific license identifiers using <code>--licenseidentifiers</code>.<ul> <li><code>all-crm</code>: Includes <code>SFDC</code>, <code>AUL</code>, <code>AUL1</code>, <code>AULL_IGHT</code> licenses.</li> <li><code>all-paying</code>: Includes <code>SFDC</code>, <code>AUL</code>, <code>AUL1</code>, <code>AULL_IGHT</code>, <code>PID_Customer_Community</code>, <code>PID_Customer_Community_Login</code>, <code>PID_Partner_Community</code>, <code>PID_Partner_Community_Login</code> licenses.</li> <li>Note: You can see the full list of available license identifiers in Salesforce Documentation.</li> </ul> </li> <li>Active User Retrieval: The <code>--returnactiveusers</code> flag inverts the command, allowing you to retrieve active users who have logged in during the specified period.</li> <li>CSV Report Generation: Generates a CSV file containing details of all identified users (inactive or active), including their last login date, profile, and license information.</li> <li>Notifications: Sends notifications to configured channels (Grafana, Slack, MS Teams) with a summary of inactive or active users.</li> </ul> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>SOQL Query (Bulk API): It uses <code>bulkQuery</code> to efficiently retrieve user records from the Salesforce <code>User</code> object. The SOQL query dynamically constructs its WHERE clause based on the <code>--days</code>, <code>--licensetypes</code>, <code>--licenseidentifiers</code>, and <code>--returnactiveusers</code> flags.</li> <li>Interactive Prompts: Uses <code>prompts</code> to interactively ask the user for the number of inactive days and license types if not provided via flags.</li> <li>License Mapping: Internally maps common license type aliases (e.g., <code>all-crm</code>) to their corresponding Salesforce <code>LicenseDefinitionKey</code> values.</li> <li>Report Generation: It uses <code>generateCsvFile</code> to create the CSV report of users.</li> <li>Notification Integration: It integrates with the <code>NotifProvider</code> to send notifications, including attachments of the generated CSV report and metrics for monitoring dashboards.</li> <li>User Feedback: Provides a summary of the findings in the console, indicating the number of inactive or active users found.</li> </ul>"},{"location":"hardis/org/diagnose/unusedusers/#parameters","title":"Parameters","text":"Name Type Description Default Required Options days-t option Extracts the users that have been inactive for the amount of days specified. In CI, default is 180 days debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. licenseidentifiers-i option Comma-separated list of license identifiers, in case licensetypes is not used.. Identifiers available at https://developer.salesforce.com/docs/atlas.en-us.object_reference.meta/object_reference/sforce_api_objects_userlicense.htm licensetypes-l option Type of licenses to check. If set, do not use licenseidentifiers option. In CI, default is all-crm allall-crmall-paying outputfile-f option Force the path and name of output report file. Must end with .csv returnactiveusers boolean Inverts the command by returning the active users skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/diagnose/unusedusers/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:diagnose:unusedusers\n</code></pre> <pre><code>$ sf hardis:org:diagnose:unusedusers --days 365\n</code></pre> <pre><code>$ sf hardis:org:diagnose:unusedusers --days 60 --licensetypes all-crm\n</code></pre> <pre><code>$ sf hardis:org:diagnose:unusedusers --days 60 --licenseidentifiers SFDC,AUL,AUL1\n</code></pre> <pre><code>$ sf hardis:org:diagnose:unusedusers --days 60 --licensetypes all-crm --returnactiveusers\n</code></pre>"},{"location":"hardis/org/files/export/","title":"export","text":""},{"location":"hardis/org/files/export/#hardisorgfilesexport","title":"hardis:org:files:export","text":""},{"location":"hardis/org/files/export/#description","title":"Description","text":""},{"location":"hardis/org/files/export/#command-behavior","title":"Command Behavior","text":"<p>Exports file attachments (ContentVersion, Attachment) from a Salesforce org based on a predefined configuration.</p> <p>This command enables the mass download of files associated with Salesforce records, providing a robust solution for backing up files, migrating them to other systems, or integrating them with external document management solutions.</p> <p>Key functionalities:</p> <ul> <li>Configuration-Driven Export: Relies on an <code>export.json</code> file within a designated file export project to define the export criteria, including the SOQL query for parent records, file types to export, output naming conventions, and file size filtering.</li> <li>File Size Filtering: Supports minimum file size filtering via the <code>fileSizeMin</code> configuration parameter (in KB). Files smaller than the specified size will be skipped during export.</li> <li>File Validation: After downloading each file, validates the integrity by:<ul> <li>Checksum Validation: For ContentVersion files, compares MD5 checksum with Salesforce's stored checksum</li> <li>Size Validation: For both ContentVersion and Attachment files, verifies actual file size matches expected size</li> <li>Status Tracking: Files are categorized with specific statuses: <code>success</code> (valid files), <code>failed</code> (download errors), <code>skipped</code> (filtered files), <code>invalid</code> (downloaded but failed validation)</li> <li>All validation results are logged in the CSV export log for audit purposes</li> </ul> </li> <li>Resume/Restart Capability: <ul> <li>Resume Mode: When <code>--resume</code> flag is used (default in CI environments), checks existing downloaded files for validity. Valid files are skipped, invalid files are re-downloaded.</li> <li>Restart Mode: When resume is disabled, clears the output folder and starts a fresh export.</li> <li>Interactive Mode: When existing files are found and <code>--resume</code> is not explicitly specified (non-CI environments), prompts the user to choose between resume or restart.</li> </ul> </li> <li>Interactive Project Selection: If the file export project path is not provided via the <code>--path</code> flag, it interactively prompts the user to select one.</li> <li>Configurable Export Options: Allows overriding default export settings such as <code>chunksize</code> (number of records processed in a batch), <code>polltimeout</code> (timeout for Bulk API calls), and <code>startchunknumber</code> (to resume a failed export).</li> <li>Support for ContentVersion and Attachment: Handles both modern Salesforce Files (ContentVersion) and older Attachments.</li> </ul> <p>See this article for a practical example:</p> <p></p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>FilesExporter Class: The core logic is encapsulated within the <code>FilesExporter</code> class, which orchestrates the entire export process.</li> <li>SOQL Queries (Bulk API): It uses Salesforce Bulk API queries to efficiently retrieve large volumes of parent record IDs and file metadata, including checksums and file sizes.</li> <li>File Download: Downloads the actual file content from Salesforce.</li> <li>File Validation: After each successful download, validates file integrity by comparing checksums (ContentVersion) and file sizes (both ContentVersion and Attachment) against Salesforce metadata.</li> <li>Resume Logic: In resume mode, checks for existing files before downloading, validates their integrity, and only re-downloads invalid or missing files. This enables efficient recovery from interrupted exports.</li> <li>File System Operations: Writes the downloaded files to the local file system, organizing them into folders based on the configured naming conventions.</li> <li>Configuration Loading: Reads the <code>export.json</code> file to get the export configuration. It also allows for interactive overriding of these settings.</li> <li>Interactive Prompts: Uses <code>selectFilesWorkspace</code> to allow the user to choose a file export project, <code>promptFilesExportConfiguration</code> for customizing export options, and prompts for resume/restart choice when existing files are found.</li> <li>Error Handling: Includes mechanisms to handle potential errors during the export process, such as network issues, API limits, and file validation failures. Each file is assigned a specific status (<code>success</code>, <code>failed</code>, <code>skipped</code>, <code>invalid</code>) for comprehensive tracking and troubleshooting.</li> </ul>"},{"location":"hardis/org/files/export/#parameters","title":"Parameters","text":"Name Type Description Default Required Options chunksize-c option Number of records to add in a chunk before it is processed 1000 debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. path-p option Path to the file export project polltimeout-t option Timeout in MS for Bulk API calls 300000 resume-r boolean Resume previous export by checking existing files (default in CI) skipauth boolean Skip authentication check when a default username is required startchunknumber-s option Chunk number to start from target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/files/export/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:files:export\n</code></pre>"},{"location":"hardis/org/files/import/","title":"import","text":""},{"location":"hardis/org/files/import/#hardisorgfilesimport","title":"hardis:org:files:import","text":""},{"location":"hardis/org/files/import/#description","title":"Description","text":"<p>This command facilitates the mass upload of files into Salesforce, allowing you to populate records with associated documents, images, or other file types. It's a crucial tool for data migration, content seeding, or synchronizing external file repositories with Salesforce.</p> <p>Key functionalities:</p> <ul> <li>Configuration-Driven Import: Relies on an <code>export.json</code> file within a designated file export project (created using <code>sf hardis:org:configure:files</code>) to determine which files to import and how they should be associated with Salesforce records.</li> <li>Interactive Project Selection: If the file import project path is not provided via the <code>--path</code> flag, it interactively prompts the user to select one.</li> <li>Overwrite Option: The <code>--overwrite</code> flag allows you to replace existing files in Salesforce with local versions that have the same name. Be aware that this option doubles the number of API calls used.</li> <li>Support for ContentVersion and Attachment: Handles both modern Salesforce Files (ContentVersion) and older Attachments.</li> </ul> <p>See this article for how to export files, which is often a prerequisite for importing:</p> <p></p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>FilesImporter Class: The core logic is encapsulated within the <code>FilesImporter</code> class, which orchestrates the entire import process.</li> <li>File System Scan: Scans the local file system within the configured project directory to identify files for import.</li> <li>Salesforce API Interaction: Uses Salesforce APIs (e.g., ContentVersion, Attachment) to upload files and associate them with records.</li> <li>Configuration Loading: Reads the <code>export.json</code> file to get the import configuration, including SOQL queries to identify parent records for file association.</li> <li>Interactive Prompts: Uses <code>selectFilesWorkspace</code> to allow the user to choose a file import project and <code>prompts</code> for confirming the overwrite behavior.</li> <li>Error Handling: Includes mechanisms to handle potential errors during the import process, such as API limits or file upload failures.</li> </ul>"},{"location":"hardis/org/files/import/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. overwrite-f boolean Override existing files (doubles the number of API calls) path-p option Path to the file export project skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/files/import/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:files:import\n</code></pre>"},{"location":"hardis/org/fix/listviewmine/","title":"listviewmine","text":""},{"location":"hardis/org/fix/listviewmine/#hardisorgfixlistviewmine","title":"hardis:org:fix:listviewmine","text":""},{"location":"hardis/org/fix/listviewmine/#description","title":"Description","text":"<p>Fix listviews whose scope Mine has been replaced by Everything</p> <p></p> <p>List of ListViews can be:</p> <ul> <li>read from .sfdx-hardis.yml file in property listViewsToSetToMine</li> <li>sent in argument listviews</li> </ul> <p>Note: property listViewsToSetToMine can be auto-generated by command hardis:work:save if .sfdx-hardis.yml contains the following configuration</p> <pre><code>autoCleanTypes:\n  - listViewsMine\n</code></pre> <ul> <li>Example of sfdx-hardis.yml property <code>listViewsToSetToMine</code>:</li> </ul> <pre><code>listViewsToSetToMine:\n  - \"force-app/main/default/objects/Operation__c/listViews/MyCurrentOperations.listView-meta.xml\"\n  - \"force-app/main/default/objects/Operation__c/listViews/MyFinalizedOperations.listView-meta.xml\"\n  - \"force-app/main/default/objects/Opportunity/listViews/Default_Opportunity_Pipeline.listView-meta.xml\"\n  - \"force-app/main/default/objects/Opportunity/listViews/MyCurrentSubscriptions.listView-meta.xml\"\n  - \"force-app/main/default/objects/Opportunity/listViews/MySubscriptions.listView-meta.xml\"\n  - \"force-app/main/default/objects/Account/listViews/MyActivePartners.listView-meta.xml\"\n</code></pre> <ul> <li>If manually written, this could also be:</li> </ul> <pre><code>listViewsToSetToMine:\n  - \"Operation__c:MyCurrentOperations\"\n  - \"Operation__c:MyFinalizedOperations\"\n  - \"Opportunity:Default_Opportunity_Pipeline\"\n  - \"Opportunity:MyCurrentSubscriptions\"\n  - \"Opportunity:MySubscriptions\"\n  - \"Account:MyActivePartners\"\n</code></pre> <p>Troubleshooting: if you need to run this command from an alpine-linux based docker image, use this workaround in your dockerfile:</p> <pre><code># Do not use puppeteer embedded chromium\nRUN apk add --update --no-cache chromium\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=\"true\"\nENV CHROMIUM_PATH=\"/usr/bin/chromium-browser\"\nENV PUPPETEER_EXECUTABLE_PATH=\"$\\{CHROMIUM_PATH}\" // remove \\ before {\n</code></pre>"},{"location":"hardis/org/fix/listviewmine/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. listviews-l option Comma-separated list of listviews following format Object:ListViewName Example: Contact:MyContacts,Contact:MyActiveContacts,Opportunity:MYClosedOpportunities skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/fix/listviewmine/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:fix:listviewmine\n</code></pre> <pre><code>$ sf hardis:org:fix:listviewmine --listviews Opportunity:MySubscriptions,Account:MyActivePartners\n</code></pre>"},{"location":"hardis/org/generate/packagexmlfull/","title":"packagexmlfull","text":""},{"location":"hardis/org/generate/packagexmlfull/#hardisorggeneratepackagexmlfull","title":"hardis:org:generate:packagexmlfull","text":""},{"location":"hardis/org/generate/packagexmlfull/#description","title":"Description","text":""},{"location":"hardis/org/generate/packagexmlfull/#command-behavior","title":"Command Behavior","text":"<p>Generates a comprehensive <code>package.xml</code> file for a Salesforce org, including all metadata components, even managed ones.</p> <p>This command is essential for various Salesforce development and administration tasks, especially when you need a complete snapshot of an org's metadata. It goes beyond typical source tracking by including managed package components, which is crucial for understanding the full metadata footprint of an org.</p> <p>Key functionalities:</p> <ul> <li>Full Org Metadata Retrieval: Connects to a specified Salesforce org (or prompts for one if not provided) and retrieves a complete list of all metadata types and their members.</li> <li>Managed Package Inclusion: Unlike standard source retrieval, this command explicitly includes metadata from managed packages, providing a truly comprehensive <code>package.xml</code>.</li> <li>Customizable Output: Allows you to specify the output file path for the generated <code>package.xml</code>.</li> <li>Interactive Org Selection: If no target org is specified, it interactively prompts the user to choose an org. (or use --no-prompt to skip this step)</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Salesforce Metadata API Interaction: It leverages the Salesforce Metadata API to list all available metadata types and then retrieve all components for each type.</li> <li><code>buildOrgManifest</code> Utility: The core logic for querying the org's metadata and constructing the <code>package.xml</code> is encapsulated within the <code>buildOrgManifest</code> utility function.</li> <li>XML Generation: It dynamically builds the XML structure of the <code>package.xml</code> file, including the <code>types</code> and <code>members</code> elements for all retrieved metadata.</li> <li>File System Operations: It writes the generated <code>package.xml</code> file to the specified output path.</li> <li>Interactive Prompts: Uses <code>promptOrgUsernameDefault</code> to guide the user in selecting the target Salesforce org.</li> </ul>"},{"location":"hardis/org/generate/packagexmlfull/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. no-prompt-n boolean Do not prompt for org username, use the default one outputfile option Output package.xml file skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/generate/packagexmlfull/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:generate:packagexmlfull\n</code></pre> <pre><code>$ sf hardis:org:generate:packagexmlfull --outputfile /tmp/packagexmlfull.xml\n</code></pre> <pre><code>$ sf hardis:org:generate:packagexmlfull --target-org nico@example.com\n</code></pre>"},{"location":"hardis/org/monitor/all/","title":"all","text":""},{"location":"hardis/org/monitor/all/#hardisorgmonitorall","title":"hardis:org:monitor:all","text":""},{"location":"hardis/org/monitor/all/#description","title":"Description","text":"<p>Monitor org, generate reports and sends notifications</p> <p>You can disable some commands defining either a monitoringDisable property in <code>.sfdx-hardis.yml</code>, or a comma separated list in env variable MONITORING_DISABLE</p> <p>Example in .sfdx-hardis.yml:</p> <pre><code>monitoringDisable:\n  - METADATA_STATUS\n  - MISSING_ATTRIBUTES\n  - UNUSED_METADATAS\n</code></pre> <p>Example in env var:</p> <pre><code>MONITORING_DISABLE=METADATA_STATUS,MISSING_ATTRIBUTES,UNUSED_METADATAS\n</code></pre> <p>A default list of monitoring commands is used, if you want to override it you can define property monitoringCommands in your .sfdx-hardis.yml file</p> <p>Example:</p> <pre><code>monitoringCommands:\n  - title: My Custom command\n    command: sf my:custom:command\n  - title: My Custom command 2\n    command: sf my:other:custom:command\n</code></pre> <p>You can force the daily run of all commands by defining env var <code>MONITORING_IGNORE_FREQUENCY=true</code></p> <p>The default list of commands is the following:</p> Key Description Command Frequency AUDIT_TRAIL Detect suspect setup actions in major org sf hardis:org:diagnose:audittrail daily LEGACY_API Detect calls to deprecated API versions sf hardis:org:diagnose:legacyapi daily ORG_LIMITS Detect if org limits are close to be reached sf hardis:org:monitor:limits daily UNSECURED_CONNECTED_APPS Detect unsecured Connected Apps in an org sf hardis:org:diagnose:unsecure-connected-apps daily LICENSES Extract licenses information sf hardis:org:diagnose:licenses weekly LINT_ACCESS Detect custom elements with no access rights defined in permission sets sf hardis:lint:access weekly UNUSED_LICENSES Detect permission set licenses that are assigned to users that do not need them sf hardis:org:diagnose:unusedlicenses weekly UNUSED_USERS Detect active users without recent logins sf hardis:org:diagnose:unusedusers weekly ACTIVE_USERS Detect active users with recent logins sf hardis:org:diagnose:unusedusers --returnactiveusers weekly ORG_INFO Get org info + SF instance info + next major upgrade date sf hardis:org:diagnose:instanceupgrade weekly RELEASE_UPDATES Gather warnings about incoming and overdue Release Updates sf hardis:org:diagnose:releaseupdates weekly UNUSED_METADATAS Detect custom labels and custom permissions that are not in use sf hardis:lint:unusedmetadatas weekly UNUSED_APEX_CLASSES Detect unused Apex classes in an org sf hardis:org:diagnose:unused-apex-classes weekly CONNECTED_APPS Detect unused Connected Apps in an org sf hardis:org:diagnose:unused-connected-apps weekly METADATA_STATUS Detect inactive metadata sf hardis:lint:metadatastatus weekly MISSING_ATTRIBUTES Detect missing description on custom field sf hardis:lint:missingattributes weekly"},{"location":"hardis/org/monitor/all/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/monitor/all/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:monitor:all\n</code></pre>"},{"location":"hardis/org/monitor/backup/","title":"backup","text":""},{"location":"hardis/org/monitor/backup/#hardisorgmonitorbackup","title":"hardis:org:monitor:backup","text":""},{"location":"hardis/org/monitor/backup/#description","title":"Description","text":"<p>Retrieve sfdx sources in the context of a monitoring backup</p> <p>The command exists in 2 modes: filtered(default &amp; recommended) and full.</p>"},{"location":"hardis/org/monitor/backup/#filtered-mode-default-better-performances","title":"Filtered mode (default, better performances)","text":"<p>Automatically skips metadatas from installed packages with namespace.  </p> <p>You can remove more metadata types from backup, especially in case you have too many metadatas and that provokes a crash, using:</p> <ul> <li> <p>Manual update of <code>manifest/package-skip-items.xml</code> config file (then commit &amp; push in the same branch)</p> <ul> <li>Works with full wildcard (<code>&lt;members&gt;*&lt;/members&gt;</code>) , named metadata (<code>&lt;members&gt;Account.Name&lt;/members&gt;</code>) or partial wildcards names (<code>&lt;members&gt;pi__*&lt;/members&gt;</code> , <code>&lt;members&gt;*__dlm&lt;/members&gt;</code> , or <code>&lt;members&gt;prefix*suffix&lt;/members&gt;</code>)</li> </ul> </li> </ul> <ul> <li>Environment variable MONITORING_BACKUP_SKIP_METADATA_TYPES (example: <code>MONITORING_BACKUP_SKIP_METADATA_TYPES=CustomLabel,StaticResource,Translation</code>): that will be applied to all monitoring branches.</li> </ul>"},{"location":"hardis/org/monitor/backup/#full-mode","title":"Full mode","text":"<p>Activate it with --full parameter, or variable MONITORING_BACKUP_MODE_FULL=true</p> <p>Ignores filters (namespaces items &amp; manifest/package-skip-items.xml) to retrieve ALL metadatas, including those you might not care about (reports, translations...)</p> <p>As we can retrieve only 10000 files by call, the list of all metadatas will be chunked to make multiple calls (and take more time than filtered mode)</p> <ul> <li>if you use <code>--full-apply-filters</code> , manifest/package-skip-items.xml and MONITORING_BACKUP_SKIP_METADATA_TYPES filters will be applied anyway</li> <li>if you use <code>--exclude-namespaces</code> , namespaced items will be ignored</li> </ul> <p>With those both options, it's like if you are not using --full, but with chunked metadata download</p>"},{"location":"hardis/org/monitor/backup/#in-cicd","title":"In CI/CD","text":"<p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p>"},{"location":"hardis/org/monitor/backup/#troubleshooting","title":"Troubleshooting","text":"<p>If you have unknown errors (it happens !), you can investigate using the full command with smaller chunks.</p> <p>Example: <code>sf hardis:org:monitor:backup --full --exclude-namespaces --full-apply-filters --max-by-chunk 500</code></p> <p>It will allow you the identify the responsible metadata and ignore it using package-skip-items.xml or MONITORING_BACKUP_SKIP_METADATA_TYPES env variable.</p>"},{"location":"hardis/org/monitor/backup/#documentation","title":"Documentation","text":"<p>Doc generation (including visual flows) is triggered at the end of the command.</p> <p>If you want to also upload HTML Documentation on your Salesforce Org as static resource, use variable SFDX_HARDIS_DOC_DEPLOY_TO_ORG=\"true\"</p> <p>If you want to also upload HTML Documentation on Cloudflare, use variable SFDX_HARDIS_DOC_DEPLOY_TO_CLOUDFLARE=\"true\"</p> <ul> <li>If you want to generate the documentation in multiple languages, define variable SFDX_DOC_LANGUAGES (ex: SFDX_DOC_LANGUAGES=en,fr,de)</li> <li>You can define one Cloudflare site by language, for example with the following variables:<ul> <li>CLOUDFLARE_PROJECT_NAME_EN=cloudity-demo-english</li> <li>CLOUDFLARE_PROJECT_NAME_FR=cloudity-demo-french</li> <li>CLOUDFLARE_PROJECT_NAME_DE=cloudity-demo-german</li> </ul> </li> </ul> <p>If Flow history doc always display a single state, you probably need to update your workflow configuration:</p> <ul> <li>on Gitlab: Env variable <code>GIT_FETCH_EXTRA_FLAGS: --depth 10000</code></li> <li>on GitHub: <code>fetch-depth: 0</code></li> <li>on Azure: <code>fetchDepth: \"0\"</code></li> <li>on Bitbucket: <code>step: clone: depth: full</code></li> </ul>"},{"location":"hardis/org/monitor/backup/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) exclude-namespaces-e boolean If mode --full is activated, exclude namespaced metadatas flags-dir option undefined full boolean Dot not take in account filtering using package-skip-items.xml and MONITORING_BACKUP_SKIP_METADATA_TYPES. Efficient but much much slower ! full-apply-filters-z boolean If mode --full is activated, apply filters of manifest/package-skip-items.xml and MONITORING_BACKUP_SKIP_METADATA_TYPES anyway json boolean Format output as json. max-by-chunk-m option If mode --full is activated, maximum number of metadatas in a package.xml chunk 3000 outputfile-f option Force the path and name of output report file. Must end with .csv skip-doc boolean Skip the generation of project documentation at the end of the command skipauth boolean Skip authentication check when a default username is required start-chunk option Use this parameter to troubleshoot a specific chunk. It will be used as the first chunk to retrieve 1 target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/monitor/backup/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:monitor:backup\n</code></pre> <pre><code>$ sf hardis:org:monitor:backup --full\n</code></pre> <pre><code>$ sf hardis:org:monitor:backup --full --exclude-namespaces\n</code></pre> <pre><code>$ sf hardis:org:monitor:backup --full --exclude-namespaces --full-apply-filters\n</code></pre>"},{"location":"hardis/org/monitor/limits/","title":"limits","text":""},{"location":"hardis/org/monitor/limits/#hardisorgmonitorlimits","title":"hardis:org:monitor:limits","text":""},{"location":"hardis/org/monitor/limits/#description","title":"Description","text":""},{"location":"hardis/org/monitor/limits/#command-behavior","title":"Command Behavior","text":"<p>Checks the current usage of various Salesforce org limits and sends notifications if thresholds are exceeded.</p> <p>This command is a critical component of proactive Salesforce org management, helping administrators and developers monitor resource consumption and prevent hitting critical limits that could impact performance or functionality. It provides early warnings when limits are approaching their capacity.</p> <p>Key functionalities:</p> <ul> <li>Limit Retrieval: Fetches a comprehensive list of all Salesforce org limits using the Salesforce CLI.</li> <li>Usage Calculation: Calculates the percentage of each limit that is currently being used.</li> <li>Threshold-Based Alerting: Assigns a severity (success, warning, or error) to each limit based on configurable thresholds:<ul> <li>Warning: If usage exceeds 50% (configurable via <code>LIMIT_THRESHOLD_WARNING</code> environment variable).</li> <li>Error: If usage exceeds 75% (configurable via <code>LIMIT_THRESHOLD_ERROR</code> environment variable).</li> </ul> </li> <li>CSV Report Generation: Generates a CSV file containing all org limits, their current usage, maximum allowed, and calculated percentage used, along with the assigned severity.</li> <li>Notifications: Sends notifications to configured channels (Grafana, Slack, MS Teams) with a summary of limits that have exceeded the warning or error thresholds.</li> </ul> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Salesforce CLI Integration: It executes the <code>sf org limits list</code> command to retrieve the current org limits. It parses the JSON output of this command.</li> <li>Data Processing: It iterates through the retrieved limits, calculates the <code>used</code> and <code>percentUsed</code> values, and assigns a <code>severity</code> (success, warning, error) based on the configured thresholds.</li> <li>Environment Variable Configuration: Reads <code>LIMIT_THRESHOLD_WARNING</code> and <code>LIMIT_THRESHOLD_ERROR</code> environment variables to set the warning and error thresholds for limit usage.</li> <li>Report Generation: It uses <code>generateCsvFile</code> to create the CSV report of org limits.</li> <li>Notification Integration: It integrates with the <code>NotifProvider</code> to send notifications, including attachments of the generated CSV report and detailed metrics for each limit, which can be consumed by monitoring dashboards like Grafana.</li> <li>Exit Code Management: Sets the process exit code to 1 if any limit is in an 'error' state, indicating a critical issue.</li> </ul>"},{"location":"hardis/org/monitor/limits/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. outputfile-f option Force the path and name of output report file. Must end with .csv skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/monitor/limits/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:monitor:limits\n</code></pre>"},{"location":"hardis/org/purge/apexlog/","title":"apexlog","text":""},{"location":"hardis/org/purge/apexlog/#hardisorgpurgeapexlog","title":"hardis:org:purge:apexlog","text":""},{"location":"hardis/org/purge/apexlog/#description","title":"Description","text":"<p>Purges Apex debug logs from a Salesforce org.</p> <p>This command provides a quick and efficient way to clear out accumulated Apex debug logs from your Salesforce environment. This is particularly useful for:</p> <ul> <li>Storage Management: Freeing up valuable data storage space in your Salesforce org.</li> <li>Performance Optimization: Reducing the overhead associated with large volumes of debug logs.</li> <li>Troubleshooting: Ensuring that new debug logs are generated cleanly without interference from old, irrelevant logs.</li> </ul> <p>Key functionalities:</p> <ul> <li>Log Identification: Queries the <code>ApexLog</code> object to identify all existing debug logs.</li> <li>Confirmation Prompt: Before deletion, it prompts for user confirmation, displaying the number of Apex logs that will be deleted.</li> <li>Bulk Deletion: Uses the Salesforce Bulk API to efficiently delete a large number of Apex logs.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>SOQL Query: It executes a SOQL query (<code>SELECT Id FROM ApexLog LIMIT 50000</code>) to retrieve the IDs of Apex logs to be deleted. The limit is set to 50,000 to handle large volumes of logs.</li> <li>CSV Export: The retrieved log IDs are temporarily exported to a CSV file (<code>ApexLogsToDelete_*.csv</code>) in the <code>./tmp</code> directory.</li> <li>User Confirmation: It uses the <code>prompts</code> library to ask for user confirmation before proceeding with the deletion, displaying the count of logs to be purged.</li> <li>Bulk API Deletion: It then uses the Salesforce CLI's <code>sf data delete bulk</code> command, pointing to the generated CSV file, to perform the mass deletion of Apex logs.</li> <li>File System Operations: It uses <code>fs-extra</code> to create the temporary directory and manage the CSV file.</li> <li>Error Handling: Includes error handling for the query and deletion operations.</li> </ul>"},{"location":"hardis/org/purge/apexlog/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. prompt-z boolean Prompt for confirmation (true by default, use --no-prompt to skip) skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/purge/apexlog/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:purge:apexlog\n</code></pre> <pre><code>$ sf hardis:org:purge:apexlog --target-org nicolas.vuillamy@gmail.com\n</code></pre>"},{"location":"hardis/org/purge/flow/","title":"flow","text":""},{"location":"hardis/org/purge/flow/#hardisorgpurgeflow","title":"hardis:org:purge:flow","text":""},{"location":"hardis/org/purge/flow/#description","title":"Description","text":"<p>Purges old or unwanted Flow versions from a Salesforce org, with an option to delete related Flow Interviews.</p> <p>This command helps maintain a clean and performant Salesforce org by removing obsolete Flow versions. Over time, multiple versions of Flows can accumulate, consuming storage and potentially impacting performance. This tool provides a controlled way to clean up these versions.</p> <p>Key functionalities:</p> <ul> <li>Targeted Flow Selection: Allows you to filter Flow versions to delete by name (<code>--name</code>) and status (<code>--status</code>, e.g., <code>Obsolete</code>, <code>Draft</code>, <code>Inactive</code>).</li> <li>Flow Interview Deletion: If a Flow version cannot be deleted due to active Flow Interviews, the <code>--delete-flow-interviews</code> flag (or interactive prompt) allows you to delete these interviews first, then retry the Flow version deletion.</li> <li>Confirmation Prompt: In interactive mode, it prompts for confirmation before proceeding with the deletion of Flow versions and Flow Interviews.</li> <li>Partial Success Handling: The <code>--allowpurgefailure</code> flag (default <code>true</code>) allows the command to continue even if some deletions fail, reporting the errors.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>SOQL Queries (Tooling API): It queries the <code>Flow</code> object (using the Tooling API) to list Flow versions based on the provided filters (name, status, manageable state).</li> <li>Bulk Deletion (Tooling API): It uses <code>bulkDeleteTooling</code> to perform mass deletions of Flow versions. If deletion fails due to active interviews, it extracts the interview IDs.</li> <li>Flow Interview Management: If <code>delete-flow-interviews</code> is enabled, it queries <code>FlowInterview</code> objects, performs bulk deletion of the identified interviews using <code>bulkDelete</code>, and then retries the Flow version deletion.</li> <li>Interactive Prompts: Uses the <code>prompts</code> library to interact with the user for selecting Flows, statuses, and confirming deletion actions.</li> <li>Error Reporting: Logs detailed error messages for failed deletions, including the specific reasons.</li> <li>Command-Line Execution: Uses <code>execSfdxJson</code> to execute Salesforce CLI commands for querying Flow data.</li> </ul>"},{"location":"hardis/org/purge/flow/#parameters","title":"Parameters","text":"Name Type Description Default Required Options allowpurgefailure-f boolean Allows purges to fail without exiting with 1. Use --no-allowpurgefailure to disable debug-d boolean Activate debug mode (more logs) delete-flow-interviews-w boolean If the presence of Flow interviews prevent to delete flows versions, delete them before retrying to delete flow versions flags-dir option undefined instanceurl-r option URL of org instance https://login.salesforce.com json boolean Format output as json. name-n option Filter according to Name criteria prompt-z boolean Prompt for confirmation (true by default, use --no-prompt to skip) skipauth boolean Skip authentication check when a default username is required status-s option Filter according to Status criteria target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/purge/flow/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:purge:flow\n</code></pre> <pre><code>$ sf hardis:org:purge:flow --target-org nicolas.vuillamy@gmail.com --no-prompt --delete-flow-interviews\n</code></pre> <pre><code>$ sf hardis:org:purge:flow --target-org nicolas.vuillamy@gmail.com --status \"Obsolete,Draft,InvalidDraft\" --name TestFlow\n</code></pre>"},{"location":"hardis/org/refresh/after-refresh/","title":"after-refresh","text":""},{"location":"hardis/org/refresh/after-refresh/#hardisorgrefreshafter-refresh","title":"hardis:org:refresh:after-refresh","text":""},{"location":"hardis/org/refresh/after-refresh/#description","title":"Description","text":""},{"location":"hardis/org/refresh/after-refresh/#command-behavior","title":"Command Behavior","text":"<p>Restores all previously backed-up Connected Apps (including Consumer Secrets), certificates, custom settings, records and other metadata to a Salesforce org after a sandbox refresh.</p> <p>This command is the second step in the sandbox refresh process. It scans the backup folder created before the refresh, allows interactive or flag-driven selection of items to restore, and automates cleanup and redeployment to the refreshed org while preserving credentials and configuration.</p> <p>Key functionalities:</p> <ul> <li>Choose a backup to restore: Lets you pick the saved sandbox project that contains the artifacts to restore.</li> <li>Select which items to restore: Finds Connected App XMLs, certificates, custom settings and other artifacts and lets you pick what to restore (or restore all).</li> <li>Safety checks and validation: Confirms files exist and prompts before making changes to the target org.</li> <li>Prepare org for restore: Optionally cleans up existing Connected Apps so saved apps can be re-deployed without conflict.</li> <li>Redeploy saved artifacts: Restores Connected Apps (with saved secrets), certificates, SAML SSO configs, custom settings and other metadata.</li> <li>Handle SAML configs: Cleans and updates SAML XML files and helps you choose certificates to wire into restored configs.</li> <li>Restore records: Optionally runs data import from selected SFDMU workspaces to restore record data.</li> <li>Reporting &amp; persistence: Sends restore reports and can update project config to record what was restored.</li> </ul> <p>This command is part of sfdx-hardis Sandbox Refresh and is intended to be run after a sandbox refresh to re-apply saved metadata, credentials and data.</p> Technical explanations <ul> <li>Backup Folder Handling: Reads the immediate subfolders of <code>scripts/sandbox-refresh/</code> and validates the chosen project contains the expected <code>manifest/</code> and <code>force-app</code> layout.</li> <li>Metadata &amp; Deployment APIs: Uses <code>sf project deploy start --manifest</code> for package-based deploys, <code>sf project deploy start --metadata-dir</code> for MDAPI artifacts (certificates), and utility functions for Connected App deployment that preserve consumer secrets.</li> <li>SAML Handling: Queries active certificates via tooling API, updates SAML XML files, and deploys using <code>sf project deploy start -m SamlSsoConfig</code>.</li> <li>Records Handling: Uses interactive selection of SFDMU workspaces and runs data import utilities to restore records.</li> <li>Error Handling &amp; Summary: Aggregates results, logs success/warnings/errors, and returns a structured result indicating which items were restored and any failures.</li> </ul>"},{"location":"hardis/org/refresh/after-refresh/#parameters","title":"Parameters","text":"Name Type Description Default Required Options all-a boolean If set, all Connected Apps from the local repository will be processed. Takes precedence over --name if both are specified. flags-dir option undefined json boolean Format output as json. name-n option Connected App name(s) to process (bypasses selection prompt). For multiple apps, separate with commas (e.g., \"App1,App2\") skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option WebSocket host:port for VS Code SFDX Hardis UI integration"},{"location":"hardis/org/refresh/after-refresh/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:refresh:after-refresh\n</code></pre> <pre><code>$ sf hardis:org:refresh:after-refresh --name \"MyConnectedApp\" // Process specific app, no selection prompt\n</code></pre> <pre><code>$ sf hardis:org:refresh:after-refresh --name \"App1,App2,App3\" // Process multiple apps, no selection prompt\n</code></pre> <pre><code>$ sf hardis:org:refresh:after-refresh --all // Process all apps, no selection prompt\n</code></pre> <pre><code>$ sf hardis:org:refresh:after-refresh --target-org myDevOrg\n</code></pre>"},{"location":"hardis/org/refresh/before-refresh/","title":"before-refresh","text":""},{"location":"hardis/org/refresh/before-refresh/#hardisorgrefreshbefore-refresh","title":"hardis:org:refresh:before-refresh","text":""},{"location":"hardis/org/refresh/before-refresh/#description","title":"Description","text":""},{"location":"hardis/org/refresh/before-refresh/#command-behavior","title":"Command Behavior","text":"<p>Backs up all Connected Apps (including Consumer Secrets), certificates, custom settings, records and other metadata from a Salesforce org before a sandbox refresh, enabling full restoration after the refresh.</p> <p>This command prepares a complete backup prior to a sandbox refresh. It creates a dedicated project under <code>scripts/sandbox-refresh/&lt;sandbox-folder&gt;</code>, retrieves metadata and data, attempts to capture Connected App consumer secrets, and can optionally delete the apps so they can be reuploaded after the refresh.</p> <p>Key functionalities:</p> <ul> <li>Create a save project: Generates a dedicated project folder to store all artifacts for the sandbox backup.</li> <li>Find and select Connected Apps: Lists Connected Apps in the org and lets you pick specific apps, use a name filter, or process all apps.</li> <li>Save metadata for restore: Builds a manifest and retrieves the metadata types you choose so they can be restored after the refresh.</li> <li>Capture Consumer Secrets: Attempts to capture Connected App consumer secrets automatically (opens a browser session when possible) and falls back to a short manual prompt when needed.</li> <li>Collect certificates: Saves certificate files and their definitions so they can be redeployed later.</li> <li>Export custom settings &amp; records: Lets you pick custom settings to export as JSON and optionally export records using configured data workspaces.</li> <li>Persist choices &amp; report: Stores your backup choices in project config and sends report files for traceability.</li> <li>Optional cleanup: Can delete backed-up Connected Apps from the org so they can be re-uploaded cleanly after the refresh.</li> <li>Interactive safety checks: Prompts you to confirm package contents and other potentially destructive actions; sensible defaults are chosen where appropriate.</li> </ul> <p>This command is part of sfdx-hardis Sandbox Refresh and is intended to be run before a sandbox refresh so that all credentials, certificates, metadata and data can be restored afterwards.</p> Technical explanations <ul> <li>Salesforce CLI Integration: Uses <code>sf org list metadata</code>, <code>sf project retrieve start</code>, <code>sf project generate</code>, <code>sf project deploy start</code>, and <code>sf data tree export</code>/<code>import</code> where applicable.</li> <li>Metadata Handling: Writes and reads package XML files under the generated project (<code>manifest/</code>), copies MDAPI certificate artifacts into <code>force-app/main/default/certs</code>, and produces <code>package-metadata-to-restore.xml</code> for post-refresh deployment.</li> <li>Consumer Secret Handling: Uses <code>puppeteer-core</code> with an executable path from <code>getChromeExecutablePath()</code> (env var <code>PUPPETEER_EXECUTABLE_PATH</code> may be required). Falls back to manual prompt when browser automation cannot be used.</li> <li>Data &amp; Records: Exports custom settings to JSON and supports exporting records through SFDMU workspaces chosen interactively.</li> <li>Config &amp; Reporting: Updates project/user config under <code>config/.sfdx-hardis.yml#refreshSandboxConfig</code> and reports artifacts to the WebSocket client.</li> <li>Error Handling: Provides clear error messages and a summary response object indicating success/failure and which secrets were captured.</li> </ul>"},{"location":"hardis/org/refresh/before-refresh/#parameters","title":"Parameters","text":"Name Type Description Default Required Options all-a boolean If set, all Connected Apps from the org will be processed. Takes precedence over --name if both are specified. delete-d boolean By default, Connected Apps are not deleted from the org after saving. Set this flag to force their deletion so they will be able to be reuploaded again after refreshing the org. flags-dir option undefined json boolean Format output as json. name-n option Connected App name(s) to process. For multiple apps, separate with commas (e.g., \"App1,App2\") skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/refresh/before-refresh/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:refresh:before-refresh\n</code></pre> <pre><code>$ sf hardis:org:refresh:before-refresh --name \"MyConnectedApp\"\n</code></pre> <pre><code>$ sf hardis:org:refresh:before-refresh --name \"App1,App2,App3\"\n</code></pre> <pre><code>$ sf hardis:org:refresh:before-refresh --all\n</code></pre> <pre><code>$ sf hardis:org:refresh:before-refresh --delete\n</code></pre>"},{"location":"hardis/org/retrieve/packageconfig/","title":"packageconfig","text":""},{"location":"hardis/org/retrieve/packageconfig/#hardisorgretrievepackageconfig","title":"hardis:org:retrieve:packageconfig","text":""},{"location":"hardis/org/retrieve/packageconfig/#description","title":"Description","text":"<p>Retrieves the installed package configuration from a Salesforce org and optionally updates the local project configuration.</p> <p>This command is useful for maintaining an accurate record of installed packages within your Salesforce project, which is crucial for managing dependencies and ensuring consistent deployments across environments.</p> <p>Key functionalities:</p> <ul> <li>Package Listing: Connects to a specified Salesforce org (or prompts for one if not provided) and retrieves a list of all installed packages.</li> <li>Configuration Update: Offers the option to update your local project's configuration with the retrieved list of installed packages. This can be beneficial for automating package installations during environment setup or CI/CD processes.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Org Connection: It establishes a connection to the target Salesforce org using the provided or prompted username.</li> <li>Metadata Retrieval: It utilizes <code>MetadataUtils.listInstalledPackages</code> to query the Salesforce org and obtain details about the installed packages.</li> <li>Interactive Prompt: It uses the <code>prompts</code> library to ask the user whether they want to update their local project configuration with the retrieved package list.</li> <li>Configuration Management: If the user confirms, it calls <code>managePackageConfig</code> to update the project's configuration file (likely <code>.sfdx-hardis.yml</code>) with the new package information.</li> <li>User Feedback: Provides clear messages to the user about the success of the package retrieval and configuration update.</li> </ul>"},{"location":"hardis/org/retrieve/packageconfig/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/retrieve/packageconfig/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:retrieve:packageconfig\n</code></pre> <pre><code>sf hardis:org:retrieve:packageconfig -u myOrg\n</code></pre>"},{"location":"hardis/org/retrieve/sources/analytics/","title":"analytics","text":""},{"location":"hardis/org/retrieve/sources/analytics/#hardisorgretrievesourcesanalytics","title":"hardis:org:retrieve:sources:analytics","text":""},{"location":"hardis/org/retrieve/sources/analytics/#description","title":"Description","text":""},{"location":"hardis/org/retrieve/sources/analytics/#command-behavior","title":"Command Behavior","text":"<p>Retrieves all CRM Analytics (formerly Tableau CRM or Einstein Analytics) sources from a Salesforce org, including workarounds for known SFDX bugs.</p> <p>This command is designed to extract the complete configuration of your CRM Analytics assets, such as dashboards, dataflows, lenses, and recipes. It's essential for version controlling your Analytics development, migrating assets between environments, or backing up your Analytics configurations.</p> <p>Key functionalities:</p> <ul> <li>Comprehensive Retrieval: Fetches all supported CRM Analytics metadata types.</li> <li>SFDX Bug Workarounds: Incorporates internal logic to handle common issues or limitations encountered when retrieving CRM Analytics metadata using standard Salesforce CLI commands.</li> <li>Target Org Selection: Allows you to specify the Salesforce org from which to retrieve the Analytics sources. If not provided, it will prompt for selection.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Full Org Manifest Generation: It first generates a complete <code>package.xml</code> for the target org using <code>buildOrgManifest</code>. This ensures that all available metadata, including CRM Analytics components, are identified.</li> <li>Analytics Metadata Filtering: It then filters this comprehensive <code>package.xml</code> to include only the CRM Analytics-related metadata types (e.g., <code>WaveApplication</code>, <code>WaveDashboard</code>, <code>WaveDataflow</code>, <code>WaveLens</code>, <code>WaveRecipe</code>, <code>WaveXmd</code>).</li> <li>Filtered <code>package.xml</code> Creation: A new <code>package.xml</code> file containing only the filtered CRM Analytics metadata is created temporarily.</li> <li>Salesforce CLI Retrieval: It executes the <code>sf project retrieve start</code> command, using the newly created Analytics-specific <code>package.xml</code> to retrieve the sources to your local project.</li> <li>Temporary File Management: It uses <code>createTempDir</code> to manage temporary files and directories created during the process.</li> <li>Interactive Org Selection: Uses <code>promptOrgUsernameDefault</code> to guide the user in selecting the target Salesforce org if not provided via flags.</li> </ul>"},{"location":"hardis/org/retrieve/sources/analytics/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/retrieve/sources/analytics/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:retrieve:sources:analytics\n</code></pre>"},{"location":"hardis/org/retrieve/sources/dx/","title":"dx","text":""},{"location":"hardis/org/retrieve/sources/dx/#hardisorgretrievesourcesdx","title":"hardis:org:retrieve:sources:dx","text":""},{"location":"hardis/org/retrieve/sources/dx/#description","title":"Description","text":""},{"location":"hardis/org/retrieve/sources/dx/#command-behavior","title":"Command Behavior","text":"<p>Retrieves Salesforce metadata from an org and converts it into Salesforce DX (SFDX) source format.</p> <p>This command provides a flexible way to pull metadata from any Salesforce org into your local SFDX project. It's particularly useful for:</p> <ul> <li>Initial Project Setup: Populating a new SFDX project with existing org metadata.</li> <li>Environment Synchronization: Bringing changes from a Salesforce org (e.g., a sandbox) into your local development environment.</li> <li>Selective Retrieval: Allows you to specify which metadata types to retrieve, or to filter out certain types.</li> <li>Org Shape Creation: Can optionally create an org shape, which is useful for defining the characteristics of scratch orgs.</li> </ul> <p>Key functionalities:</p> <ul> <li>Metadata Retrieval: Connects to a target Salesforce org and retrieves metadata based on specified filters.</li> <li>MDAPI to SFDX Conversion: Converts the retrieved metadata from Metadata API format to SFDX source format.</li> <li>Org Shape Generation (Optional): If the <code>--shape</code> flag is used, it also captures the org's shape and stores installed package information.</li> <li>Temporary File Management: Uses temporary folders for intermediate steps, ensuring a clean working directory.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Temporary Directory Management: It creates and manages temporary directories (<code>./tmp</code>, <code>mdapipkg</code>, <code>sfdx-project</code>) to stage the retrieved metadata and the converted SFDX sources.</li> <li><code>MetadataUtils.retrieveMetadatas</code>: This utility is used to connect to the Salesforce org and retrieve metadata in Metadata API format. It supports filtering by metadata types and excluding certain items.</li> <li>SFDX Project Creation: It executes <code>sf project generate</code> to create a new SFDX project structure within a temporary directory.</li> <li>MDAPI to SFDX Conversion: It then uses <code>sf project convert mdapi</code> to convert the retrieved metadata from the MDAPI format to the SFDX source format.</li> <li>File System Operations: It uses <code>fs-extra</code> to copy the converted SFDX sources to the main project folder, while preserving important project files like <code>.gitignore</code> and <code>sfdx-project.json</code>.</li> <li>Org Shape Handling: If <code>--shape</code> is enabled, it copies the generated <code>package.xml</code> and stores information about installed packages using <code>setConfig</code>.</li> <li>Error Handling: Includes robust error handling for Salesforce CLI commands and file system operations.</li> <li>WebSocket Communication: Uses <code>WebSocketClient.sendRefreshCommandsMessage</code> to notify connected VS Code clients about changes to the project.</li> </ul>"},{"location":"hardis/org/retrieve/sources/dx/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) filteredmetadatas-m option Comma separated list of Metadatas keys to remove from PackageXml file flags-dir option undefined folder-f option Folder . instanceurl-r option URL of org instance json boolean Format output as json. keepmetadatatypes-k option Comma separated list of metadatas types that will be the only ones to be retrieved shape-s boolean Updates project-scratch-def.json from org shape skipauth boolean Skip authentication check when a default username is required target-org-o option undefined tempfolder-t option Temporary folder ./tmp websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/retrieve/sources/dx/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:retrieve:sources:dx\n</code></pre>"},{"location":"hardis/org/retrieve/sources/dx2/","title":"dx2","text":""},{"location":"hardis/org/retrieve/sources/dx2/#hardisorgretrievesourcesdx2","title":"hardis:org:retrieve:sources:dx2","text":""},{"location":"hardis/org/retrieve/sources/dx2/#description","title":"Description","text":""},{"location":"hardis/org/retrieve/sources/dx2/#command-behavior","title":"Command Behavior","text":"<p>Retrieves Salesforce metadata from an org into SFDX source format, offering flexible input options for specifying metadata to retrieve.</p> <p>This command provides an alternative and enhanced way to pull metadata from any Salesforce org into your local SFDX project. It's particularly useful when you need fine-grained control over which metadata components are retrieved, either by providing a custom <code>package.xml</code> or by using predefined templates.</p> <p>Key functionalities:</p> <ul> <li><code>package.xml</code> Input: You can specify the path to a <code>package.xml</code> file using the <code>--packagexml</code> flag, which defines the exact metadata components to retrieve.</li> <li>Template-Based Retrieval: Use the <code>--template</code> flag to leverage predefined <code>package.xml</code> templates provided by sfdx-hardis (e.g., <code>wave</code> for CRM Analytics metadata), simplifying common retrieval scenarios.</li> <li>Interactive Input: If neither <code>--packagexml</code> nor <code>--template</code> is provided, the command will interactively prompt you to select a <code>package.xml</code> file or a template.</li> <li>Target Org Selection: Allows you to specify the Salesforce org from which to retrieve the sources. If not provided, it will prompt for selection.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Org Selection: It uses <code>promptOrg</code> to guide the user in selecting the target Salesforce org if not provided via flags.</li> <li><code>package.xml</code> Resolution: It determines the <code>package.xml</code> to use based on the provided flags (<code>--packagexml</code> or <code>--template</code>). If a template is used, it resolves the path to the corresponding template file within the sfdx-hardis installation.</li> <li>File System Operations: It checks if the specified <code>package.xml</code> file exists. If the file is outside the current project directory, it copies it to a temporary location within the project to ensure proper handling by the Salesforce CLI.</li> <li>Salesforce CLI Retrieval: It executes the <code>sf project retrieve start</code> command, passing the resolved <code>package.xml</code> path and the target username to retrieve the sources.</li> <li>User Feedback: Provides clear messages to the user about the retrieval process and its success.</li> </ul>"},{"location":"hardis/org/retrieve/sources/dx2/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. packagexml-x option Path to package.xml file skipauth boolean Skip authentication check when a default username is required target-org-o option undefined template-t option sfdx-hardis package.xml Template name. ex: wave websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/retrieve/sources/dx2/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:retrieve:sources:dx2\n</code></pre>"},{"location":"hardis/org/retrieve/sources/metadata/","title":"metadata","text":""},{"location":"hardis/org/retrieve/sources/metadata/#hardisorgretrievesourcesmetadata","title":"hardis:org:retrieve:sources:metadata","text":""},{"location":"hardis/org/retrieve/sources/metadata/#description","title":"Description","text":""},{"location":"hardis/org/retrieve/sources/metadata/#command-behavior","title":"Command Behavior","text":"<p>Retrieves Salesforce metadata from an org into a local directory, primarily for backup and monitoring purposes.</p> <p>This command is designed to pull metadata from any Salesforce org, providing a snapshot of its configuration. It's particularly useful in monitoring contexts where you need to track changes in an org's metadata over time.</p> <p>Key functionalities:</p> <ul> <li>Metadata Retrieval: Connects to a target Salesforce org and retrieves metadata based on a specified <code>package.xml</code>.</li> <li>Managed Package Filtering: By default, it filters out metadata from managed packages to reduce the volume of retrieved data. This can be overridden with the <code>--includemanaged</code> flag.</li> <li>Monitoring Integration: Designed to be used within a monitoring CI/CD job, it performs additional post-retrieval actions like running Apex tests and checking for legacy API usage.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Git Repository Check: Ensures the current directory is a Git repository and initializes it if necessary.</li> <li><code>MetadataUtils.retrieveMetadatas</code>: This utility is the core of the retrieval process. It connects to the Salesforce org, retrieves metadata based on the provided <code>package.xml</code> and filtering options (e.g., <code>filterManagedItems</code>), and places the retrieved files in a specified folder.</li> <li>File System Operations: Uses <code>fs-extra</code> to manage directories and copy retrieved files to the target folder.</li> <li>Post-Retrieval Actions (for Monitoring Jobs): If the command detects it's running within a monitoring CI/CD job (<code>isMonitoringJob()</code>):<ul> <li>It updates the <code>.gitlab-ci.yml</code> file if <code>AUTO_UPDATE_GITLAB_CI_YML</code> is set.</li> <li>It converts the retrieved metadata into SFDX format using <code>sf project convert mdapi</code>.</li> <li>It executes <code>sf hardis:org:test:apex</code> to run Apex tests.</li> <li>It executes <code>sf hardis:org:diagnose:legacyapi</code> to check for legacy API usage.</li> <li>It logs warnings if post-actions fail or if the monitoring version is deprecated.</li> </ul> </li> <li>Error Handling: Includes robust error handling for retrieval failures and post-action execution.</li> </ul>"},{"location":"hardis/org/retrieve/sources/metadata/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined folder-f option Folder . includemanaged boolean Include items from managed packages instanceurl-r option URL of org instance json boolean Format output as json. packagexml-p option Path to package.xml manifest file skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/retrieve/sources/metadata/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:retrieve:sources:metadata\n</code></pre> <pre><code>$ SFDX_RETRIEVE_WAIT_MINUTES=200 sf hardis:org:retrieve:sources:metadata\n</code></pre>"},{"location":"hardis/org/retrieve/sources/retrofit/","title":"retrofit","text":""},{"location":"hardis/org/retrieve/sources/retrofit/#hardisorgretrievesourcesretrofit","title":"hardis:org:retrieve:sources:retrofit","text":""},{"location":"hardis/org/retrieve/sources/retrofit/#description","title":"Description","text":"<p>Retrieve changes from org link to a ref branch not present in sources</p> <p>This command need to be triggered from a branch that is connected to a SF org. It will then retrieve all changes not present in that branch sources, commit them and create a merge request against the default branch. If a merge request already exists, it will simply add a new commit.</p> <p>Define the following properties in .sfdx-hardis.yml</p> <p>- productionBranch : Name of the git branch that is corresponding to production org   - retrofitBranch : Name of the git branch that will be used as merge request target</p> <p>List of metadata to retrieve can be set in three way, in order of priority :</p> <p>- <code>CI_SOURCES_TO_RETROFIT</code>: env variable (can be defined in CI context)   - <code>sourcesToRetrofit</code> property in <code>.sfdx-hardis.yml</code>   - Default list:</p> <pre><code>- CompactLayout\n- CustomApplication\n- CustomField\n- CustomLabel\n- CustomLabels\n- CustomMetadata\n- CustomObject\n- CustomObjectTranslation\n- CustomTab\n- DuplicateRule\n- EmailTemplate\n- FlexiPage\n- GlobalValueSet\n- Layout\n- ListView\n- MatchingRules\n- PermissionSet\n- RecordType\n- StandardValueSet\n- Translations\n- ValidationRule\n</code></pre> <p>You can also ignore some files even if they have been updated in production. To do that, define property retrofitIgnoredFiles in .sfdx-hardis.yml</p> <p>Example of full retrofit configuration:</p> <pre><code>productionBranch: master\nretrofitBranch: preprod\nretrofitIgnoredFiles:\n- force-app/main/default/applications/MyApp.app-meta.xml\n- force-app/main/default/applications/MyOtherApp.app-meta.xml\n- force-app/main/default/flexipages/MyFlexipageContainingDashboards.flexipage-meta.xml\n</code></pre>"},{"location":"hardis/org/retrieve/sources/retrofit/#parameters","title":"Parameters","text":"Name Type Description Default Required Options commit boolean If true, a commit will be performed after the retrofit commitmode option Defines if we commit all retrieved updates, or all updates including creations updated updatedall debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. productionbranch option Name of the git branch corresponding to the org we want to perform the retrofit on. Can be defined in productionBranch property in .sfdx-hardis.yml push boolean If true, a push will be performed after the retrofit pushmode option Defines if we send merge request options to git push arguments default defaultmergerequest retrofittargetbranch option Name of branch the merge request will have as target Can be defined in retrofitBranch property in .sfdx-hardis.yml skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/retrieve/sources/retrofit/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:retrieve:sources:retrofit\n</code></pre> <pre><code>sf hardis:org:retrieve:sources:retrofit --productionbranch master --commit --commitmode updated\n</code></pre> <pre><code>sf hardis:org:retrieve:sources:retrofit --productionbranch master  --retrofitbranch preprod --commit --commitmode updated --push --pushmode mergerequest\n</code></pre>"},{"location":"hardis/org/test/apex/","title":"apex","text":""},{"location":"hardis/org/test/apex/#hardisorgtestapex","title":"hardis:org:test:apex","text":""},{"location":"hardis/org/test/apex/#description","title":"Description","text":"<p>Run apex tests in Salesforce org</p> <p>If following configuration is defined, it will fail if apex coverage target is not reached:</p> <ul> <li>Env <code>APEX_TESTS_MIN_COVERAGE_ORG_WIDE</code> or <code>.sfdx-hardis</code> property <code>apexTestsMinCoverageOrgWide</code></li> <li>Env <code>APEX_TESTS_MIN_COVERAGE_ORG_WIDE</code> or <code>.sfdx-hardis</code> property <code>apexTestsMinCoverageOrgWide</code></li> </ul> <p>You can override env var SFDX_TEST_WAIT_MINUTES to wait more than 120 minutes.</p> <p>This command is part of sfdx-hardis Monitoring and can output Grafana, Slack and MsTeams Notifications.</p>"},{"location":"hardis/org/test/apex/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined testlevel-l option Level of tests to apply to validate deployment RunLocalTests NoTestRunRunSpecifiedTestsRunLocalTestsRunAllTestsInOrg websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/test/apex/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:test:apex\n</code></pre>"},{"location":"hardis/org/user/activateinvalid/","title":"activateinvalid","text":""},{"location":"hardis/org/user/activateinvalid/#hardisorguseractivateinvalid","title":"hardis:org:user:activateinvalid","text":""},{"location":"hardis/org/user/activateinvalid/#description","title":"Description","text":"<p>Update sandbox users so their email is valid</p> <p>Example: replaces <code>toto@company.com.dev.invalid</code> with <code>toto@company.com.dev.invalid</code></p> <p>See article below</p> <p></p>"},{"location":"hardis/org/user/activateinvalid/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. profiles-p option Comma-separated list of profiles names that you want to reactive users assigned to and with a .invalid email skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/user/activateinvalid/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:user:activateinvalid\n</code></pre> <pre><code>$ sf hardis:org:user:activateinvalid --target-org my-user@myorg.com\n</code></pre> <pre><code>$ sf hardis:org:user:activateinvalid --profiles 'System Administrator,MyCustomProfile' --target-org my-user@myorg.com\n</code></pre>"},{"location":"hardis/org/user/freeze/","title":"freeze","text":""},{"location":"hardis/org/user/freeze/#hardisorguserfreeze","title":"hardis:org:user:freeze","text":""},{"location":"hardis/org/user/freeze/#description","title":"Description","text":""},{"location":"hardis/org/user/freeze/#command-behavior","title":"Command Behavior","text":"<p>Freezes Salesforce user logins, temporarily revoking access for selected users.</p> <p>This command allows administrators to freeze Salesforce user logins. It provides a controlled way to temporarily revoke user access without deactivating the user record itself. This is useful for managing user access during leaves, security incidents, or when a user's access needs to be temporarily suspended.</p> <p>Key functionalities:</p> <ul> <li>User Selection: You can select users to freeze based on their assigned profiles.<ul> <li><code>--includeprofiles</code>: Freeze users belonging to a comma-separated list of specified profiles.</li> <li><code>--excludeprofiles</code>: Freeze users belonging to all profiles except those specified in a comma-separated list.</li> <li>If no profile flags are provided, an interactive menu will allow you to select profiles.</li> </ul> </li> <li>Interactive Confirmation: In non-CI environments, it prompts for confirmation before freezing the selected users.</li> <li>Bulk Freezing: Efficiently freezes multiple user logins using Salesforce's Bulk API.</li> <li>Reporting: Generates CSV and XLSX reports of the users that are about to be frozen.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>SOQL Queries (Bulk API): It executes SOQL queries against the <code>User</code> and <code>Profile</code> objects to identify active users based on the provided profile filters. It then queries the <code>UserLogin</code> object to find active login sessions for these users.</li> <li>Interactive Prompts: Uses the <code>prompts</code> library to guide the user through profile selection and to confirm the freezing operation.</li> <li>Bulk Update: It constructs an array of <code>UserLogin</code> records with their <code>Id</code> and <code>IsFrozen</code> set to <code>true</code>, then uses <code>bulkUpdate</code> to perform the mass update operation on the Salesforce org.</li> <li>Reporting: It uses <code>generateReports</code> to create CSV and XLSX files containing details of the users to be frozen.</li> <li>Logging: Provides clear messages about the number of users found and the success of the freezing process.</li> </ul>"},{"location":"hardis/org/user/freeze/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) excludeprofiles-e option List of profiles that you want to NOT freeze, separated by commas flags-dir option undefined includeprofiles-p option List of profiles that you want to freeze, separated by commas json boolean Format output as json. maxuserdisplay-m option Maximum users to display in logs 100 name-n option Filter according to Name criteria skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/user/freeze/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:user:freeze\n</code></pre> <pre><code>$ sf hardis:org:user:freeze --target-org my-user@myorg.com\n</code></pre> <pre><code>$ sf hardis:org:user:freeze --includeprofiles 'Standard'\n</code></pre> <pre><code>$ sf hardis:org:user:freeze --excludeprofiles 'System Administrator,Some Other Profile'\n</code></pre>"},{"location":"hardis/org/user/unfreeze/","title":"unfreeze","text":""},{"location":"hardis/org/user/unfreeze/#hardisorguserunfreeze","title":"hardis:org:user:unfreeze","text":""},{"location":"hardis/org/user/unfreeze/#description","title":"Description","text":""},{"location":"hardis/org/user/unfreeze/#command-behavior","title":"Command Behavior","text":"<p>Unfreezes Salesforce user logins, restoring access for selected users.</p> <p>This command allows administrators to unfreeze Salesforce user logins, reactivating their access to the Salesforce org. This is the counterpart to the <code>freeze</code> command and is used to restore access after a temporary suspension.</p> <p>Key functionalities:</p> <ul> <li>User Selection: You can select users to unfreeze based on their assigned profiles.<ul> <li><code>--includeprofiles</code>: Unfreeze users belonging to a comma-separated list of specified profiles.</li> <li><code>--excludeprofiles</code>: Unfreeze users belonging to all profiles except those specified in a comma-separated list.</li> <li>If no profile flags are provided, an interactive menu will allow you to select profiles.</li> </ul> </li> <li>Interactive Confirmation: In non-CI environments, it prompts for confirmation before unfreezing the selected users.</li> <li>Bulk Unfreezing: Efficiently unfreezes multiple user logins using Salesforce's Bulk API.</li> <li>Reporting: Generates CSV and XLSX reports of the users that are about to be unfrozen.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>SOQL Queries (Bulk API): It executes SOQL queries against the <code>User</code> and <code>Profile</code> objects to identify active users based on the provided profile filters. It then queries the <code>UserLogin</code> object to find frozen login sessions for these users.</li> <li>Interactive Prompts: Uses the <code>prompts</code> library to guide the user through profile selection and to confirm the unfreezing operation.</li> <li>Bulk Update: It constructs an array of <code>UserLogin</code> records with their <code>Id</code> and <code>IsFrozen</code> set to <code>false</code>, then uses <code>bulkUpdate</code> to perform the mass update operation on the Salesforce org.</li> <li>Reporting: It uses <code>generateReports</code> to create CSV and XLSX files containing details of the users to be unfrozen.</li> <li>Logging: Provides clear messages about the number of users found and the success of the unfreezing process.</li> </ul>"},{"location":"hardis/org/user/unfreeze/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) excludeprofiles-e option List of profiles that you want to NOT unfreeze, separated by commas flags-dir option undefined includeprofiles-p option List of profiles that you want to unfreeze, separated by commas json boolean Format output as json. maxuserdisplay-m option Maximum users to display in logs 100 name-n option Filter according to Name criteria skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/org/user/unfreeze/#examples","title":"Examples","text":"<pre><code>$ sf hardis:org:user:unfreeze\n</code></pre> <pre><code>$ sf hardis:org:user:unfreeze --target-org my-user@myorg.com\n</code></pre> <pre><code>$ sf hardis:org:user:unfreeze --includeprofiles 'Standard'\n</code></pre> <pre><code>$ sf hardis:org:user:unfreeze --excludeprofiles 'System Administrator,Some Other Profile'\n</code></pre>"},{"location":"hardis/package/create/","title":"create","text":""},{"location":"hardis/package/create/#hardiscreate","title":"hardiscreate","text":""},{"location":"hardis/package/create/#description","title":"Description","text":""},{"location":"hardis/package/create/#command-behavior","title":"Command Behavior","text":"<p>Creates a new Salesforce package (either Managed or Unlocked) in your Dev Hub.</p> <p>This command streamlines the process of setting up a new Salesforce package, which is a fundamental step for modularizing your Salesforce metadata and enabling continuous integration and delivery practices. It guides you through defining the package's essential properties.</p> <p>Key functionalities:</p> <ul> <li>Interactive Package Definition: Prompts you for the package name, the path to its source code, and the package type (Managed or Unlocked).</li> <li>Package Type Selection:<ul> <li>Managed Packages: Ideal for AppExchange solutions, where code is hidden in subscriber orgs.</li> <li>Unlocked Packages: Suitable for client projects or shared tooling, where code is readable and modifiable in subscriber orgs.</li> </ul> </li> <li>Package Creation: Executes the Salesforce CLI command to create the package in your connected Dev Hub.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Interactive Prompts: Uses the <code>prompts</code> library to gather necessary information from the user, such as <code>packageName</code>, <code>packagePath</code>, and <code>packageType</code>.</li> <li>Salesforce CLI Integration: It constructs and executes the <code>sf package create</code> command, passing the user-provided details as arguments.</li> <li><code>execSfdxJson</code>: This utility is used to execute the Salesforce CLI command and capture its JSON output, which includes the newly created package's ID.</li> <li>User Feedback: Provides clear messages to the user about the successful creation of the package, including its ID and the associated Dev Hub.</li> </ul>"},{"location":"hardis/package/create/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/package/create/#examples","title":"Examples","text":"<pre><code>$ sf hardis:package:create\n</code></pre>"},{"location":"hardis/package/install/","title":"install","text":""},{"location":"hardis/package/install/#hardisinstall","title":"hardisinstall","text":""},{"location":"hardis/package/install/#description","title":"Description","text":"<p>Install a package in an org using its id (starting with 04t)</p> <p>Assisted menu to propose to update <code>installedPackages</code> property in <code>.sfdx-hardis.yml</code></p>"},{"location":"hardis/package/install/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined installationkey-k option installation key for key-protected package (default: null) json boolean Format output as json. package-p option Package Version Id to install (04t...) skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/package/install/#examples","title":"Examples","text":"<pre><code>$ sf hardis:package:install\n</code></pre>"},{"location":"hardis/package/mergexml/","title":"mergexml","text":""},{"location":"hardis/package/mergexml/#hardismergexml","title":"hardismergexml","text":""},{"location":"hardis/package/mergexml/#description","title":"Description","text":""},{"location":"hardis/package/mergexml/#command-behavior","title":"Command Behavior","text":"<p>Merges multiple Salesforce <code>package.xml</code> files into a single, consolidated <code>package.xml</code> file.</p> <p>This command is useful for combining metadata definitions from various sources (e.g., different feature branches, separate development efforts) into one comprehensive package.xml, which can then be used for deployments or retrievals.</p> <p>Key functionalities:</p> <ul> <li>Flexible Input: You can specify the <code>package.xml</code> files to merge either by:<ul> <li>Providing a comma-separated list of file paths using the <code>--packagexmls</code> flag.</li> <li>Specifying a folder and a glob pattern using <code>--folder</code> and <code>--pattern</code> to automatically discover <code>package.xml</code> files.</li> <li>If no input is provided, an interactive menu will prompt you to select files from the <code>manifest</code> folder.</li> </ul> </li> <li>Customizable Output: You can define the name and path of the resulting merged <code>package.xml</code> file using the <code>--result</code> flag.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: It uses <code>glob</code> to find <code>package.xml</code> files based on the provided folder and pattern, or it directly uses the list of files from the <code>--packagexmls</code> flag.</li> <li>Interactive Prompts: If no <code>package.xml</code> files are specified, it uses the <code>prompts</code> library to allow the user to interactively select files to merge.</li> <li><code>appendPackageXmlFilesContent</code> Utility: The core merging logic is handled by the <code>appendPackageXmlFilesContent</code> utility function. This function reads the content of each input <code>package.xml</code> file, combines their metadata types and members, and writes the consolidated content to the specified result file.</li> <li>XML Manipulation: Internally, <code>appendPackageXmlFilesContent</code> parses the XML of each <code>package.xml</code>, merges the <code>&lt;types&gt;</code> and <code>&lt;members&gt;</code> elements, and then rebuilds the XML structure for the output file.</li> <li>File System Operations: It uses <code>fs-extra</code> to ensure the output directory exists and to write the merged <code>package.xml</code> file.</li> <li>WebSocket Communication: It uses <code>WebSocketClient.requestOpenFile</code> to open the generated merged <code>package.xml</code> file in VS Code for immediate review.</li> </ul>"},{"location":"hardis/package/mergexml/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug boolean debug flags-dir option undefined folder-f option Root folder manifest json boolean Format output as json. packagexmls-p option Comma separated list of package.xml files to merge. Will be prompted to user if not provided pattern-x option Name criteria to list package.xml files //package.xml result-r option Result package.xml file name skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/package/mergexml/#examples","title":"Examples","text":"<pre><code>$ sf hardis:package:mergexml\n</code></pre> <pre><code>$ sf hardis:package:mergexml --folder packages --pattern /**/*.xml --result myMergedPackage.xml\n</code></pre> <pre><code>$ sf hardis:package:mergexml --packagexmls \"config/mypackage1.xml,config/mypackage2.xml,config/mypackage3.xml\" --result myMergedPackage.xml\n</code></pre>"},{"location":"hardis/package/version/create/","title":"create","text":""},{"location":"hardis/package/version/create/#hardisversioncreate","title":"hardisversion:create","text":""},{"location":"hardis/package/version/create/#description","title":"Description","text":""},{"location":"hardis/package/version/create/#command-behavior","title":"Command Behavior","text":"<p>Creates a new version of a Salesforce package (2GP or Unlocked) in your Dev Hub.</p> <p>This command is a crucial step in the package development lifecycle, allowing you to iterate on your Salesforce functionalities and prepare them for deployment or distribution. It automates the process of creating a new, immutable package version.</p> <p>Key functionalities:</p> <ul> <li>Package Selection: Prompts you to select an existing package from your <code>sfdx-project.json</code> file if not specified via the <code>--package</code> flag.</li> <li>Installation Key: Allows you to set an installation key (password) for the package version, protecting it from unauthorized installations. This can be provided via the <code>--installkey</code> flag or interactively.</li> <li>Code Coverage: Automatically includes code coverage checks during package version creation.</li> <li>Post-Creation Actions:<ul> <li>Delete After Creation (<code>--deleteafter</code>): Deletes the newly created package version immediately after its creation. This is useful for testing the package creation process without accumulating unnecessary versions.</li> <li>Install After Creation (<code>--install</code>): Installs the newly created package version on your default Salesforce org. This is convenient for immediate testing or validation.</li> </ul> </li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Package Directory Identification: It identifies the package directory from your <code>sfdx-project.json</code> based on the selected package name.</li> <li>Interactive Prompts: Uses the <code>prompts</code> library to guide the user through package selection and installation key input if not provided as command-line arguments.</li> <li>Configuration Persistence: Stores the <code>defaultPackageInstallationKey</code> in your project's configuration (<code>.sfdx-hardis.yml</code>) for future use.</li> <li>Salesforce CLI Integration: It constructs and executes the <code>sf package version create</code> command, passing the package ID, installation key, and other flags.</li> <li><code>execSfdxJson</code>: This utility is used to execute the Salesforce CLI command and capture its JSON output, which includes the <code>SubscriberPackageVersionId</code> of the newly created version.</li> <li>Post-Creation Command Execution: If <code>--deleteafter</code> or <code>--install</code> flags are set, it executes <code>sf package version delete</code> or delegates to <code>MetadataUtils.installPackagesOnOrg</code> respectively.</li> <li>Error Handling: Includes checks for missing package arguments and handles errors during package version creation or post-creation actions.</li> </ul>"},{"location":"hardis/package/version/create/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) deleteafter boolean Delete package version after creating it flags-dir option undefined install-i boolean Install package version on default org after generation installkey-k option Package installation key json boolean Format output as json. package-p option Package identifier that you want to use to generate a new package version skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/package/version/create/#examples","title":"Examples","text":"<pre><code>$ sf hardis:package:version:create\n</code></pre>"},{"location":"hardis/package/version/list/","title":"list","text":""},{"location":"hardis/package/version/list/#hardisversionlist","title":"hardisversion:list","text":""},{"location":"hardis/package/version/list/#description","title":"Description","text":""},{"location":"hardis/package/version/list/#command-behavior","title":"Command Behavior","text":"<p>Lists all Salesforce package versions associated with your Dev Hub.</p> <p>This command provides a comprehensive overview of your Salesforce packages and their versions, including details such as package ID, version number, installation key status, and creation date. It's an essential tool for managing your package development lifecycle, tracking releases, and identifying available versions for installation or promotion.</p> <p>Key functionalities:</p> <ul> <li>Comprehensive Listing: Displays all package versions, regardless of their status (e.g., released, beta).</li> <li>Dev Hub Integration: Retrieves package version information directly from your connected Dev Hub.</li> </ul> Technical explanations <p>The command's technical implementation is straightforward:</p> <ul> <li>Salesforce CLI Integration: It directly executes the <code>sf package version list</code> command.</li> <li><code>execCommand</code>: This utility is used to run the Salesforce CLI command and capture its output.</li> <li>Output Display: The raw output from the Salesforce CLI command is displayed to the user, providing all the details about the package versions.</li> </ul>"},{"location":"hardis/package/version/list/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/package/version/list/#examples","title":"Examples","text":"<pre><code>$ sf hardis:package:version:list\n</code></pre>"},{"location":"hardis/package/version/promote/","title":"promote","text":""},{"location":"hardis/package/version/promote/#hardisversionpromote","title":"hardisversion:promote","text":""},{"location":"hardis/package/version/promote/#description","title":"Description","text":""},{"location":"hardis/package/version/promote/#command-behavior","title":"Command Behavior","text":"<p>Promotes a Salesforce package version from beta to released status in your Dev Hub.</p> <p>This command is a critical step in the package development lifecycle, marking a package version as stable and ready for production use. Once promoted, a package version can be installed in production organizations.</p> <p>Key functionalities:</p> <ul> <li>Package Version Selection: Allows you to select a specific package version to promote. If the <code>--auto</code> flag is used, it automatically identifies package versions that are not yet released and promotes them.</li> <li>Automated Promotion: When <code>--auto</code> is enabled, it queries for all unreleased package versions and promotes them without further user interaction.</li> <li>Dev Hub Integration: Interacts with your connected Dev Hub to change the status of the package version.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Package Alias Retrieval: It retrieves package aliases from your <code>sfdx-project.json</code> to identify available packages.</li> <li>Automated Promotion Logic: If <code>--auto</code> is used, it executes <code>sf package version list --released</code> to get a list of already released packages and then filters the available package aliases to find those that are not yet released.</li> <li>Interactive Prompts: If not in auto mode, it uses the <code>prompts</code> library to allow the user to select a package version to promote.</li> <li>Salesforce CLI Integration: It constructs and executes the <code>sf package version promote</code> command, passing the package version ID.</li> <li><code>execSfdxJson</code>: This utility is used to execute the Salesforce CLI command and capture its JSON output.</li> <li>Error Handling: It handles cases where a package version might already be promoted or if other errors occur during the promotion process.</li> </ul>"},{"location":"hardis/package/version/promote/#parameters","title":"Parameters","text":"Name Type Description Default Required Options auto-f boolean Auto-detect which versions of which packages need to be promoted debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/package/version/promote/#examples","title":"Examples","text":"<pre><code>$ sf hardis:package:version:promote\n</code></pre> <pre><code>$ sf hardis:package:version:promote --auto\n</code></pre>"},{"location":"hardis/packagexml/append/","title":"append","text":""},{"location":"hardis/packagexml/append/#hardispackagexmlappend","title":"hardis:packagexml:append","text":""},{"location":"hardis/packagexml/append/#description","title":"Description","text":""},{"location":"hardis/packagexml/append/#command-behavior","title":"Command Behavior","text":"<p>Appends the content of one or more Salesforce <code>package.xml</code> files into a single target <code>package.xml</code> file.</p> <p>This command is useful for consolidating metadata definitions from various sources into a single manifest. For instance, you might have separate <code>package.xml</code> files for different features or metadata types, and this command allows you to combine them into one comprehensive file for deployment or retrieval.</p> <p>Key functionalities:</p> <ul> <li>Multiple Input Files: Takes a comma-separated list of <code>package.xml</code> file paths as input.</li> <li>Single Output File: Merges the content of all input files into a specified output <code>package.xml</code> file.</li> <li>Metadata Consolidation: Combines the <code>&lt;types&gt;</code> and <code>&lt;members&gt;</code> elements from all input files, ensuring that all unique metadata components are included in the resulting file.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Parsing: It reads and parses the XML content of each input <code>package.xml</code> file.</li> <li>Content Merging: It iterates through the parsed XML structures, merging the <code>types</code> and <code>members</code> arrays. If a metadata type exists in multiple input files, its members are combined (duplicates are typically handled by the underlying XML utility).</li> <li>XML Building: After consolidating the metadata, it rebuilds the XML structure for the output <code>package.xml</code> file.</li> <li>File Writing: The newly constructed XML content is then written to the specified output file.</li> <li><code>appendPackageXmlFilesContent</code> Utility: The core logic for this operation is encapsulated within the <code>appendPackageXmlFilesContent</code> utility function, which handles the parsing, merging, and writing of the <code>package.xml</code> files.</li> </ul>"},{"location":"hardis/packagexml/append/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug boolean debug flags-dir option undefined json boolean Format output as json. outputfile-f option package.xml output file packagexmls-p option package.xml files path (separated by commas) websocket option websocket"},{"location":"hardis/packagexml/append/#examples","title":"Examples","text":"<pre><code>$ sf hardis packagexml append -p package1.xml,package2.xml -o package3.xml\n</code></pre>"},{"location":"hardis/packagexml/remove/","title":"remove","text":""},{"location":"hardis/packagexml/remove/#hardispackagexmlremove","title":"hardis:packagexml:remove","text":""},{"location":"hardis/packagexml/remove/#description","title":"Description","text":""},{"location":"hardis/packagexml/remove/#command-behavior","title":"Command Behavior","text":"<p>Removes metadata components from a <code>package.xml</code> file that are also present in another <code>package.xml</code> file (e.g., a <code>destructiveChanges.xml</code>).</p> <p>This command is useful for refining your <code>package.xml</code> manifests by excluding components that are being deleted or are otherwise irrelevant for a specific deployment or retrieval. For example, you can use it to create a <code>package.xml</code> that only contains additions and modifications, by removing items listed in a <code>destructiveChanges.xml</code>.</p> <p>Key functionalities:</p> <ul> <li>Source <code>package.xml</code>: The main <code>package.xml</code> file from which components will be removed (specified by <code>--packagexml</code>). Defaults to <code>package.xml</code>.</li> <li>Filter <code>package.xml</code>: The <code>package.xml</code> file containing the components to be removed from the source (specified by <code>--removepackagexml</code>). Defaults to <code>destructiveChanges.xml</code>.</li> <li>Output File: The path to the new <code>package.xml</code> file that will contain the filtered content (specified by <code>--outputfile</code>).</li> <li>Removed Only Output: The <code>--removedonly</code> flag allows you to generate a <code>package.xml</code> that contains only the items that were removed from the source <code>package.xml</code>.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Parsing: It reads and parses the XML content of both the source <code>package.xml</code> and the filter <code>package.xml</code>.</li> <li>Content Comparison and Filtering: It compares the metadata types and members defined in both files. Components found in the filter <code>package.xml</code> are excluded from the output.</li> <li>XML Building: After filtering, it rebuilds the XML structure for the new <code>package.xml</code> file.</li> <li>File Writing: The newly constructed XML content is then written to the specified output file.</li> <li><code>removePackageXmlFilesContent</code> Utility: The core logic for this operation is encapsulated within the <code>removePackageXmlFilesContent</code> utility function, which handles the parsing, filtering, and writing of the <code>package.xml</code> files.</li> </ul>"},{"location":"hardis/packagexml/remove/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug boolean debug flags-dir option undefined json boolean Format output as json. outputfile-f option package.xml output file packagexml-p option package.xml file to reduce removedonly-z boolean Use this flag to generate a package.xml with only removed items removepackagexml-r option package.xml file to use to filter input package.xml websocket option websocket"},{"location":"hardis/packagexml/remove/#examples","title":"Examples","text":"<pre><code>$ sf hardis packagexml:remove -p package.xml -r destructiveChanges.xml -o my-reduced-package.xml\n</code></pre>"},{"location":"hardis/project/create/","title":"create","text":""},{"location":"hardis/project/create/#hardisprojectcreate","title":"hardis:project:create","text":""},{"location":"hardis/project/create/#description","title":"Description","text":"<p>Create a new SFDX Project</p>"},{"location":"hardis/project/create/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/create/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:create\n</code></pre>"},{"location":"hardis/project/lint/","title":"lint","text":""},{"location":"hardis/project/lint/#hardisprojectlint","title":"hardis:project:lint","text":""},{"location":"hardis/project/lint/#description","title":"Description","text":""},{"location":"hardis/project/lint/#command-behavior","title":"Command Behavior","text":"<p>Applies syntactic analysis (linting) to your repository sources using Mega-Linter, ensuring code quality and adherence to coding standards.</p> <p>This command integrates Mega-Linter, a comprehensive linter orchestrator, into your Salesforce DX project. It helps identify and fix code style violations, potential bugs, and other issues across various file types relevant to Salesforce development.</p> <p>Key functionalities:</p> <ul> <li>Automated Linting: Runs a suite of linters configured for Salesforce projects.</li> <li>Fixing Issues (<code>--fix</code> flag): Automatically attempts to fix detected linting issues, saving manual effort.</li> <li>Configuration Management: If <code>.mega-linter.yml</code> is not found, it guides you through the initial setup of Mega-Linter, prompting for the Salesforce flavor.</li> <li>CI/CD Integration: Designed to be used in CI/CD pipelines to enforce code quality gates.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Mega-Linter Integration: It leverages the <code>mega-linter-runner</code> library to execute Mega-Linter.</li> <li>Configuration Check: Before running, it checks for the presence of <code>.mega-linter.yml</code>. If not found and not in a CI environment, it initiates an interactive setup process using <code>MegaLinterRunner().run({ install: true })</code>.</li> <li>Linter Execution: It calls <code>MegaLinterRunner().run(megaLinterOptions)</code> with the <code>salesforce</code> flavor and the <code>fix</code> flag (if provided).</li> <li>Exit Code Handling: The <code>process.exitCode</code> is set based on the Mega-Linter's exit status, allowing CI/CD pipelines to react to linting failures.</li> <li>User Feedback: Provides clear messages about the success or failure of the linting process.</li> </ul>"},{"location":"hardis/project/lint/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) fix-f boolean Apply linters fixes flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/lint/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:lint\n</code></pre> <pre><code>$ sf hardis:project:lint --fix\n</code></pre>"},{"location":"hardis/project/audit/apiversion/","title":"apiversion","text":""},{"location":"hardis/project/audit/apiversion/#hardisprojectauditapiversion","title":"hardis:project:audit:apiversion","text":""},{"location":"hardis/project/audit/apiversion/#description","title":"Description","text":"<p>This command identifies metadata with an apiVersion lower than the value specified in the --minimumapiversion parameter.</p> <p>It can also update the apiVersion to a specific value:   - When --fix parameter is provided (updates to minimumapiversion)   - When --newapiversion is specified (updates to that version)</p> <p>Example to handle ApexClass / Trigger &amp; ApexPage mandatory version upgrade :</p> <p><code>sf hardis:project:audit:apiversion --metadatatype ApexClass,ApexTrigger,ApexPage --minimumapiversion 45 --newapiversion 50</code></p>"},{"location":"hardis/project/audit/apiversion/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) failiferror-f boolean Fails (exit code 1) if an error is found fix boolean Automatically update API versions in files that are below the minimum version threshold to match the minimum version flags-dir option undefined json boolean Format output as json. metadatatype option Metadata Types to fix. Comma separated. Supported Metadata types: ApexClass, ApexTrigger, ApexPage minimumapiversion-m option Minimum allowed API version 20 newapiversion-n option Define an API version value to apply when updating files skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/audit/apiversion/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:audit:apiversion\n</code></pre> <pre><code>$ sf hardis:project:audit:apiversion --metadatatype ApexClass,ApexTrigger,ApexPage --minimumapiversion 45\n</code></pre> <pre><code>$ sf hardis:project:audit:apiversion --metadatatype ApexClass,ApexTrigger,ApexPage --minimumapiversion 45 --fix\n</code></pre> <pre><code>$ sf hardis:project:audit:apiversion --metadatatype ApexClass,ApexTrigger,ApexPage --minimumapiversion 45 --newapiversion 50\n</code></pre>"},{"location":"hardis/project/audit/callincallout/","title":"callincallout","text":""},{"location":"hardis/project/audit/callincallout/#hardisprojectauditcallincallout","title":"hardis:project:audit:callincallout","text":""},{"location":"hardis/project/audit/callincallout/#description","title":"Description","text":""},{"location":"hardis/project/audit/callincallout/#command-behavior","title":"Command Behavior","text":"<p>Audits Apex classes for inbound (Call-In) and outbound (Call-Out) API calls, providing insights into integration points.</p> <p>This command helps developers and architects understand the integration landscape of their Salesforce project by identifying where Apex code interacts with external systems or exposes functionality for external consumption. It's useful for security reviews, refactoring efforts, and documenting system integrations.</p> <p>Key functionalities:</p> <ul> <li>Inbound Call Detection: Identifies Apex methods exposed as web services (<code>webservice static</code>) or REST resources (<code>@RestResource</code>).</li> <li>Outbound Call Detection: Detects HTTP callouts (<code>new HttpRequest</code>).</li> <li>Detailed Information: Extracts relevant details for each detected call, such as endpoint URLs for outbound calls or resource names for inbound calls.</li> <li>Test Class Exclusion: Automatically skips test classes (<code>@isTest</code>) to focus on production code.</li> <li>CSV Report Generation: Generates a CSV report summarizing all detected call-ins and call-outs, including their type, subtype (protocol), file name, namespace, and extracted details.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: Uses <code>glob</code> to find all Apex class (<code>.cls</code>) and trigger (<code>.trigger</code>) files within the project.</li> <li>Content Analysis: Reads the content of each Apex file and uses regular expressions to identify patterns indicative of inbound or outbound calls.</li> <li>Pattern Matching: Defines a set of <code>catchers</code>, each with a <code>type</code> (INBOUND/OUTBOUND), <code>subType</code> (SOAP/REST/HTTP), and <code>regex</code> to match specific API call patterns. It also includes <code>detail</code> regexes to extract additional information.</li> <li><code>catchMatches</code> Utility: This utility function is used to apply the defined <code>catchers</code> to each Apex file and extract all matching occurrences.</li> <li>Data Structuring: Organizes the extracted information into a structured format, including the file name, namespace, and detailed matches.</li> <li>Reporting: Uses <code>generateReports</code> to create a CSV report and display a table in the console, summarizing the audit findings.</li> <li>Filtering: Filters out files that start with 'hidden' or contain <code>@isTest</code> to focus on relevant code.</li> </ul>"},{"location":"hardis/project/audit/callincallout/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/audit/callincallout/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:audit:callouts\n</code></pre>"},{"location":"hardis/project/audit/duplicatefiles/","title":"duplicatefiles","text":""},{"location":"hardis/project/audit/duplicatefiles/#hardisprojectauditduplicatefiles","title":"hardis:project:audit:duplicatefiles","text":""},{"location":"hardis/project/audit/duplicatefiles/#description","title":"Description","text":""},{"location":"hardis/project/audit/duplicatefiles/#command-behavior","title":"Command Behavior","text":"<p>Identifies and reports on duplicate file names within your Salesforce DX project folder.</p> <p>This command helps detect instances where files with the same name exist in different directories within your SFDX project. While some duplicates are expected (e.g., metadata files for different components of the same object), others can be a result of past Salesforce CLI bugs or improper source control practices, leading to confusion and potential deployment issues.</p> <p>Key functionalities:</p> <ul> <li>File Scan: Recursively scans a specified root path (defaults to the current working directory) for all files.</li> <li>Duplicate Detection: Identifies files that share the same name but reside in different locations.</li> <li>Intelligent Filtering: Accounts for known patterns where duplicate file names are legitimate (e.g., <code>field-meta.xml</code>, <code>listView-meta.xml</code>, <code>recordType-meta.xml</code>, <code>webLink-meta.xml</code> files within object subdirectories).</li> <li>Reporting: Outputs a JSON object detailing the detected duplicates, including the file name and the full paths of its occurrences.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File System Traversal: Uses <code>fs-readdir-recursive</code> to list all files within the specified directory, excluding <code>node_modules</code>.</li> <li>Duplicate Logic: Iterates through the list of all files and compares their base names. If two files have the same base name but different full paths, they are considered potential duplicates.</li> <li>Exclusion Logic: The <code>checkDoublingAllowed</code> function contains regular expressions to identify specific file path patterns where duplicate names are acceptable (e.g., <code>objects/Account/fields/MyField__c.field-meta.xml</code> and <code>objects/Contact/fields/MyField__c.field-meta.xml</code>). This prevents false positives.</li> <li>Data Structuring: Organizes the results into a JavaScript object where keys are duplicate file names and values are arrays of their full paths.</li> </ul>"},{"location":"hardis/project/audit/duplicatefiles/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. path-p option Root path to check /home/runner/work/sfdx-hardis/sfdx-hardis skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/audit/duplicatefiles/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:audit:duplicatefiles\n</code></pre>"},{"location":"hardis/project/audit/remotesites/","title":"remotesites","text":""},{"location":"hardis/project/audit/remotesites/#hardisprojectauditremotesites","title":"hardis:project:audit:remotesites","text":""},{"location":"hardis/project/audit/remotesites/#description","title":"Description","text":""},{"location":"hardis/project/audit/remotesites/#command-behavior","title":"Command Behavior","text":"<p>Audits Salesforce Remote Site Settings in your project, providing a comprehensive overview of external endpoints accessed by your Salesforce org.</p> <p>This command is crucial for security reviews, compliance checks, and understanding the external integrations of your Salesforce environment. It helps identify all configured remote sites, their URLs, activity status, and associated protocols.</p> <p>Key functionalities:</p> <ul> <li>Remote Site Discovery: Scans your project for RemoteSiteSetting metadata files (.remoteSite-meta.xml or .remoteSite).</li> <li>URL Extraction: Extracts the URL, active status, and description for each remote site.</li> <li>Protocol and Domain Identification: Determines the protocol (HTTP/HTTPS) and extracts the domain from each URL, providing a clearer picture of the external systems being accessed.</li> <li>Reporting: Generates a CSV report summarizing all detected remote sites, including their protocol, domain, name, URL, active status, and description.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: Uses <code>glob</code> to find all RemoteSiteSetting metadata files within the project.</li> <li>Content Analysis: Reads the content of each XML file and uses regular expressions (/(.?)&lt;\\/url&gt;/gim, /(.?)&lt;\\/isActive&gt;/gim, /(.*?)&lt;\\/description&gt;/gim) to extract relevant details.</li> <li><code>catchMatches</code> Utility: This utility function is used to apply the defined regular expressions to each file and extract all matching occurrences.</li> <li>URL Parsing: Uses Node.js's <code>url</code> module to parse the extracted URLs and <code>psl</code> (Public Suffix List) to extract the domain name from the hostname.</li> <li>Data Structuring: Organizes the extracted information into a structured format, including the remote site's name, file name, namespace, URL, active status, description, protocol, and domain.</li> <li>Reporting: Uses <code>generateReports</code> to create a CSV report and display a table in the console, summarizing the audit findings.</li> </ul>"},{"location":"hardis/project/audit/remotesites/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/audit/remotesites/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:audit:remotesites\n</code></pre>"},{"location":"hardis/project/clean/emptyitems/","title":"emptyitems","text":""},{"location":"hardis/project/clean/emptyitems/#hardisprojectcleanemptyitems","title":"hardis:project:clean:emptyitems","text":""},{"location":"hardis/project/clean/emptyitems/#description","title":"Description","text":""},{"location":"hardis/project/clean/emptyitems/#command-behavior","title":"Command Behavior","text":"<p>Removes empty or irrelevant metadata items from your Salesforce DX project sources.</p> <p>This command helps maintain a clean and efficient Salesforce codebase by deleting metadata files that are essentially empty or contain no meaningful configuration. These files can sometimes be generated during retrieval processes or remain after refactoring, contributing to unnecessary clutter in your project.</p> <p>Key functionalities:</p> <ul> <li>Targeted Cleaning: Specifically targets and removes empty instances of:<ul> <li>Global Value Set Translations (<code>.globalValueSetTranslation-meta.xml</code>)</li> <li>Standard Value Sets (<code>.standardValueSet-meta.xml</code>)</li> <li>Sharing Rules (<code>.sharingRules-meta.xml</code>)</li> </ul> </li> <li>Content-Based Deletion: It checks the XML content of these files for the presence of specific tags (e.g., <code>valueTranslation</code> for Global Value Set Translations) to determine if they are truly empty or lack relevant data.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: Uses <code>glob</code> to find files matching predefined patterns for Global Value Set Translations, Standard Value Sets, and Sharing Rules within the specified root folder (defaults to <code>force-app</code>).</li> <li>XML Parsing: For each matching file, it reads and parses the XML content using <code>parseXmlFile</code>.</li> <li>Content Validation: It then checks the parsed XML object for the existence of specific nested properties (e.g., <code>xmlContent.GlobalValueSetTranslation.valueTranslation</code>). If these properties are missing or empty, the file is considered empty.</li> <li>File Deletion: If a file is determined to be empty, it is removed from the file system using <code>fs.remove</code>.</li> <li>Logging: Provides clear messages about which files are being removed and a summary of the total number of items cleaned.</li> </ul>"},{"location":"hardis/project/clean/emptyitems/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined folder-f option Root folder force-app json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/emptyitems/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:emptyitems\n</code></pre>"},{"location":"hardis/project/clean/filter-xml-content/","title":"filter-xml-content","text":""},{"location":"hardis/project/clean/filter-xml-content/#hardisprojectcleanfilter-xml-content","title":"hardis:project:clean:filter-xml-content","text":""},{"location":"hardis/project/clean/filter-xml-content/#description","title":"Description","text":""},{"location":"hardis/project/clean/filter-xml-content/#command-behavior","title":"Command Behavior","text":"<p>Filters the content of Salesforce metadata XML files to remove specific elements, enabling more granular deployments.</p> <p>This command addresses a common challenge in Salesforce development: deploying only a subset of metadata from an XML file when the target org might not support all elements or when certain elements are not desired. It allows you to define rules in a JSON configuration file to remove unwanted XML nodes.</p> <p>Key functionalities:</p> <ul> <li>Configurable Filtering: Uses a JSON configuration file (e.g., <code>filter-config.json</code>) to define which XML elements to remove. This configuration specifies the XML tags to target and the values within those tags that should trigger removal.</li> <li>Targeted File Processing: Processes XML files within a specified input folder (defaults to current directory) and writes the filtered content to an output folder.</li> <li>Example Use Cases: Useful for scenarios like:<ul> <li>Removing references to features not enabled in the target org.</li> <li>Stripping out specific profile permissions or field-level security settings.</li> <li>Cleaning up metadata that is not relevant to a particular deployment.</li> </ul> </li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Configuration Loading: Reads the <code>filter-config.json</code> file, which contains an array of <code>filters</code>. Each filter defines a <code>name</code>, <code>description</code>, <code>folders</code> (where to apply the filter), <code>file_extensions</code>, and an <code>exclude_list</code>.</li> <li>File System Operations: Copies the input folder to an output folder (if different) to avoid modifying original files directly. It then iterates through the files in the output folder that match the specified file extensions.</li> <li>XML Parsing and Manipulation: For each matching XML file:<ul> <li>It uses <code>xml2js.Parser</code> to parse the XML content into a JavaScript object.</li> <li>It recursively traverses the JavaScript object, applying the <code>filterElement</code> function.</li> <li>The <code>filterElement</code> function checks for <code>type_tag</code> and <code>identifier_tag</code> defined in the <code>exclude_list</code>. If a match is found and the value is in the <code>excludeDef.values</code>, the element is removed from the XML structure.</li> <li>After filtering, it uses <code>writeXmlFile</code> to write the modified JavaScript object back to the XML file.</li> </ul> </li> <li>Logging: Provides detailed logs about the filtering process, including which files are being processed and which elements are being filtered.</li> <li>Summary Reporting: Tracks and reports on the files that have been updated due to filtering.</li> </ul>"},{"location":"hardis/project/clean/filter-xml-content/#parameters","title":"Parameters","text":"Name Type Description Default Required Options configfile-c option Config JSON file path debug boolean debug flags-dir option undefined inputfolder-i option Input folder (default: \".\" ) json boolean Format output as json. outputfolder-f option Output folder (default: parentFolder + _xml_content_filtered) websocket option websocket"},{"location":"hardis/project/clean/filter-xml-content/#examples","title":"Examples","text":"<pre><code>sf hardis:project:clean:filter-xml-content -i \"./mdapi_output\"\n</code></pre> <pre><code>sf hardis:project:clean:filter-xml-content -i \"retrieveUnpackaged\"\n</code></pre>"},{"location":"hardis/project/clean/flowpositions/","title":"flowpositions","text":""},{"location":"hardis/project/clean/flowpositions/#hardisprojectcleanflowpositions","title":"hardis:project:clean:flowpositions","text":""},{"location":"hardis/project/clean/flowpositions/#description","title":"Description","text":"<p>Replace all positions in Auto-Layout Flows by 0 to simplify conflicts management</p> <p>As Flows are defined as Auto-Layout, the edition in Setup UI is not impacted.</p> <p>Before:</p> <pre><code>&lt;locationX&gt;380&lt;/locationX&gt;\n&lt;locationY&gt;259&lt;/locationY&gt;\n</code></pre> <p>After:</p> <pre><code>&lt;locationX&gt;0&lt;/locationX&gt;\n&lt;locationY&gt;0&lt;/locationY&gt;\n</code></pre> <p>Can be automated at each hardis:work:save if flowPositions is added in .sfdx-hardis.yml autoCleanTypes property  </p> <p>Example in config/.sfdx-hardis.yml:</p> <pre><code>autoCleanTypes:\n  - destructivechanges\n  - flowPositions\n</code></pre>"},{"location":"hardis/project/clean/flowpositions/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined folder-f option Root folder force-app json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/flowpositions/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:flowpositions\n</code></pre>"},{"location":"hardis/project/clean/hiddenitems/","title":"hiddenitems","text":""},{"location":"hardis/project/clean/hiddenitems/#hardisprojectcleanhiddenitems","title":"hardis:project:clean:hiddenitems","text":""},{"location":"hardis/project/clean/hiddenitems/#description","title":"Description","text":""},{"location":"hardis/project/clean/hiddenitems/#command-behavior","title":"Command Behavior","text":"<p>Removes hidden or temporary metadata items from your Salesforce DX project sources.</p> <p>This command helps clean up your local Salesforce project by deleting files that are marked as hidden or are temporary artifacts. These files can sometimes be generated by Salesforce CLI or other tools and are not intended to be part of your version-controlled source.</p> <p>Key functionalities:</p> <ul> <li>Targeted File Scan: Scans for files with specific extensions (<code>.app</code>, <code>.cmp</code>, <code>.evt</code>, <code>.tokens</code>, <code>.html</code>, <code>.css</code>, <code>.js</code>, <code>.xml</code>) within the specified root folder (defaults to <code>force-app</code>).</li> <li>Hidden Content Detection: Identifies files whose content starts with (hidden). This is a convention used by some Salesforce tools to mark temporary or internal files.</li> <li>Component Folder Removal: If a hidden file is part of a Lightning Web Component (LWC) or Aura component folder, the entire component folder is removed to ensure a complete cleanup.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: Uses <code>glob</code> to find files matching the specified patterns within the <code>folder</code>.</li> <li>Content Reading: Reads the content of each file.</li> <li>Hidden Marker Check: Checks if the file content starts with the literal string (hidden).</li> <li>Folder or File Removal: If a file is identified as hidden:<ul> <li>If it's within an lwc or aura component folder, the entire component folder is removed using <code>fs.remove</code>.</li> <li>Otherwise, only the individual file is removed.</li> </ul> </li> <li>Logging: Provides clear messages about which items are being removed and a summary of the total number of hidden items cleaned.</li> </ul>"},{"location":"hardis/project/clean/hiddenitems/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined folder-f option Root folder force-app json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/hiddenitems/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:hiddenitems\n</code></pre>"},{"location":"hardis/project/clean/listviews/","title":"listviews","text":""},{"location":"hardis/project/clean/listviews/#hardisprojectcleanlistviews","title":"hardis:project:clean:listviews","text":""},{"location":"hardis/project/clean/listviews/#description","title":"Description","text":"<p>Replace Mine by Everything in ListView, and log the replacements in sfdx-hardis.yml</p>"},{"location":"hardis/project/clean/listviews/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined folder-f option Root folder force-app json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/listviews/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:listviews\n</code></pre>"},{"location":"hardis/project/clean/manageditems/","title":"manageditems","text":""},{"location":"hardis/project/clean/manageditems/#hardisprojectcleanmanageditems","title":"hardis:project:clean:manageditems","text":""},{"location":"hardis/project/clean/manageditems/#description","title":"Description","text":""},{"location":"hardis/project/clean/manageditems/#command-behavior","title":"Command Behavior","text":"<p>Removes unwanted managed package items from your Salesforce DX project sources.</p> <p>This command helps clean up your local Salesforce project by deleting metadata files that belong to a specific managed package namespace. This is particularly useful when you retrieve metadata from an org that contains managed packages, and you only want to keep the unmanaged or custom metadata in your local repository.</p> <p>Key functionalities:</p> <ul> <li>Namespace-Based Filtering: Requires a <code>--namespace</code> flag to specify which managed package namespace's files should be removed.</li> <li>Targeted File Deletion: Scans for files and folders that start with the specified namespace prefix (e.g., <code>yourNamespace__*</code>).</li> <li>Intelligent Folder Handling: Prevents the deletion of managed folders if they contain local custom items. This ensures that if you have custom metadata within a managed package's folder structure, only the managed components are removed, preserving your local customizations.</li> <li>Object Metadata Preservation: Specifically, it will not remove .object-meta.xml files if there are local custom items defined within that object's folder.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Namespace Validation: Ensures that a namespace is provided, throwing an <code>SfError</code> if it's missing.</li> <li>File Discovery: Uses <code>glob</code> to find all files and directories within the specified <code>folder</code> (defaults to <code>force-app</code>) that match the managed package namespace pattern (<code>**/${this.namespace}__*</code>).</li> <li>Folder Content Check: For identified managed folders, the <code>folderContainsLocalItems</code> function is called. This function uses <code>glob</code> again to check for the presence of any files within that folder that do not start with the managed package namespace, indicating local customizations.</li> <li>Conditional Deletion: Based on the <code>folderContainsLocalItems</code> check, it conditionally removes files and folders using <code>fs.remove</code>. If a managed folder contains local items, it is skipped to prevent accidental deletion of custom work.</li> <li>Logging: Provides clear messages about which managed items are being removed.</li> </ul>"},{"location":"hardis/project/clean/manageditems/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined folder-f option Root folder force-app json boolean Format output as json. namespace-n option Namespace to remove skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/manageditems/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:manageditems --namespace crta\n</code></pre>"},{"location":"hardis/project/clean/minimizeprofiles/","title":"minimizeprofiles","text":""},{"location":"hardis/project/clean/minimizeprofiles/#hardisprojectcleanminimizeprofiles","title":"hardis:project:clean:minimizeprofiles","text":""},{"location":"hardis/project/clean/minimizeprofiles/#description","title":"Description","text":""},{"location":"hardis/project/clean/minimizeprofiles/#command-behavior","title":"Command Behavior","text":"<p>Removes all profile attributes that exist on Permission Sets</p> <p>It is a bad practice to define on Profiles elements that can be defined on Permission Sets.</p> <p>Salesforce will deprecate such capability in Spring 26.</p> <p>Don't wait for that, and use minimizeProfiles cleaning to automatically remove from Profiles any permission that exists on a Permission Set!</p> <p>The following XML tags are removed automatically:</p> <ul> <li>classAccesses</li> <li>customMetadataTypeAccesses</li> <li>externalDataSourceAccesses</li> <li>fieldPermissions</li> <li>objectPermissions</li> <li>pageAccesses</li> <li>userPermissions (except on Admin Profile)</li> </ul> <p>You can override this list by defining a property <code>minimizeProfilesNodesToRemove</code> in your <code>.sfdx-hardis.yml</code> config file.</p> <p>You can also skip profiles using property <code>skipMinimizeProfiles</code>.</p> <p>Example:</p> <pre><code>skipMinimizeProfiles:\n  - MyClient Customer Community Login User\n  - MyClientPortail Profile\n</code></pre>"},{"location":"hardis/project/clean/minimizeprofiles/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined folder-f option Root folder force-app json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/minimizeprofiles/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:minimizeprofiles\n</code></pre>"},{"location":"hardis/project/clean/orgmissingitems/","title":"orgmissingitems","text":""},{"location":"hardis/project/clean/orgmissingitems/#hardisprojectcleanorgmissingitems","title":"hardis:project:clean:orgmissingitems","text":""},{"location":"hardis/project/clean/orgmissingitems/#description","title":"Description","text":""},{"location":"hardis/project/clean/orgmissingitems/#command-behavior","title":"Command Behavior","text":"<p>Cleans Salesforce DX project sources by removing metadata components that are not present in a target Salesforce org or the local <code>package.xml</code> file.</p> <p>This command helps maintain a lean and accurate codebase by identifying and removing metadata that is either obsolete in the target org or not explicitly included in your project's <code>package.xml</code>. This is particularly useful for:</p> <ul> <li>Reducing Deployment Size: Eliminating unnecessary metadata reduces the size of deployments, leading to faster deployments and fewer conflicts.</li> <li>Ensuring Consistency: Synchronizing your local codebase with the actual state of a Salesforce org.</li> <li>Cleaning Up Orphaned Metadata: Removing components that might have been deleted from the org but still exist in your local project.</li> </ul> <p>Key features:</p> <ul> <li>Target Org Integration: Connects to a specified Salesforce org (or prompts for one) to retrieve its metadata manifest.</li> <li><code>package.xml</code> Comparison: Compares your local project's metadata with the target org's metadata and your local <code>package.xml</code> to identify missing items.</li> <li>Report Type Cleaning: Specifically targets and cleans <code>reportType-meta.xml</code> files by removing references to fields or objects that are not present in the target org or your <code>package.xml</code>.</li> </ul> Technical explanations <p>The command's technical implementation involves several steps:</p> <ul> <li>Org Manifest Generation: If not provided, it generates a full <code>package.xml</code> from the target Salesforce org using <code>buildOrgManifest</code>.</li> <li>XML Parsing and Merging: It parses the generated org manifest and merges it with the local <code>package.xml</code> and <code>destructiveChanges.xml</code> files to create a comprehensive list of existing and deleted metadata.</li> <li>Metadata Analysis: It iterates through specific metadata types (currently <code>reportType-meta.xml</code> files) within the configured source folder.</li> <li>Field and Object Validation: For each <code>reportType-meta.xml</code> file, it examines the columns and filters out references to custom fields or objects that are not found in the merged <code>package.xml</code> content or are marked for destruction.</li> <li>XML Modification: If changes are detected, it updates the <code>reportType-meta.xml</code> file by writing the modified XML content back to the file using <code>writeXmlFile</code>.</li> <li>File System Operations: It uses <code>fs-extra</code> for file system operations and <code>glob</code> for pattern matching to find relevant metadata files.</li> <li>SOQL Queries: The <code>buildOrgManifest</code> utility (used internally) performs SOQL queries to retrieve metadata information from the Salesforce org.</li> </ul>"},{"location":"hardis/project/clean/orgmissingitems/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined folder-f option Root folder force-app json boolean Format output as json. packagexmlfull-p option Path to packagexml used for cleaning. Must contain also standard CustomObject and CustomField elements. If not provided, it will be generated from a remote org packagexmltargetorg-t option Target org username or alias to build package.xml (SF CLI must be authenticated). If not provided, will be prompted to the user. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/orgmissingitems/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:orgmissingitems\n</code></pre>"},{"location":"hardis/project/clean/references/","title":"references","text":""},{"location":"hardis/project/clean/references/#hardisprojectcleanreferences","title":"hardis:project:clean:references","text":""},{"location":"hardis/project/clean/references/#description","title":"Description","text":""},{"location":"hardis/project/clean/references/#command-behavior","title":"Command Behavior","text":"<p>Removes unwanted references and cleans up metadata within your Salesforce DX project sources.</p> <p>This command provides a powerful way to maintain a clean and efficient Salesforce codebase by eliminating unnecessary or problematic metadata. It supports various cleaning types, from removing hardcoded user references in dashboards to minimizing profile attributes.</p> <p>Key functionalities include:</p> <ul> <li>Configurable Cleaning Types: You can specify a particular cleaning type (e.g., </li> <li>JSON/XML Configuration: Cleaning operations can be driven by a JSON configuration file or a </li> <li>Interactive Selection: If no cleaning type is specified, the command interactively prompts you to select which references to clean.</li> <li>Persistent Configuration: You can choose to save your cleaning selections in your project's configuration (<code>.sfdx-hardis.yml</code>) so they are automatically applied during future Work Save operations.</li> <li>File Deletion: Beyond just cleaning XML content, it can also delete related files (e.g., custom field files and their translations when a custom field is marked for deletion).</li> </ul> Technical explanations <p>The command's technical implementation involves several steps:</p> <ul> <li>Configuration Loading: It reads the project's configuration to determine default cleaning types and user preferences.</li> <li>Cleaning Type Processing: For each selected cleaning type, it either executes a dedicated sub-command (e.g., </li> <li>XML Filtering: For template-based cleanings, it constructs a temporary JSON configuration file based on predefined templates or user-provided </li> <li>Package.xml Cleanup: It iterates through </li> <li>Object Property Removal: The </li> </ul>"},{"location":"hardis/project/clean/references/#parameters","title":"Parameters","text":"Name Type Description Default Required Options config-c option Path to a JSON config file or a destructiveChanges.xml file debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required type-t option Cleaning type allcaseentitlementdashboardsdatadotcomdestructivechangeslocalfieldsproductrequestentitlementflowPositionssensitiveMetadatasminimizeProfiles websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/references/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:references\n</code></pre> <pre><code>$ sf hardis:project:clean:references --type all\n</code></pre> <pre><code>$ sf hardis:project:clean:references --config ./cleaning/myconfig.json\n</code></pre> <pre><code>$ sf hardis:project:clean:references --config ./somefolder/myDestructivePackage.xml\n</code></pre>"},{"location":"hardis/project/clean/retrievefolders/","title":"retrievefolders","text":""},{"location":"hardis/project/clean/retrievefolders/#hardisprojectcleanretrievefolders","title":"hardis:project:clean:retrievefolders","text":""},{"location":"hardis/project/clean/retrievefolders/#description","title":"Description","text":""},{"location":"hardis/project/clean/retrievefolders/#command-behavior","title":"Command Behavior","text":"<p>Retrieves specific folders of Dashboards, Documents, Email Templates, and Reports from a Salesforce org into your DX project sources.</p> <p>This command is designed to help developers and administrators synchronize their local Salesforce DX project with the latest versions of these folder-based metadata types. It's particularly useful for:</p> <ul> <li>Selective Retrieval: Instead of retrieving all dashboards or reports, it allows you to retrieve specific folders, which can be more efficient for targeted development or backup.</li> <li>Maintaining Folder Structure: Ensures that the folder structure of these metadata types is preserved in your local project.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Folder Iteration: It defines a list of folder-based metadata types (<code>dashboards</code>, <code>documents</code>, <code>email</code>, <code>reports</code>).</li> <li>File System Check: For each type, it checks if the corresponding folder exists in <code>force-app/main/default/</code>.</li> <li>Recursive Retrieval: It iterates through subfolders within these main folders. For each subfolder, it constructs and executes a <code>sf project retrieve start</code> command.</li> <li>Salesforce CLI Integration: It uses <code>sf project retrieve start -m &lt;MetadataType&gt;:&lt;FolderName&gt;</code> to retrieve the content of individual folders. This ensures that only the specified folder and its contents are retrieved.</li> <li>Error Handling: It includes basic error handling for the <code>execCommand</code> calls.</li> </ul>"},{"location":"hardis/project/clean/retrievefolders/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/retrievefolders/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:retrievefolders\n</code></pre>"},{"location":"hardis/project/clean/sensitive-metadatas/","title":"sensitive-metadatas","text":""},{"location":"hardis/project/clean/sensitive-metadatas/#hardisprojectcleansensitive-metadatas","title":"hardis:project:clean:sensitive-metadatas","text":""},{"location":"hardis/project/clean/sensitive-metadatas/#description","title":"Description","text":"<p>Sensitive data like credentials and certificates are not supposed to be stored in Git, to avoid security breaches.</p> <p>This command detects the related metadata and replaces their sensitive content by \"HIDDEN_BY_SFDX_HARDIS\"</p> <p>Can be automated at each hardis:work:save if sensitiveMetadatas is added in .sfdx-hardis.yml autoCleanTypes property  </p> <p>Example in config/.sfdx-hardis.yml:</p> <pre><code>autoCleanTypes:\n  - destructivechanges\n  - sensitiveMetadatas\n</code></pre>"},{"location":"hardis/project/clean/sensitive-metadatas/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined folder-f option Root folder force-app json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/sensitive-metadatas/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:sensitive-metadatas\n</code></pre>"},{"location":"hardis/project/clean/standarditems/","title":"standarditems","text":""},{"location":"hardis/project/clean/standarditems/#hardisprojectcleanstandarditems","title":"hardis:project:clean:standarditems","text":""},{"location":"hardis/project/clean/standarditems/#description","title":"Description","text":""},{"location":"hardis/project/clean/standarditems/#command-behavior","title":"Command Behavior","text":"<p>Removes unwanted standard Salesforce items from your Salesforce DX project sources.</p> <p>This command helps maintain a clean and focused Salesforce codebase by deleting metadata files that represent standard Salesforce objects or fields, especially when they are retrieved but not intended to be managed in your version control system. This is useful for reducing repository size and avoiding conflicts with standard Salesforce metadata.</p> <p>Key functionalities:</p> <ul> <li>Standard Object Cleaning: Scans for standard objects (those without a <code>__c</code> suffix) within your <code>force-app/main/default/objects</code> folder.</li> <li>Conditional Folder Deletion: If a standard object folder contains no custom fields (fields with a <code>__c</code> suffix), the entire folder and its associated sharing rules (<code>.sharingRules-meta.xml</code>) are removed.</li> <li>Standard Field Deletion: If a standard object folder does contain custom fields, only the standard fields within that object are removed, preserving your custom metadata.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File System Traversal: It starts by listing the contents of the <code>force-app/main/default/objects</code> directory.</li> <li>Standard Object Identification: It iterates through each directory within <code>objects</code> and identifies standard objects by checking if their name does not contain <code>__</code> (the custom object suffix).</li> <li>Custom Field Detection: For each standard object, it uses <code>glob</code> to search for custom fields (<code>*__*.field-meta.xml</code>) within its <code>fields</code> subdirectory.</li> <li>Conditional Removal:<ul> <li>If no custom fields are found, it removes the entire object directory and any corresponding sharing rules file using <code>fs.remove</code>.</li> <li>If custom fields are found, it then uses <code>glob</code> again to find all standard fields (<code>*.field-meta.xml</code> without <code>__</code>) within the object's <code>fields</code> directory and removes only those standard field files.</li> </ul> </li> <li>Logging: Provides clear messages about which folders and files are being removed or kept.</li> </ul>"},{"location":"hardis/project/clean/standarditems/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/standarditems/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:standarditems\n</code></pre>"},{"location":"hardis/project/clean/systemdebug/","title":"systemdebug","text":""},{"location":"hardis/project/clean/systemdebug/#hardisprojectcleansystemdebug","title":"hardis:project:clean:systemdebug","text":""},{"location":"hardis/project/clean/systemdebug/#description","title":"Description","text":""},{"location":"hardis/project/clean/systemdebug/#command-behavior","title":"Command Behavior","text":"<p>Removes or comments out <code>System.debug()</code> statements from Apex classes and triggers in your Salesforce DX project.</p> <p>This command helps maintain clean and optimized Apex code by eliminating debug statements that are often left in production code. While <code>System.debug()</code> is invaluable during development, it can impact performance and expose sensitive information if left in deployed code.</p> <p>Key functionalities:</p> <ul> <li>Targeted File Scan: Scans all Apex class (.cls) and trigger (.trigger) files within the specified root folder (defaults to <code>force-app</code>).</li> <li>Conditional Action:<ul> <li>Comment Out (default): By default, it comments out <code>System.debug()</code> lines by prepending // to them.</li> <li>Delete (<code>--delete</code> flag): If the <code>--delete</code> flag is used, it completely removes the lines containing <code>System.debug()</code>.</li> </ul> </li> <li>Exclusion: Lines containing <code>NOPMD</code> are ignored, allowing developers to intentionally keep specific debug statements.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: Uses <code>glob</code> to find all Apex class and trigger files.</li> <li>Content Reading: Reads the content of each Apex file line by line.</li> <li>Pattern Matching: Checks each line for the presence of <code>System.debug</code> (case-insensitive).</li> <li>Line Modification:<ul> <li>If <code>System.debug</code> is found and the <code>--delete</code> flag is not used, it modifies the line to comment out the debug statement.</li> <li>If <code>System.debug</code> is found and the <code>--delete</code> flag is used, it removes the line entirely.</li> </ul> </li> <li>File Writing: If any changes are made to a file, the modified content is written back to the file using <code>fs.writeFile</code>.</li> <li>Logging: Provides a summary of how many files were cleaned.</li> </ul>"},{"location":"hardis/project/clean/systemdebug/#parameters","title":"Parameters","text":"Name Type Description Default Required Options delete-d boolean Delete lines with System.debug flags-dir option undefined folder-f option Root folder force-app json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/clean/systemdebug/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:systemdebug\n</code></pre>"},{"location":"hardis/project/clean/xml/","title":"xml","text":""},{"location":"hardis/project/clean/xml/#hardisprojectcleanxml","title":"hardis:project:clean:xml","text":""},{"location":"hardis/project/clean/xml/#description","title":"Description","text":"<p>Remove XML elements using Glob patterns and XPath expressions</p> <p>This can be very useful to avoid to always remove manually the same elements in the same XML file.</p> <ul> <li>globpattern can be any glob pattern allowing to identify the XML files to update, for example <code>/**/*.flexipage-meta.xml</code></li> </ul> <ul> <li>xpath can be any xpath following the format <code>//ns:PARENT-TAG-NAME//ns:TAG-NAME[contains(text(),'TAG-VALUE')]</code>. If an element is found, the whole PARENT-TAG-NAME (with its subtree) will be removed.</li> </ul> <p></p> <p>Note: If globpattern and xpath are not sent, elements defined in property cleanXmlPatterns in .sfdx-hardis.yml config file will be used</p>"},{"location":"hardis/project/clean/xml/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined folder-f option Root folder force-app globpattern-p option Glob pattern to find files to clean. Ex: /*/.flexipage-meta.xml json boolean Format output as json. namespace-n option XML Namespace to use http://soap.sforce.com/2006/04/metadata skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration xpath-x option XPath to use to detect the elements to remove. Ex: //ns:flexiPageRegions//ns:name[contains(text(),'dashboardName')]"},{"location":"hardis/project/clean/xml/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:clean:xml\n</code></pre> <pre><code>$ sf hardis:project:clean:xml --globpattern \"/**/*.flexipage-meta.xml\" --xpath \"//ns:flexiPageRegions//ns:name[contains(text(),'dashboardName')]\"\n</code></pre>"},{"location":"hardis/project/configure/auth/","title":"auth","text":""},{"location":"hardis/project/configure/auth/#hardisprojectconfigureauth","title":"hardis:project:configure:auth","text":""},{"location":"hardis/project/configure/auth/#description","title":"Description","text":""},{"location":"hardis/project/configure/auth/#command-behavior","title":"Command Behavior","text":"<p>Configures authentication between a Git branch and a target Salesforce org for CI/CD deployments.</p> <p>This command facilitates the setup of automated CI/CD pipelines, enabling seamless deployments from specific Git branches to designated Salesforce orgs. It supports both standard Salesforce orgs and Dev Hub configurations, catering to various enterprise deployment workflows.</p> <p>Key functionalities include:</p> <ul> <li>Org Selection/Login: Guides the user to select an existing Salesforce org or log in to a new one.</li> <li>Git Branch Association: Allows associating a specific Git branch with the chosen Salesforce org.</li> <li>Merge Target Definition: Enables defining target Git branches into which the configured branch can merge, ensuring controlled deployment flows.</li> <li>Salesforce Username Configuration: Prompts for the Salesforce username to be used by the CI server for deployments.</li> <li>SSL Certificate Generation: Automatically generates an SSL certificate for secure authentication.</li> </ul> Technical explanations <p>The command's implementation involves several key technical aspects:</p> <ul> <li>SF CLI Integration: Utilizes  @salesforce/sf-plugins-core  for command structure and flag parsing.</li> <li>Interactive Prompts: Employs the  prompts  library for interactive user input, guiding the configuration process.</li> <li>Git Integration: Interacts with Git to retrieve branch information using  <code>git().branch([\"--list\", \"-r\"])</code> .</li> <li>Configuration Management: Leverages internal utilities (<code>checkConfig</code>, <code>getConfig</code>, <code>setConfig</code>, <code>setInConfigFile</code>) to read from and write to project-specific configuration files (e.g., <code>.sfdx-hardis.&lt;branchName&gt;.yml</code>).</li> <li>Salesforce CLI Execution: Executes Salesforce CLI commands programmatically via <code>execSfdxJson</code> for org interactions.</li> <li>SSL Certificate Generation: Calls <code>generateSSLCertificate</code> to create necessary SSL certificates for JWT-based authentication.</li> <li>WebSocket Communication: Uses <code>WebSocketClient</code> for potential communication with external tools or processes, such as restarting the command in VS Code.</li> <li>Dependency Check: Ensures the presence of <code>openssl</code> on the system, which is required for SSL certificate generation.</li> </ul>"},{"location":"hardis/project/configure/auth/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) devhub-b boolean Configure project DevHub flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/configure/auth/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:configure:auth\n</code></pre>"},{"location":"hardis/project/convert/profilestopermsets/","title":"profilestopermsets","text":""},{"location":"hardis/project/convert/profilestopermsets/#hardisprojectconvertprofilestopermsets","title":"hardis:project:convert:profilestopermsets","text":""},{"location":"hardis/project/convert/profilestopermsets/#description","title":"Description","text":""},{"location":"hardis/project/convert/profilestopermsets/#command-behavior","title":"Command Behavior","text":"<p>Converts existing Salesforce Profiles into Permission Sets, facilitating a more granular and recommended security model.</p> <p>This command helps in migrating permissions from Profiles to Permission Sets, which is a best practice for managing user access in Salesforce. It creates a new Permission Set for each specified Profile, adopting a naming convention of <code>PS_PROFILENAME</code>.</p> <p>Key functionalities:</p> <ul> <li>Profile to Permission Set Conversion: Automatically extracts permissions from a Profile and creates a corresponding Permission Set.</li> <li>Naming Convention: New Permission Sets are named with a <code>PS_</code> prefix followed by the Profile name (e.g., <code>PS_Standard_User</code>).</li> <li>Exclusion Filter: Allows you to exclude specific Profiles from the conversion process using the <code>--except</code> flag.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>External Plugin Integration: It relies on the <code>shane-sfdx-plugins</code> (specifically the <code>sf shane:profile:convert</code> command) to perform the actual conversion.</li> <li>File System Scan: It reads the contents of the <code>force-app/main/default/profiles</code> directory to identify all available Profile metadata files.</li> <li>Command Execution: For each identified Profile (that is not excluded), it constructs and executes the <code>sf shane:profile:convert</code> command with the appropriate Profile name and desired Permission Set name.</li> <li>Error Handling: Includes basic error handling for the external command execution.</li> </ul>"},{"location":"hardis/project/convert/profilestopermsets/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) except-e option List of filters flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/convert/profilestopermsets/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:convert:profilestopermsets\n</code></pre>"},{"location":"hardis/project/deploy/notify/","title":"notify","text":""},{"location":"hardis/project/deploy/notify/#hardisprojectdeploynotify","title":"hardis:project:deploy:notify","text":""},{"location":"hardis/project/deploy/notify/#description","title":"Description","text":"<p>Post notifications related to:</p> <ul> <li>Deployment simulation (use with --check-only)</li> </ul> <ul> <li>Deployment process (to call only if your deployment is successful)</li> </ul>"},{"location":"hardis/project/deploy/notify/#integrations","title":"Integrations","text":"<p>According to the integrations you configured, notifications can contain deployment information and Flow Visual Git Diff</p> <p>- GitHub, Gitlab, Azure DevOps, Bitbucket comments on Pull Requests (including Flows Visual Git Diff)</p> <p>- Slack, Microsoft Teams, Email deployment summary after a successful deployment</p> <p>- JIRA tags and comments on tickets that just has been deployed</p> <p></p> <p></p>"},{"location":"hardis/project/deploy/notify/#flows-visual-git-diff","title":"Flows Visual Git Diff","text":"<ul> <li>Visually show you the differences on a diagram</li> </ul> <ul> <li>Display the update details without having to open any XML !</li> </ul> <p>\ud83d\udfe9 = added</p> <p>\ud83d\udfe5 = removed</p> <p>\ud83d\udfe7 = updated</p> <p></p> <p></p>"},{"location":"hardis/project/deploy/notify/#in-custom-cicd-workflow","title":"In custom CI/CD workflow","text":"<p>Example of usage in a custom CI/CD pipeline:</p> <pre><code># Disable exit-on-error temporarily\nset +e\n\n# Run the deploy command\nsf project deploy start [....]\nRET_CODE=$?\n\n# Re-enable exit-on-error\nset -e\n\n# Determine MYSTATUS based on return code\nif [ $RET_CODE -eq 0 ]; then\n    MYSTATUS=\"valid\"\nelse\n    MYSTATUS=\"invalid\"\nfi\n\n# Run the notify command with MYSTATUS\nsf hardis:project:deploy:notify --check-only --deploy-status \"$MYSTATUS\"\n</code></pre>"},{"location":"hardis/project/deploy/notify/#other-usages","title":"Other usages","text":"<p>This command is for custom SF Cli pipelines, if you are a sfdx-hardis user, it is already embedded in sf hardis:deploy:smart.</p> <p>You can also use sfdx-hardis wrapper commands of SF deployment commands</p>"},{"location":"hardis/project/deploy/notify/#parameters","title":"Parameters","text":"Name Type Description Default Required Options check-only-c boolean Use this option to send notifications from a Deployment simulation job debug-d boolean Activate debug mode (more logs) deploy-status-s option Send success, failure or unknown (default) to indicate if the deployment or deployment simulation is in success or not unknown validinvalidunknown flags-dir option undefined json boolean Format output as json. message-m option Custom message that you want to be added in notifications (string or markdown format) skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/deploy/notify/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:deploy:notify --check-only --deploy-status valid --message \"This deployment check is valid\\n\\nYahooo !!\"\n</code></pre> <pre><code>$ sf hardis:project:deploy:notify --check-only --deploy-status invalid --message \"This deployment check has failed !\\n\\Oh no !!\"\n</code></pre> <pre><code>$ sf hardis:project:deploy:notify --deploy-status valid --message \"This deployment has been processed !\\n\\nYahooo !!\"\n</code></pre>"},{"location":"hardis/project/deploy/quick/","title":"quick","text":""},{"location":"hardis/project/deploy/quick/#hardisprojectdeployquick","title":"hardis:project:deploy:quick","text":""},{"location":"hardis/project/deploy/quick/#description","title":"Description","text":"<p>sfdx-hardis wrapper for sf project deploy quick that displays tips to solve deployment errors.</p> <p>Note: Use --json argument to have better results</p> <p></p> <p>See documentation of Salesforce command</p>"},{"location":"hardis/project/deploy/quick/#deployment-pre-or-post-commands","title":"Deployment pre or post commands","text":"<p>You can define command lines to run before or after a deployment, with parameters:</p> <ul> <li>id: Unique Id for the command</li> <li>label: Human readable label for the command</li> <li>skipIfError: If defined to \"true\", the post-command won't be run if there is a deployment failure</li> <li>context: Defines the context where the command will be run. Can be all (default), check-deployment-only or process-deployment-only</li> <li>runOnlyOnceByOrg: If set to true, the command will be run only one time per org. A record of SfdxHardisTrace__c is stored to make that possible (it needs to be existing in target org)</li> </ul> <p>If the commands are not the same depending on the target org, you can define them into config/branches/.sfdx-hardis-BRANCHNAME.yml instead of root config/.sfdx-hardis.yml</p> <p>Example:</p> <pre><code>commandsPreDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='deploy.github@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n\ncommandsPostDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to desired username\n    command: sf data update record --sobject User --where \"Username='admin-yser@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n  - id: someActionToRunJustOneTime\n    label: And to run only if deployment is success\n    command: sf sfdmu:run ...\n    skipIfError: true\n    context: process-deployment-only\n    runOnlyOnceByOrg: true\n</code></pre>"},{"location":"hardis/project/deploy/quick/#parameters","title":"Parameters","text":"Name Type Description Default Required Options --job-id-i option job-id --use-most-recent-r boolean use-most-recent api-version-a option api-version async boolean async debug boolean debug flags-dir option undefined json boolean Format output as json. target-org-o option undefined tests option tests wait-w option wait 33"},{"location":"hardis/project/deploy/quick/#examples","title":"Examples","text":""},{"location":"hardis/project/deploy/simulate/","title":"simulate","text":""},{"location":"hardis/project/deploy/simulate/#hardisprojectdeploysimulate","title":"hardis:project:deploy:simulate","text":""},{"location":"hardis/project/deploy/simulate/#description","title":"Description","text":""},{"location":"hardis/project/deploy/simulate/#command-behavior","title":"Command Behavior","text":"<p>Simulates the deployment of Salesforce metadata to a target org, primarily used by the VS Code Extension for quick validation.</p> <p>This command allows developers to perform a dry run of a metadata deployment without actually committing changes to the Salesforce org. This is incredibly useful for:</p> <ul> <li>Pre-Deployment Validation: Identifying potential errors, warnings, or conflicts before a full deployment.</li> <li>Troubleshooting: Quickly testing metadata changes and debugging issues in a safe environment.</li> <li>Local Development: Validating changes to individual metadata components (e.g., a Permission Set) without needing to run a full CI/CD pipeline.</li> </ul> <p>Key functionalities:</p> <ul> <li>Source Specification: Takes a source file or directory (<code>--source-dir</code>) containing the metadata to be simulated.</li> <li>Target Org Selection: Prompts the user to select a Salesforce org for the simulation. This allows for flexible testing across different environments.</li> <li>Dry Run Execution: Executes the Salesforce CLI's <code>sf project deploy start --dry-run</code> command, which performs all validation steps but does not save any changes to the org.</li> </ul> <p>This command is primarily used by the VS Code Extension to provide immediate feedback to developers.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Interactive Org Prompt: Uses <code>promptOrgUsernameDefault</code> to allow the user to select the target Salesforce org for the deployment simulation.</li> <li>Salesforce CLI Integration: It constructs and executes the <code>sf project deploy start</code> command with the <code>--dry-run</code> and <code>--ignore-conflicts</code> flags. The <code>--source-dir</code> and <code>--target-org</code> flags are dynamically populated based on user input.</li> <li><code>wrapSfdxCoreCommand</code>: This utility is used to execute the Salesforce CLI command and capture its output.</li> <li>Connection Variables: Ensures Salesforce connection variables are set using <code>setConnectionVariables</code>.</li> </ul>"},{"location":"hardis/project/deploy/simulate/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required source-dir-f option Source file or directory to simulate the deployment target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/deploy/simulate/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:deploy:simulate --source-dir force-app/defaut/main/permissionset/PS_Admin.permissionset-meta.xml\n</code></pre>"},{"location":"hardis/project/deploy/smart/","title":"smart","text":""},{"location":"hardis/project/deploy/smart/#hardisprojectdeploysmart","title":"hardis:project:deploy:smart","text":""},{"location":"hardis/project/deploy/smart/#description","title":"Description","text":"<p>Smart deploy of SFDX sources to target org, with many useful options.</p> <p>In case of errors, tips to fix them will be included within the error messages.</p>"},{"location":"hardis/project/deploy/smart/#quick-deploy","title":"Quick Deploy","text":"<p>In case Pull Request comments are configured on the project, Quick Deploy will try to be used (equivalent to button Quick Deploy)</p> <p>If you do not want to use QuickDeploy, define variable <code>SFDX_HARDIS_QUICK_DEPLOY=false</code></p> <ul> <li>GitHub Pull Requests comments config</li> <li>Gitlab Merge requests notes config</li> <li>Azure Pull Requests comments config</li> </ul>"},{"location":"hardis/project/deploy/smart/#delta-deployments","title":"Delta deployments","text":"<p>To activate delta deployments, define property <code>useDeltaDeployment: true</code> in <code>config/.sfdx-hardis.yml</code>.</p> <p>This will activate delta deployments only between minor and major branches (major to major remains full deployment mode)</p> <p>If you want to force the delta deployment into major orgs (ex: preprod to prod), this is not recommended but you can use env variable ALWAYS_ENABLE_DELTA_DEPLOYMENT=true</p>"},{"location":"hardis/project/deploy/smart/#smart-deployments-tests","title":"Smart Deployments Tests","text":"<p>Not all metadata updates can break test classes, use Smart Deployment Tests to skip running test classes if ALL the following conditions are met:</p> <ul> <li>Delta deployment is activated and applicable to the source and target branches</li> <li>Delta deployed metadatas are all matching the list of NOT_IMPACTING_METADATA_TYPES (see below)</li> <li>Target org is not a production org</li> </ul> <p>Activate Smart Deployment tests with:</p> <ul> <li>env variable <code>USE_SMART_DEPLOYMENT_TESTS=true</code></li> <li>.sfdx-hardis.yml config property <code>useSmartDeploymentTests: true</code></li> </ul> <p>Defaut list for NOT_IMPACTING_METADATA_TYPES (can be overridden with comma-separated list on env var NOT_IMPACTING_METADATA_TYPES)</p> <ul> <li>Audience</li> <li>AuraDefinitionBundle</li> <li>Bot</li> <li>BotVersion</li> <li>ContentAsset</li> <li>CustomObjectTranslation</li> <li>CustomSite</li> <li>CustomTab</li> <li>Dashboard</li> <li>ExperienceBundle</li> <li>Flexipage</li> <li>GlobalValueSetTranslation</li> <li>Layout</li> <li>LightningComponentBundle</li> <li>NavigationMenu</li> <li>ReportType</li> <li>Report</li> <li>SiteDotCom</li> <li>StandardValueSetTranslation</li> <li>StaticResource</li> <li>Translations</li> </ul> <p>Note: if you want to disable Smart test classes for a PR, add nosmart in the text of the latest commit.</p>"},{"location":"hardis/project/deploy/smart/#dynamic-deployment-items-overwrite-management","title":"Dynamic deployment items / Overwrite management","text":"<p>If necessary,you can define the following files (that supports wildcards *):</p> <ul> <li><code>manifest/package-no-overwrite.xml</code>: Every element defined in this file will be deployed only if it is not existing yet in the target org (can be useful with ListView for example, if the client wants to update them directly in production org).<ul> <li>Can be overridden for a branch using .sfdx-hardis.yml property packageNoOverwritePath or environment variable PACKAGE_NO_OVERWRITE_PATH (for example, define: <code>packageNoOverwritePath: manifest/package-no-overwrite-main.xml</code> in config file <code>config/.sfdx-hardis.main.yml</code>)</li> </ul> </li> <li><code>manifest/packageXmlOnChange.xml</code>: Every element defined in this file will not be deployed if it already has a similar definition in target org (can be useful for SharingRules for example)</li> </ul> <p>See Overwrite management documentation</p>"},{"location":"hardis/project/deploy/smart/#packages-installation","title":"Packages installation","text":"<p>You can define a list of package to install during deployments using property <code>installedPackages</code></p> <ul> <li>If <code>INSTALL_PACKAGES_DURING_CHECK_DEPLOY</code> is defined as <code>true</code> (or <code>installPackagesDuringCheckDeploy: true</code> in <code>.sfdx-hardis.yml</code>), packages will be installed even if the command is called with <code>--check</code> mode</li> <li>You can automatically update this property by listing all packages installed on an org using command <code>sf hardis:org:retrieve:packageconfig</code></li> </ul> <p>Example:</p> <pre><code>installedPackages:\n  - Id: 0A35r0000009EtECAU\n    SubscriberPackageId: 033i0000000LVMYAA4\n    SubscriberPackageName: Marketing Cloud\n    SubscriberPackageNamespace: et4ae5\n    SubscriberPackageVersionId: 04t6S000000l11iQAA\n    SubscriberPackageVersionName: Marketing Cloud\n    SubscriberPackageVersionNumber: 236.0.0.2\n    installOnScratchOrgs: true                  // true or false depending you want to install this package when creating a new scratch org\n    installDuringDeployments: true              // set as true to install package during a deployment using sf hardis:project:deploy:smart\n    installationkey: xxxxxxxxxxxxxxxxxxxx       // if the package has a password, write it in this property\n    - Id: 0A35r0000009F9CCAU\n    SubscriberPackageId: 033b0000000Pf2AAAS\n    SubscriberPackageName: Declarative Lookup Rollup Summaries Tool\n    SubscriberPackageNamespace: dlrs\n    SubscriberPackageVersionId: 04t5p000001BmLvAAK\n    SubscriberPackageVersionName: Release\n    SubscriberPackageVersionNumber: 2.15.0.9\n    installOnScratchOrgs: true\n    installDuringDeployments: true\n</code></pre>"},{"location":"hardis/project/deploy/smart/#deployment-pre-or-post-commands","title":"Deployment pre or post commands","text":"<p>You can define command lines to run before or after a deployment, with parameters:</p> <ul> <li>id: Unique Id for the command</li> <li>label: Human readable label for the command</li> <li>skipIfError: If defined to \"true\", the post-command won't be run if there is a deployment failure</li> <li>context: Defines the context where the command will be run. Can be all (default), check-deployment-only or process-deployment-only</li> <li>runOnlyOnceByOrg: If set to true, the command will be run only one time per org. A record of SfdxHardisTrace__c is stored to make that possible (it needs to be existing in target org)</li> </ul> <p>If the commands are not the same depending on the target org, you can define them into config/branches/.sfdx-hardis-BRANCHNAME.yml instead of root config/.sfdx-hardis.yml</p> <p>Example:</p> <pre><code>commandsPreDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='deploy.github@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n\ncommandsPostDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to desired username\n    command: sf data update record --sobject User --where \"Username='admin-yser@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n  - id: someActionToRunJustOneTime\n    label: And to run only if deployment is success\n    command: sf sfdmu:run ...\n    skipIfError: true\n    context: process-deployment-only\n    runOnlyOnceByOrg: true\n</code></pre>"},{"location":"hardis/project/deploy/smart/#pull-requests-custom-behaviors","title":"Pull Requests Custom Behaviors","text":"<p>If some words are found in the Pull Request description, special behaviors will be applied</p> Word Behavior NO_DELTA Even if delta deployments are activated, a deployment in mode full will be performed for this Pull Request PURGE_FLOW_VERSIONS After deployment, inactive and obsolete Flow Versions will be deleted (equivalent to command sf hardis:org:purge:flow)Caution: This will also purge active Flow Interviews ! DESTRUCTIVE_CHANGES_AFTER_DEPLOYMENT If a file manifest/destructiveChanges.xml is found, it will be executed in a separate step, after the deployment of the main package <p>For example, define <code>PURGE_FLOW_VERSIONS</code> and <code>DESTRUCTIVE_CHANGES_AFTER_DEPLOYMENT</code> in your Pull Request comments if you want to delete fields that are used in an active flow.</p> <p>Note: it is also possible to define these behaviors as ENV variables:</p> <ul> <li>For all deployments (example: <code>PURGE_FLOW_VERSIONS=true</code>)</li> <li>For a specific branch, by appending the target branch name (example: <code>PURGE_FLOW_VERSIONS_UAT=true</code>)</li> </ul>"},{"location":"hardis/project/deploy/smart/#deployment-plan-deprecated","title":"Deployment plan (deprecated)","text":"<p>If you need to deploy in multiple steps, you can define a property <code>deploymentPlan</code> in <code>.sfdx-hardis.yml</code>.</p> <ul> <li>If a file <code>manifest/package.xml</code> is found, it will be placed with order 0 in the deployment plan</li> </ul> <ul> <li>If a file <code>manifest/destructiveChanges.xml</code> is found, it will be executed as --postdestructivechanges</li> </ul> <ul> <li>If env var <code>SFDX_HARDIS_DEPLOY_IGNORE_SPLIT_PACKAGES</code> is defined as <code>false</code> , split of package.xml will be applied</li> </ul> <p>Example:</p> <pre><code>deploymentPlan:\n  packages:\n    - label: Deploy Flow-Workflow\n      packageXmlFile: manifest/splits/packageXmlFlowWorkflow.xml\n      order: 6\n    - label: Deploy SharingRules - Case\n      packageXmlFile: manifest/splits/packageXmlSharingRulesCase.xml\n      order: 30\n      waitAfter: 30\n</code></pre>"},{"location":"hardis/project/deploy/smart/#automated-fixes-post-deployments","title":"Automated fixes post deployments","text":""},{"location":"hardis/project/deploy/smart/#list-view-with-scope-mine","title":"List view with scope Mine","text":"<p>If you defined a property listViewsToSetToMine in your .sfdx-hardis.yml, related ListViews will be set to Mine ( see command https://sfdx-hardis.cloudity.com/hardis/org/fix/listviewmine/ )</p> <p>Example:</p> <pre><code>listViewsToSetToMine:\n  - \"Operation__c:MyCurrentOperations\"\n  - \"Operation__c:MyFinalizedOperations\"\n  - \"Opportunity:Default_Opportunity_Pipeline\"\n  - \"Opportunity:MyCurrentSubscriptions\"\n  - \"Opportunity:MySubscriptions\"\n  - \"Account:MyActivePartners\"\n</code></pre> <p>Troubleshooting: if you need to fix ListViews with mine from an alpine-linux based docker image, use this workaround in your dockerfile:</p> <pre><code># Do not use puppeteer embedded chromium\nRUN apk add --update --no-cache chromium\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=\"true\"\nENV CHROMIUM_PATH=\"/usr/bin/chromium-browser\"\nENV PUPPETEER_EXECUTABLE_PATH=\"$\\{CHROMIUM_PATH}\" // remove \\ before {\n</code></pre> <p>If you need to increase the deployment waiting time (sf project deploy start --wait arg), you can define env variable SFDX_DEPLOY_WAIT_MINUTES (default: 120)</p> <p>If you need notifications to be sent using the current Pull Request and not the one just merged (see use case), define env variable SFDX_HARDIS_DEPLOY_BEFORE_MERGE=true</p> <p>If you want to disable the calculation and display of Flow Visual Git Diff in Pull Request comments, define variable SFDX_DISABLE_FLOW_DIFF=true</p>"},{"location":"hardis/project/deploy/smart/#parameters","title":"Parameters","text":"Name Type Description Default Required Options check-c boolean Only checks the deployment, there is no impact on target org debug-d boolean Activate debug mode (more logs) delta boolean Applies sfdx-git-delta to package.xml before other deployment processes flags-dir option undefined json boolean Format output as json. packagexml-p option Path to package.xml containing what you want to deploy in target org runtests-r option If testlevel=RunSpecifiedTests, please provide a list of classes. If testlevel=RunRepositoryTests, can contain a regular expression to keep only class names matching it. If not set, will run all test classes found in the repo. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined testlevel-l option Level of tests to validate deployment. RunRepositoryTests auto-detect and run all repository test classes NoTestRunRunSpecifiedTestsRunRepositoryTestsRunRepositoryTestsExceptSeeAllDataRunLocalTestsRunAllTestsInOrg websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/deploy/smart/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:deploy:smart\n</code></pre> <pre><code>$ sf hardis:project:deploy:smart --check\n</code></pre> <pre><code>$ sf hardis:project:deploy:smart --check --testlevel RunRepositoryTests\n</code></pre> <pre><code>$ sf hardis:project:deploy:smart --check --testlevel RunRepositoryTests --runtests '^(?!FLI|MyPrefix).*'\n</code></pre> <pre><code>$ sf hardis:project:deploy:smart --check --testlevel RunRepositoryTestsExceptSeeAllData\n</code></pre> <pre><code>$ sf hardis:project:deploy:smart\n</code></pre> <pre><code>$ FORCE_TARGET_BRANCH=preprod NODE_OPTIONS=--inspect-brk sf hardis:project:deploy:smart --check --websocket localhost:2702 --skipauth --target-org nicolas.vuillamy@myclient.com.preprod\n</code></pre> <pre><code>$ SYSTEM_ACCESSTOKEN=xxxxxx SYSTEM_COLLECTIONURI=https://dev.azure.com/xxxxxxx/ SYSTEM_TEAMPROJECT=\"xxxxxxx\" BUILD_REPOSITORY_ID=xxxxx SYSTEM_PULLREQUEST_PULLREQUESTID=1418 FORCE_TARGET_BRANCH=uat NODE_OPTIONS=--inspect-brk sf hardis:project:deploy:smart --check --websocket localhost:2702 --skipauth --target-org my.salesforce@org.com\n</code></pre> <pre><code>$ CI_SFDX_HARDIS_BITBUCKET_TOKEN=xxxxxx BITBUCKET_WORKSPACE=sfdxhardis-demo BITBUCKET_REPO_SLUG=test BITBUCKET_BUILD_NUMBER=1 BITBUCKET_BRANCH=uat BITBUCKET_PR_ID=2 FORCE_TARGET_BRANCH=uat NODE_OPTIONS=--inspect-brk sf hardis:project:deploy:smart --check --websocket localhost:2702 --skipauth --target-org my-salesforce-org@client.com\n</code></pre> <pre><code>$ GITHUB_TOKEN=xxxx GITHUB_REPOSITORY=my-user/my-repo FORCE_TARGET_BRANCH=uat NODE_OPTIONS=--inspect-brk sf hardis:project:deploy:smart --check --websocket localhost:2702 --skipauth --target-org my-salesforce-org@client.com\n</code></pre>"},{"location":"hardis/project/deploy/start/","title":"start","text":""},{"location":"hardis/project/deploy/start/#hardisprojectdeploystart","title":"hardis:project:deploy:start","text":""},{"location":"hardis/project/deploy/start/#description","title":"Description","text":"<p>sfdx-hardis wrapper for sf project deploy start that displays tips to solve deployment errors.</p> <p>Note: Use --json argument to have better results</p> <p></p> <p>See documentation of Salesforce command</p>"},{"location":"hardis/project/deploy/start/#deployment-pre-or-post-commands","title":"Deployment pre or post commands","text":"<p>You can define command lines to run before or after a deployment, with parameters:</p> <ul> <li>id: Unique Id for the command</li> <li>label: Human readable label for the command</li> <li>skipIfError: If defined to \"true\", the post-command won't be run if there is a deployment failure</li> <li>context: Defines the context where the command will be run. Can be all (default), check-deployment-only or process-deployment-only</li> <li>runOnlyOnceByOrg: If set to true, the command will be run only one time per org. A record of SfdxHardisTrace__c is stored to make that possible (it needs to be existing in target org)</li> </ul> <p>If the commands are not the same depending on the target org, you can define them into config/branches/.sfdx-hardis-BRANCHNAME.yml instead of root config/.sfdx-hardis.yml</p> <p>Example:</p> <pre><code>commandsPreDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='deploy.github@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n\ncommandsPostDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to desired username\n    command: sf data update record --sobject User --where \"Username='admin-yser@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n  - id: someActionToRunJustOneTime\n    label: And to run only if deployment is success\n    command: sf sfdmu:run ...\n    skipIfError: true\n    context: process-deployment-only\n    runOnlyOnceByOrg: true\n</code></pre>"},{"location":"hardis/project/deploy/start/#parameters","title":"Parameters","text":"Name Type Description Default Required Options api-version-a option api-version async boolean async coverage-formatters option coverage-formatters debug boolean debug dry-run boolean dry-run flags-dir option undefined ignore-conflicts-c boolean ignore-conflicts ignore-errors-r boolean ignore-errors ignore-warnings-g boolean ignore-warnings json boolean Format output as json. junit boolean junit manifest-x option manifest metadata-m option metadata metadata-dir option metadata-dir post-destructive-changes option post-destructive-changes pre-destructive-changes option pre-destructive-changes purge-on-delete boolean purge-on-delete results-dir option results-dir single-package boolean single-package source-dir-d option source-dir target-org-o option undefined test-level option test-level tests option tests wait-w option wait 33"},{"location":"hardis/project/deploy/start/#examples","title":"Examples","text":""},{"location":"hardis/project/deploy/validate/","title":"validate","text":""},{"location":"hardis/project/deploy/validate/#hardisprojectdeployvalidate","title":"hardis:project:deploy:validate","text":""},{"location":"hardis/project/deploy/validate/#description","title":"Description","text":"<p>sfdx-hardis wrapper for sf project deploy validate that displays tips to solve deployment errors.</p> <p>Note: Use --json argument to have better results</p> <p></p> <p>See documentation of Salesforce command</p>"},{"location":"hardis/project/deploy/validate/#deployment-pre-or-post-commands","title":"Deployment pre or post commands","text":"<p>You can define command lines to run before or after a deployment, with parameters:</p> <ul> <li>id: Unique Id for the command</li> <li>label: Human readable label for the command</li> <li>skipIfError: If defined to \"true\", the post-command won't be run if there is a deployment failure</li> <li>context: Defines the context where the command will be run. Can be all (default), check-deployment-only or process-deployment-only</li> <li>runOnlyOnceByOrg: If set to true, the command will be run only one time per org. A record of SfdxHardisTrace__c is stored to make that possible (it needs to be existing in target org)</li> </ul> <p>If the commands are not the same depending on the target org, you can define them into config/branches/.sfdx-hardis-BRANCHNAME.yml instead of root config/.sfdx-hardis.yml</p> <p>Example:</p> <pre><code>commandsPreDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='deploy.github@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n\ncommandsPostDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to desired username\n    command: sf data update record --sobject User --where \"Username='admin-yser@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n  - id: someActionToRunJustOneTime\n    label: And to run only if deployment is success\n    command: sf sfdmu:run ...\n    skipIfError: true\n    context: process-deployment-only\n    runOnlyOnceByOrg: true\n</code></pre>"},{"location":"hardis/project/deploy/validate/#parameters","title":"Parameters","text":"Name Type Description Default Required Options api-version-a option api-version async boolean async coverage-formatters option coverage-formatters debug boolean debug dry-run boolean dry-run flags-dir option undefined ignore-conflicts-c boolean ignore-conflicts ignore-errors-r boolean ignore-errors ignore-warnings-g boolean ignore-warnings json boolean Format output as json. junit boolean junit manifest-x option manifest metadata-m option metadata metadata-dir option metadata-dir post-destructive-changes option post-destructive-changes pre-destructive-changes option pre-destructive-changes purge-on-delete boolean purge-on-delete results-dir option results-dir single-package boolean single-package source-dir-d option source-dir target-org-o option undefined test-level option test-level tests option tests wait-w option wait 33"},{"location":"hardis/project/deploy/validate/#examples","title":"Examples","text":""},{"location":"hardis/project/deploy/sources/dx/","title":"dx","text":""},{"location":"hardis/project/deploy/sources/dx/#hardisprojectdeploysourcesdx","title":"hardis:project:deploy:sources:dx","text":""},{"location":"hardis/project/deploy/sources/dx/#description","title":"Description","text":"<p>Smart deploy of SFDX sources to target org, with many useful options.</p> <p>In case of errors, tips to fix them will be included within the error messages.</p>"},{"location":"hardis/project/deploy/sources/dx/#quick-deploy","title":"Quick Deploy","text":"<p>In case Pull Request comments are configured on the project, Quick Deploy will try to be used (equivalent to button Quick Deploy)</p> <p>If you do not want to use QuickDeploy, define variable <code>SFDX_HARDIS_QUICK_DEPLOY=false</code></p> <ul> <li>GitHub Pull Requests comments config</li> <li>Gitlab Merge requests notes config</li> <li>Azure Pull Requests comments config</li> </ul>"},{"location":"hardis/project/deploy/sources/dx/#delta-deployments","title":"Delta deployments","text":"<p>To activate delta deployments, define property <code>useDeltaDeployment: true</code> in <code>config/.sfdx-hardis.yml</code>.</p> <p>This will activate delta deployments only between minor and major branches (major to major remains full deployment mode)</p> <p>If you want to force the delta deployment into major orgs (ex: preprod to prod), this is not recommended but you can use env variable ALWAYS_ENABLE_DELTA_DEPLOYMENT=true</p>"},{"location":"hardis/project/deploy/sources/dx/#smart-deployments-tests","title":"Smart Deployments Tests","text":"<p>Not all metadata updates can break test classes, use Smart Deployment Tests to skip running test classes if ALL the following conditions are met:</p> <ul> <li>Delta deployment is activated and applicable to the source and target branches</li> <li>Delta deployed metadatas are all matching the list of NOT_IMPACTING_METADATA_TYPES (see below)</li> <li>Target org is not a production org</li> </ul> <p>Activate Smart Deployment tests with:</p> <ul> <li>env variable <code>USE_SMART_DEPLOYMENT_TESTS=true</code></li> <li>.sfdx-hardis.yml config property <code>useSmartDeploymentTests: true</code></li> </ul> <p>Defaut list for NOT_IMPACTING_METADATA_TYPES (can be overridden with comma-separated list on env var NOT_IMPACTING_METADATA_TYPES)</p> <ul> <li>Audience</li> <li>AuraDefinitionBundle</li> <li>Bot</li> <li>BotVersion</li> <li>ContentAsset</li> <li>CustomObjectTranslation</li> <li>CustomSite</li> <li>CustomTab</li> <li>Dashboard</li> <li>ExperienceBundle</li> <li>Flexipage</li> <li>GlobalValueSetTranslation</li> <li>Layout</li> <li>LightningComponentBundle</li> <li>NavigationMenu</li> <li>ReportType</li> <li>Report</li> <li>SiteDotCom</li> <li>StandardValueSetTranslation</li> <li>StaticResource</li> <li>Translations</li> </ul> <p>Note: if you want to disable Smart test classes for a PR, add nosmart in the text of the latest commit.</p>"},{"location":"hardis/project/deploy/sources/dx/#dynamic-deployment-items-overwrite-management","title":"Dynamic deployment items / Overwrite management","text":"<p>If necessary,you can define the following files (that supports wildcards *):</p> <ul> <li><code>manifest/package-no-overwrite.xml</code>: Every element defined in this file will be deployed only if it is not existing yet in the target org (can be useful with ListView for example, if the client wants to update them directly in production org).<ul> <li>Can be overridden for a branch using .sfdx-hardis.yml property packageNoOverwritePath or environment variable PACKAGE_NO_OVERWRITE_PATH (for example, define: <code>packageNoOverwritePath: manifest/package-no-overwrite-main.xml</code> in config file <code>config/.sfdx-hardis.main.yml</code>)</li> </ul> </li> <li><code>manifest/packageXmlOnChange.xml</code>: Every element defined in this file will not be deployed if it already has a similar definition in target org (can be useful for SharingRules for example)</li> </ul> <p>See Overwrite management documentation</p>"},{"location":"hardis/project/deploy/sources/dx/#packages-installation","title":"Packages installation","text":"<p>You can define a list of package to install during deployments using property <code>installedPackages</code></p> <ul> <li>If <code>INSTALL_PACKAGES_DURING_CHECK_DEPLOY</code> is defined as <code>true</code> (or <code>installPackagesDuringCheckDeploy: true</code> in <code>.sfdx-hardis.yml</code>), packages will be installed even if the command is called with <code>--check</code> mode</li> <li>You can automatically update this property by listing all packages installed on an org using command <code>sf hardis:org:retrieve:packageconfig</code></li> </ul> <p>Example:</p> <pre><code>installedPackages:\n  - Id: 0A35r0000009EtECAU\n    SubscriberPackageId: 033i0000000LVMYAA4\n    SubscriberPackageName: Marketing Cloud\n    SubscriberPackageNamespace: et4ae5\n    SubscriberPackageVersionId: 04t6S000000l11iQAA\n    SubscriberPackageVersionName: Marketing Cloud\n    SubscriberPackageVersionNumber: 236.0.0.2\n    installOnScratchOrgs: true                  // true or false depending you want to install this package when creating a new scratch org\n    installDuringDeployments: true              // set as true to install package during a deployment using sf hardis:project:deploy:smart\n    installationkey: xxxxxxxxxxxxxxxxxxxx       // if the package has a password, write it in this property\n    - Id: 0A35r0000009F9CCAU\n    SubscriberPackageId: 033b0000000Pf2AAAS\n    SubscriberPackageName: Declarative Lookup Rollup Summaries Tool\n    SubscriberPackageNamespace: dlrs\n    SubscriberPackageVersionId: 04t5p000001BmLvAAK\n    SubscriberPackageVersionName: Release\n    SubscriberPackageVersionNumber: 2.15.0.9\n    installOnScratchOrgs: true\n    installDuringDeployments: true\n</code></pre>"},{"location":"hardis/project/deploy/sources/dx/#deployment-pre-or-post-commands","title":"Deployment pre or post commands","text":"<p>You can define command lines to run before or after a deployment, with parameters:</p> <ul> <li>id: Unique Id for the command</li> <li>label: Human readable label for the command</li> <li>skipIfError: If defined to \"true\", the post-command won't be run if there is a deployment failure</li> <li>context: Defines the context where the command will be run. Can be all (default), check-deployment-only or process-deployment-only</li> <li>runOnlyOnceByOrg: If set to true, the command will be run only one time per org. A record of SfdxHardisTrace__c is stored to make that possible (it needs to be existing in target org)</li> </ul> <p>If the commands are not the same depending on the target org, you can define them into config/branches/.sfdx-hardis-BRANCHNAME.yml instead of root config/.sfdx-hardis.yml</p> <p>Example:</p> <pre><code>commandsPreDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='deploy.github@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n\ncommandsPostDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to desired username\n    command: sf data update record --sobject User --where \"Username='admin-yser@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n  - id: someActionToRunJustOneTime\n    label: And to run only if deployment is success\n    command: sf sfdmu:run ...\n    skipIfError: true\n    context: process-deployment-only\n    runOnlyOnceByOrg: true\n</code></pre>"},{"location":"hardis/project/deploy/sources/dx/#pull-requests-custom-behaviors","title":"Pull Requests Custom Behaviors","text":"<p>If some words are found in the Pull Request description, special behaviors will be applied</p> Word Behavior NO_DELTA Even if delta deployments are activated, a deployment in mode full will be performed for this Pull Request PURGE_FLOW_VERSIONS After deployment, inactive and obsolete Flow Versions will be deleted (equivalent to command sf hardis:org:purge:flow)Caution: This will also purge active Flow Interviews ! DESTRUCTIVE_CHANGES_AFTER_DEPLOYMENT If a file manifest/destructiveChanges.xml is found, it will be executed in a separate step, after the deployment of the main package <p>For example, define <code>PURGE_FLOW_VERSIONS</code> and <code>DESTRUCTIVE_CHANGES_AFTER_DEPLOYMENT</code> in your Pull Request comments if you want to delete fields that are used in an active flow.</p> <p>Note: it is also possible to define these behaviors as ENV variables:</p> <ul> <li>For all deployments (example: <code>PURGE_FLOW_VERSIONS=true</code>)</li> <li>For a specific branch, by appending the target branch name (example: <code>PURGE_FLOW_VERSIONS_UAT=true</code>)</li> </ul>"},{"location":"hardis/project/deploy/sources/dx/#deployment-plan-deprecated","title":"Deployment plan (deprecated)","text":"<p>If you need to deploy in multiple steps, you can define a property <code>deploymentPlan</code> in <code>.sfdx-hardis.yml</code>.</p> <ul> <li>If a file <code>manifest/package.xml</code> is found, it will be placed with order 0 in the deployment plan</li> </ul> <ul> <li>If a file <code>manifest/destructiveChanges.xml</code> is found, it will be executed as --postdestructivechanges</li> </ul> <ul> <li>If env var <code>SFDX_HARDIS_DEPLOY_IGNORE_SPLIT_PACKAGES</code> is defined as <code>false</code> , split of package.xml will be applied</li> </ul> <p>Example:</p> <pre><code>deploymentPlan:\n  packages:\n    - label: Deploy Flow-Workflow\n      packageXmlFile: manifest/splits/packageXmlFlowWorkflow.xml\n      order: 6\n    - label: Deploy SharingRules - Case\n      packageXmlFile: manifest/splits/packageXmlSharingRulesCase.xml\n      order: 30\n      waitAfter: 30\n</code></pre>"},{"location":"hardis/project/deploy/sources/dx/#automated-fixes-post-deployments","title":"Automated fixes post deployments","text":""},{"location":"hardis/project/deploy/sources/dx/#list-view-with-scope-mine","title":"List view with scope Mine","text":"<p>If you defined a property listViewsToSetToMine in your .sfdx-hardis.yml, related ListViews will be set to Mine ( see command https://sfdx-hardis.cloudity.com/hardis/org/fix/listviewmine/ )</p> <p>Example:</p> <pre><code>listViewsToSetToMine:\n  - \"Operation__c:MyCurrentOperations\"\n  - \"Operation__c:MyFinalizedOperations\"\n  - \"Opportunity:Default_Opportunity_Pipeline\"\n  - \"Opportunity:MyCurrentSubscriptions\"\n  - \"Opportunity:MySubscriptions\"\n  - \"Account:MyActivePartners\"\n</code></pre> <p>Troubleshooting: if you need to fix ListViews with mine from an alpine-linux based docker image, use this workaround in your dockerfile:</p> <pre><code># Do not use puppeteer embedded chromium\nRUN apk add --update --no-cache chromium\nENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=\"true\"\nENV CHROMIUM_PATH=\"/usr/bin/chromium-browser\"\nENV PUPPETEER_EXECUTABLE_PATH=\"$\\{CHROMIUM_PATH}\" // remove \\ before {\n</code></pre> <p>If you need to increase the deployment waiting time (sf project deploy start --wait arg), you can define env variable SFDX_DEPLOY_WAIT_MINUTES (default: 120)</p> <p>If you need notifications to be sent using the current Pull Request and not the one just merged (see use case), define env variable SFDX_HARDIS_DEPLOY_BEFORE_MERGE=true</p> <p>If you want to disable the calculation and display of Flow Visual Git Diff in Pull Request comments, define variable SFDX_DISABLE_FLOW_DIFF=true</p>"},{"location":"hardis/project/deploy/sources/dx/#parameters","title":"Parameters","text":"Name Type Description Default Required Options check-c boolean Only checks the deployment, there is no impact on target org debug-d boolean Activate debug mode (more logs) delta boolean Applies sfdx-git-delta to package.xml before other deployment processes flags-dir option undefined json boolean Format output as json. packagexml-p option Path to package.xml containing what you want to deploy in target org runtests-r option If testlevel=RunSpecifiedTests, please provide a list of classes. If testlevel=RunRepositoryTests, can contain a regular expression to keep only class names matching it. If not set, will run all test classes found in the repo. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined testlevel-l option Level of tests to validate deployment. RunRepositoryTests auto-detect and run all repository test classes NoTestRunRunSpecifiedTestsRunRepositoryTestsRunRepositoryTestsExceptSeeAllDataRunLocalTestsRunAllTestsInOrg websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/deploy/sources/dx/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:deploy:smart\n</code></pre> <pre><code>$ sf hardis:project:deploy:smart --check\n</code></pre> <pre><code>$ sf hardis:project:deploy:smart --check --testlevel RunRepositoryTests\n</code></pre> <pre><code>$ sf hardis:project:deploy:smart --check --testlevel RunRepositoryTests --runtests '^(?!FLI|MyPrefix).*'\n</code></pre> <pre><code>$ sf hardis:project:deploy:smart --check --testlevel RunRepositoryTestsExceptSeeAllData\n</code></pre> <pre><code>$ sf hardis:project:deploy:smart\n</code></pre> <pre><code>$ FORCE_TARGET_BRANCH=preprod NODE_OPTIONS=--inspect-brk sf hardis:project:deploy:smart --check --websocket localhost:2702 --skipauth --target-org nicolas.vuillamy@myclient.com.preprod\n</code></pre> <pre><code>$ SYSTEM_ACCESSTOKEN=xxxxxx SYSTEM_COLLECTIONURI=https://dev.azure.com/xxxxxxx/ SYSTEM_TEAMPROJECT=\"xxxxxxx\" BUILD_REPOSITORY_ID=xxxxx SYSTEM_PULLREQUEST_PULLREQUESTID=1418 FORCE_TARGET_BRANCH=uat NODE_OPTIONS=--inspect-brk sf hardis:project:deploy:smart --check --websocket localhost:2702 --skipauth --target-org my.salesforce@org.com\n</code></pre> <pre><code>$ CI_SFDX_HARDIS_BITBUCKET_TOKEN=xxxxxx BITBUCKET_WORKSPACE=sfdxhardis-demo BITBUCKET_REPO_SLUG=test BITBUCKET_BUILD_NUMBER=1 BITBUCKET_BRANCH=uat BITBUCKET_PR_ID=2 FORCE_TARGET_BRANCH=uat NODE_OPTIONS=--inspect-brk sf hardis:project:deploy:smart --check --websocket localhost:2702 --skipauth --target-org my-salesforce-org@client.com\n</code></pre> <pre><code>$ GITHUB_TOKEN=xxxx GITHUB_REPOSITORY=my-user/my-repo FORCE_TARGET_BRANCH=uat NODE_OPTIONS=--inspect-brk sf hardis:project:deploy:smart --check --websocket localhost:2702 --skipauth --target-org my-salesforce-org@client.com\n</code></pre>"},{"location":"hardis/project/deploy/sources/metadata/","title":"metadata","text":""},{"location":"hardis/project/deploy/sources/metadata/#hardisprojectdeploysourcesmetadata","title":"hardis:project:deploy:sources:metadata","text":""},{"location":"hardis/project/deploy/sources/metadata/#description","title":"Description","text":"<p>Deploy metadatas to source org</p>"},{"location":"hardis/project/deploy/sources/metadata/#parameters","title":"Parameters","text":"Name Type Description Default Required Options check-c boolean Only checks the deployment, there is no impact on target org debug-d boolean Activate debug mode (more logs) deploydir-x option Deploy directory . destructivepackagexml-k option Path to destructiveChanges.xml file to deploy filter-f boolean Filter metadatas before deploying flags-dir option undefined json boolean Format output as json. packagexml-p option Path to package.xml file to deploy skipauth boolean Skip authentication check when a default username is required target-org-o option undefined testlevel-l option Level of tests to apply to validate deployment RunLocalTests NoTestRunRunSpecifiedTestsRunLocalTestsRunAllTestsInOrg websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/deploy/sources/metadata/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:deploy:sources:metadata\n</code></pre>"},{"location":"hardis/project/fix/profiletabs/","title":"profiletabs","text":""},{"location":"hardis/project/fix/profiletabs/#hardisprojectfixprofiletabs","title":"hardis:project:fix:profiletabs","text":""},{"location":"hardis/project/fix/profiletabs/#description","title":"Description","text":""},{"location":"hardis/project/fix/profiletabs/#command-behavior","title":"Command Behavior","text":"<p>Interactively updates tab visibility settings in Salesforce profiles, addressing a common issue where tab visibilities are not correctly retrieved by <code>sf project retrieve start</code>.</p> <p>This command provides a user-friendly interface to manage tab settings within your profile XML files, ensuring that your local project accurately reflects the intended tab configurations in your Salesforce org.</p> <p>Key functionalities:</p> <ul> <li>Interactive Tab Selection: Displays a multi-select menu of all available tabs in your org, allowing you to choose which tabs to update.</li> <li>Visibility Control: Lets you set the visibility for the selected tabs to either <code>DefaultOn</code> (Visible) or <code>Hidden</code>.</li> <li>Profile Selection: Presents a multi-select menu of all .profile-meta.xml files in your project, allowing you to apply the tab visibility changes to specific profiles.</li> <li>XML Updates: Modifies the  section of the selected profile XML files to reflect the chosen tab settings. If a tab visibility setting already exists for a selected tab, it will be updated; otherwise, a new one will be added.</li> <li>Sorted Output: The  in the updated profile XML files are sorted alphabetically for consistency and readability.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>SOQL Queries (Tooling API): It queries the <code>TabDefinition</code> object using <code>soqlQueryTooling</code> to retrieve a list of all available tabs in the target org.</li> <li>File Discovery: Uses <code>glob</code> to find all .profile-meta.xml files within the specified project path.</li> <li>Interactive Prompts: Leverages the <code>prompts</code> library to create interactive menus for selecting tabs, visibility settings, and profiles.</li> <li>XML Parsing and Manipulation: Uses <code>parseXmlFile</code> to read the content of profile XML files and <code>writeXmlFile</code> to write the modified content back. It manipulates the <code>tabVisibilities</code> array within the parsed XML to add or update tab settings.</li> <li>Array Sorting: Employs the <code>sort-array</code> library to sort the <code>tabVisibilities</code> alphabetically by tab name.</li> <li>Logging: Provides feedback to the user about which profiles have been updated and a summary of the changes.</li> </ul>"},{"location":"hardis/project/fix/profiletabs/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. path-p option Root folder /home/runner/work/sfdx-hardis/sfdx-hardis skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/fix/profiletabs/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:fix:profiletabs\n</code></pre>"},{"location":"hardis/project/fix/v53flexipages/","title":"v53flexipages","text":""},{"location":"hardis/project/fix/v53flexipages/#hardisprojectfixv53flexipages","title":"hardis:project:fix:v53flexipages","text":""},{"location":"hardis/project/fix/v53flexipages/#description","title":"Description","text":""},{"location":"hardis/project/fix/v53flexipages/#command-behavior","title":"Command Behavior","text":"<p>Fixes Salesforce FlexiPages for compatibility with API Version 53.0 (Winter '22 release) by adding missing identifiers to component instances.</p> <p>Salesforce introduced a change in API Version 53.0 that requires <code>identifier</code> tags within <code>componentInstance</code> and <code>fieldInstance</code> elements in FlexiPage metadata. If these identifiers are missing, deployments to orgs with API version 53.0 or higher will fail. This command automates the process of adding these missing identifiers, ensuring your FlexiPages remain deployable.</p> <p>Key functionalities:</p> <ul> <li>Targeted FlexiPage Processing: Scans all .flexipage-meta.xml files within the specified root folder (defaults to current working directory).</li> <li>Identifier Injection: Inserts a unique <code>identifier</code> tag (e.g., <code>SFDX_HARDIS_REPLACEMENT_ID</code>) into <code>componentInstance</code> and <code>fieldInstance</code> elements that lack one.</li> </ul> <p>Important Note: After running this command, ensure you update your <code>apiVersion</code> to <code>53.0</code> (or higher) in your <code>package.xml</code> and <code>sfdx-project.json</code> files.</p> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>File Discovery: Uses <code>glob</code> to find all .flexipage-meta.xml files.</li> <li>Content Reading: Reads the XML content of each FlexiPage file.</li> <li>Regular Expression Replacement: Employs a set of regular expressions to identify specific XML patterns (componentName.../componentName.../componentInstance, componentName.../componentName.../visibilityRule, fieldItem.../fieldItem.../fieldInstance) that are missing the <code>identifier</code> tag.</li> <li>Dynamic ID Generation: For each match, it generates a unique identifier (e.g., <code>sfdxHardisIdX</code>) and injects it into the XML structure.</li> <li>File Writing: If changes are made, the modified XML content is written back to the FlexiPage file using <code>fs.writeFile</code>.</li> <li>Logging: Provides messages about which FlexiPages are being processed and a summary of the total number of identifiers added.</li> </ul>"},{"location":"hardis/project/fix/v53flexipages/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. path-p option Root folder /home/runner/work/sfdx-hardis/sfdx-hardis skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/fix/v53flexipages/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:fix:v53flexipages\n</code></pre>"},{"location":"hardis/project/generate/bypass/","title":"bypass","text":""},{"location":"hardis/project/generate/bypass/#hardisprojectgeneratebypass","title":"hardis:project:generate:bypass","text":""},{"location":"hardis/project/generate/bypass/#description","title":"Description","text":""},{"location":"hardis/project/generate/bypass/#command-behavior","title":"Command Behavior","text":"<p>Generates custom permissions and permission sets to bypass specified Salesforce automations (Flows, Triggers, and Validation Rules) for specific sObjects.</p> <p>This command provides a controlled mechanism to temporarily or permanently disable automations for certain sObjects, which is invaluable for:</p> <ul> <li>Data Loading: Bypassing validation rules or triggers during large data imports.</li> <li>Troubleshooting: Isolating automation issues by temporarily disabling them.</li> <li>Development: Allowing developers to work on specific sObjects without triggering complex automations.</li> </ul> <p>Key functionalities:</p> <ul> <li>sObject Selection: You can specify a comma-separated list of sObjects to bypass (e.g., <code>Account,Contact</code>). If omitted, an interactive prompt will allow you to select from available sObjects.</li> <li>Automation Type Selection: Choose which types of automations to bypass: <code>Flow</code>, <code>Trigger</code>, or <code>VR</code> (Validation Rules). If omitted, an interactive prompt will guide your selection.</li> <li>Automatic Bypass Application: Optionally, the command can automatically inject bypass logic into Validation Rules and Triggers. This involves modifying the Apex code for Triggers and the XML for Validation Rules.</li> <li>Metadata Source: You can choose to retrieve the metadata elements (Validation Rules, Triggers) from the org (<code>--metadata-source org</code>) or use local files (<code>--metadata-source local</code>). Retrieving from the org is recommended for accuracy.</li> <li>Custom Permission and Permission Set Generation: For each selected sObject and automation type, it generates:<ul> <li>A Custom Permission (e.g., <code>BypassAccountFlows</code>) that acts as the bypass switch.</li> <li>A Permission Set (e.g., <code>BypassAccountFlows</code>) that grants the generated Custom Permission.</li> </ul> </li> <li>Credits Inclusion: By default, generated XML files include a comment indicating they were generated by sfdx-hardis. This can be skipped using <code>--skip-credits</code>.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>SOQL Queries (Tooling API): It queries <code>EntityDefinition</code> to list customizable sObjects and <code>ValidationRule</code> and <code>ApexTrigger</code> to find existing automations.</li> <li>Interactive Prompts: Uses the <code>prompts</code> library to guide the user through selecting sObjects, automation types, and bypass application options.</li> <li>XML Generation: Dynamically generates XML content for Custom Permissions and Permission Sets, including descriptions and labels that clearly indicate their purpose.</li> <li>File System Operations: Uses <code>fs-extra</code> to create directories and write the generated Custom Permission and Permission Set XML files.</li> <li>Metadata Retrieval (for Bypass Application): If <code>apply-to-vrs</code> or <code>apply-to-triggers</code> is used and <code>metadata-source</code> is <code>org</code>, it retrieves the relevant Validation Rule or Apex Trigger metadata from the org using <code>sf project retrieve start</code>.</li> <li>XML/Apex Code Modification:<ul> <li>For Validation Rules, it modifies the <code>errorConditionFormula</code> in the XML to include a check for the bypass Custom Permission.</li> <li>For Apex Triggers, it injects an <code>if</code> statement at the beginning of the trigger body to check for the bypass Custom Permission.</li> </ul> </li> <li><code>parseXmlFile</code> and <code>writeXmlFile</code>: Used for reading and writing XML metadata files.</li> <li><code>execCommand</code>: Used for executing Salesforce CLI commands, particularly for metadata retrieval.</li> <li>Error Handling: Includes checks for invalid sObject or automation selections and provides informative error messages.</li> </ul>"},{"location":"hardis/project/generate/bypass/#parameters","title":"Parameters","text":"Name Type Description Default Required Options apply-to-triggers boolean Apply bypass to Triggers apply-to-vrs boolean Apply bypass to Validation Rules automations-a option Comma-separated automations to bypass: Flow, Trigger, VR flags-dir option undefined json boolean Format output as json. metadata-source-r option Source of metadata elements to apply bypass to. Options: 'org' or 'local'. objects-s option Comma-separated list of sObjects to bypass (e.g., Account,Contact,Opportunity). If omitted, you will be prompted to select. skip-credits-k boolean Omit the \"Generated by\" line in the XML files skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/generate/bypass/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:generate:bypass\n</code></pre> <pre><code>$ sf hardis:project:generate:bypass --sObjects Account,Contact,Opportunity\n</code></pre> <pre><code>$ sf hardis:project:generate:bypass --automations Flow,Trigger,VR\n</code></pre> <pre><code>$ sf hardis:project:generate:bypass --sObjects Account,Opportunity --automations Flow,Trigger\n</code></pre> <pre><code>$ sf hardis:project:generate:bypass --skipCredits\n</code></pre> <pre><code>$ sf hardis:project:generate:bypass --apply-to-vrs\n</code></pre> <pre><code>$ sf hardis:project:generate:bypass --apply-to-triggers\n</code></pre> <pre><code>$ sf hardis:project:generate:bypass --metadata-source org\n</code></pre>"},{"location":"hardis/project/generate/flow-git-diff/","title":"flow-git-diff","text":""},{"location":"hardis/project/generate/flow-git-diff/#hardisprojectgenerateflow-git-diff","title":"hardis:project:generate:flow-git-diff","text":""},{"location":"hardis/project/generate/flow-git-diff/#description","title":"Description","text":"<p>Generate Flow Visual Git Diff markdown between 2 commits</p> <p>Note: This command might requires @mermaid-js/mermaid-cli to be installed.</p> <p>Run <code>npm install @mermaid-js/mermaid-cli --global</code></p>"},{"location":"hardis/project/generate/flow-git-diff/#parameters","title":"Parameters","text":"Name Type Description Default Required Options commit-after option Hash of the commit of the new flow state (will be prompted if not set) commit-before option Hash of the commit of the previous flow state, or \"allStates\" (will be prompted if not set) debug-d boolean Activate debug mode (more logs) flags-dir option undefined flow option Path to flow file (will be prompted if not set) json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/generate/flow-git-diff/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:generate:flow-git-diff\n</code></pre> <pre><code>$ sf hardis:project:generate:flow-git-diff --flow \"force-app/main/default/flows/Opportunity_AfterUpdate_Cloudity.flow-meta.xml\" --commit-before 8bd290e914c9dbdde859dad7e3c399776160d704 --commit-after e0835251bef6e400fb91e42f3a31022f37840f65\n</code></pre>"},{"location":"hardis/project/generate/gitdelta/","title":"gitdelta","text":""},{"location":"hardis/project/generate/gitdelta/#hardisprojectgenerategitdelta","title":"hardis:project:generate:gitdelta","text":""},{"location":"hardis/project/generate/gitdelta/#description","title":"Description","text":""},{"location":"hardis/project/generate/gitdelta/#command-behavior","title":"Command Behavior","text":"<p>Generates a <code>package.xml</code> and <code>destructiveChanges.xml</code> representing the metadata differences between two Git commits.</p> <p>This command is a powerful tool for managing Salesforce metadata deployments by focusing only on the changes between specific points in your version control history. It leverages <code>sfdx-git-delta</code> to accurately identify added, modified, and deleted metadata components.</p> <p>Key functionalities:</p> <ul> <li>Commit-Based Comparison: Allows you to specify a starting commit (<code>--fromcommit</code>) and an ending commit (<code>--tocommit</code>) to define the scope of the delta. If not provided, interactive prompts will guide you through selecting commits from your Git history.</li> <li>Branch Selection: You can specify a Git branch (<code>--branch</code>) to work with. If not provided, it will prompt you to select one.</li> <li><code>package.xml</code> Generation: Creates a <code>package.xml</code> file that lists all metadata components that have been added or modified between the specified commits.</li> <li><code>destructiveChanges.xml</code> Generation: Creates a <code>destructiveChanges.xml</code> file that lists all metadata components that have been deleted between the specified commits.</li> <li>Temporary File Output: The generated <code>package.xml</code> and <code>destructiveChanges.xml</code> files are placed in a temporary directory.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Git Integration: Uses <code>simple-git</code> (<code>git()</code>) to interact with the Git repository, including fetching branches (<code>git().fetch()</code>), checking out branches (<code>git().checkoutBranch()</code>), and listing commit history (<code>git().log()</code>).</li> <li>Interactive Prompts: Leverages the <code>prompts</code> library to guide the user through selecting a Git branch and specific commits for delta generation if they are not provided as command-line arguments.</li> <li><code>sfdx-git-delta</code> Integration: The core of the delta generation is handled by the <code>callSfdxGitDelta</code> utility function, which wraps the <code>sfdx-git-delta</code> tool. This tool performs the actual Git comparison and generates the <code>package.xml</code> and <code>destructiveChanges.xml</code> files.</li> <li>Temporary Directory Management: Uses <code>createTempDir</code> to create a temporary directory for storing the generated XML files, ensuring a clean working environment.</li> <li>File System Operations: Uses <code>fs-extra</code> to manage temporary files and directories.</li> <li>User Feedback: Provides clear messages to the user about the generated files and their locations.</li> </ul>"},{"location":"hardis/project/generate/gitdelta/#parameters","title":"Parameters","text":"Name Type Description Default Required Options branch option Git branch to use to generate delta debug-d boolean Activate debug mode (more logs) flags-dir option undefined fromcommit option Hash of commit to start from json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required tocommit option Hash of commit to stop at websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/generate/gitdelta/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:generate:gitdelta\n</code></pre>"},{"location":"hardis/project/metadata/activate-decomposed/","title":"activate-decomposed","text":""},{"location":"hardis/project/metadata/activate-decomposed/#hardisprojectmetadataactivate-decomposed","title":"hardis:project:metadata:activate-decomposed","text":""},{"location":"hardis/project/metadata/activate-decomposed/#description","title":"Description","text":""},{"location":"hardis/project/metadata/activate-decomposed/#command-behavior","title":"Command Behavior","text":"<p>Activate decomposed metadata types in Salesforce DX projects.</p> <p>This command helps manage decomposed metadata types that can be split into multiple files in source format. It automatically decomposes all supported metadata types that exist in your project.</p> <p>Supported metadata types (Beta):</p> <ul> <li>CustomLabels</li> <li>PermissionSet</li> <li>ExternalServiceRegistration</li> <li>SharingRules</li> <li>Workflow</li> </ul> <p>See Salesforce documentation on decomposed metadata</p> <p>Key features:</p> <ul> <li>Automatically detects and decomposes all applicable metadata types</li> <li>Decomposes only metadata types that exist in your project</li> <li>Interactive confirmation for decomposition operations</li> <li>Handles all confirmation prompts automatically</li> </ul> Technical explanations <p>This command utilizes Salesforce CLI's decomposed metadata feature to split complex metadata types into smaller, more manageable components:</p> <ul> <li>CustomLabels: Each custom label becomes a separate file, making it easier to track changes and manage translations.</li> <li>PermissionSets: Permission sets are decomposed into multiple files based on the permissions they contain (field permissions, object permissions, etc.).</li> <li>ExternalServiceRegistration: Decomposes external service registrations.</li> <li>SharingRules: Decomposes sharing rules into individual components.</li> <li>Workflow: Decomposes workflow rules into individual components.</li> </ul> <p>The command wraps the underlying Salesforce CLI functionality and provides a more user-friendly interface with additional validation and error handling.</p> <p>Note: All decomposed metadata features are currently in Beta in Salesforce CLI.</p>"},{"location":"hardis/project/metadata/activate-decomposed/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Run command in debug mode flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/metadata/activate-decomposed/#examples","title":"Examples","text":"<pre><code>$ sf hardis:project:metadata:activate-decomposed\n</code></pre> <pre><code>$ sf hardis:project:metadata:activate-decomposed --debug\n</code></pre>"},{"location":"hardis/project/metadata/findduplicates/","title":"findduplicates","text":""},{"location":"hardis/project/metadata/findduplicates/#hardisprojectmetadatafindduplicates","title":"hardis:project:metadata:findduplicates","text":""},{"location":"hardis/project/metadata/findduplicates/#description","title":"Description","text":"<p>find duplicate values in XML file(s).   Find duplicate values in XML file(s). Keys to be checked can be configured in <code>config/sfdx-hardis.yml</code> using property metadataDuplicateFindKeys.</p> <p>Default config : metadataDuplicateFindKeys : [object Object]</p>"},{"location":"hardis/project/metadata/findduplicates/#parameters","title":"Parameters","text":"Name Type Description Default Required Options files-f option XML metadata files path flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/project/metadata/findduplicates/#examples","title":"Examples","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Layout xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n  &lt;layoutSections&gt;\n      ...\n      &lt;layoutColumns&gt;\n          &lt;layoutItems&gt;\n              &lt;behavior&gt;Required&lt;/behavior&gt;\n              &lt;field&gt;Name&lt;/field&gt;\n          &lt;/layoutItems&gt;\n          &lt;layoutItems&gt;\n              &lt;behavior&gt;Required&lt;/behavior&gt;\n              &lt;field&gt;Name&lt;/field&gt;\n          &lt;/layoutItems&gt;\n      &lt;/layoutColumns&gt;\n    &lt;/layoutSections&gt;\n&lt;/Layout&gt;\n</code></pre> <pre><code>$ sf hardis:project:metadata:findduplicates --file layout.layout-meta.xml\n[sfdx-hardis] Duplicate values in layout.layout-meta.xml\n  - Key    : Layout.layoutSections.layoutColumns.layoutItems.field\n  - Values : Name\n</code></pre> <pre><code>$ sf hardis:project.metadata:findduplicates -f \"force-app/main/default/**/*.xml\"\n[sfdx-hardis] hardis:project:metadata:findduplicates execution time 0:00:00.397\n[sfdx-hardis] Duplicate values in layout1.layout-meta.xml\n  - Key    : Layout.layoutSections.layoutColumns.layoutItems.field\n  - Values : CreatedById\n\n[sfdx-hardis] Duplicate values in layout2.layout-meta.xml\n  - Key    : Layout.layoutSections.layoutColumns.layoutItems.field\n  - Values : LastModifiedById, Name\n</code></pre>"},{"location":"hardis/scratch/create/","title":"create","text":""},{"location":"hardis/scratch/create/#hardisscratchcreate","title":"hardis:scratch:create","text":""},{"location":"hardis/scratch/create/#description","title":"Description","text":""},{"location":"hardis/scratch/create/#command-behavior","title":"Command Behavior","text":"<p>Creates and fully initializes a Salesforce scratch org with complete development environment setup.</p> <p>This command is a comprehensive scratch org provisioning tool that automates the entire process of creating, configuring, and initializing a Salesforce scratch org for development work. It handles everything from basic org creation to advanced configuration including package installation, metadata deployment, and data initialization.</p> <p>Key functionalities:</p> <ul> <li>Intelligent Org Management: Automatically generates unique scratch org aliases based on username, git branch, and timestamp, with options to reuse existing orgs or force creation of new ones.</li> <li>Scratch Org Pool Integration: Supports fetching pre-configured scratch orgs from pools for faster development cycles and CI/CD optimization.</li> <li>Custom Scratch Definition: Dynamically builds project-scratch-def.json files with user-specific configurations including email, username patterns, and org shape settings (set variable SCRATCH_ORG_SHAPE to use org shapes).</li> <li>Package Installation: Automatically installs all configured packages defined in <code>installedPackages</code> configuration property.</li> <li>Metadata Deployment: Pushes source code and deploys metadata using optimized deployment strategies for scratch org environments.</li> <li>Permission Set Assignment: Assigns specified permission sets defined in <code>initPermissionSets</code> configuration to the scratch org user.</li> <li>Apex Script Execution: Runs custom Apex initialization scripts defined in <code>scratchOrgInitApexScripts</code> for org-specific setup.</li> <li>Data Loading: Loads initial data using SFDMU data packages from <code>dataPackages</code> configuration for realistic development environments.</li> <li>User Configuration: Automatically configures the scratch org admin user with proper names, email, country settings, and marketing user permissions.</li> <li>Password Generation: Creates and stores secure passwords for easy scratch org access during development.</li> <li>CI/CD Integration: Provides specialized handling for continuous integration environments including automated cleanup and pool management.</li> <li>Error Handling: Comprehensive error recovery including scratch org cleanup on failure and detailed troubleshooting messages.</li> </ul> <p>The command configuration can be customized using:</p> <ul> <li><code>config/.sfdx-hardis.yml</code> file with properties like <code>installedPackages</code>, <code>initPermissionSets</code>, <code>scratchOrgInitApexScripts</code>, and <code>dataPackages</code>.</li> <li>Environment variable SCRATCH_ORG_SHAPE with shape org id, if you want to use org shapes</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Configuration Management: Loads hierarchical configuration from <code>.sfdx-hardis.yml</code>, branch-specific, and user-specific configuration files using <code>getConfig('user')</code>.</li> <li>Alias Generation Logic: Creates intelligent scratch org aliases using username, git branch, timestamp patterns with CI and pool prefixes for different environments.</li> <li>Scratch Org Definition Building: Dynamically constructs <code>project-scratch-def.json</code> with user email, custom usernames, org shapes, and feature flags like StateAndCountryPicklist and MarketingUser.</li> <li>Pool Integration: Implements scratch org pool fetching using <code>fetchScratchOrg</code> for rapid org provisioning in development and CI environments.</li> <li>Salesforce CLI Integration: Executes <code>sf org create scratch</code> commands with proper parameter handling including wait times, duration, and dev hub targeting.</li> <li>Package Installation Pipeline: Uses <code>installPackages</code> utility to install managed and unmanaged packages with dependency resolution and error handling.</li> <li>Metadata Deployment: Leverages <code>initOrgMetadatas</code> for optimized source pushing and metadata deployment specific to scratch org environments.</li> <li>Permission Set Assignment: Implements <code>initPermissionSetAssignments</code> for automated permission set assignment to scratch org users.</li> <li>Apex Script Execution: Runs custom Apex initialization scripts using <code>initApexScripts</code> for org-specific configuration and setup.</li> <li>Data Loading Integration: Uses SFDMU integration through <code>initOrgData</code> for comprehensive data loading from configured data packages.</li> <li>User Management: Performs SOQL queries and DML operations to configure scratch org users with proper names, emails, country codes, and permission flags.</li> <li>Authentication Management: Handles SFDX auth URL generation and storage for CI/CD environments and scratch org pool management.</li> <li>Error Recovery: Implements comprehensive error handling with scratch org cleanup, pool management, and detailed error messaging for troubleshooting.</li> <li>WebSocket Integration: Provides real-time status updates and file reporting through WebSocket connections for VS Code extension integration.</li> </ul>"},{"location":"hardis/scratch/create/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined forcenew-n boolean If an existing scratch org exists, do not reuse it but create a new one json boolean Format output as json. pool boolean Creates the scratch org for a scratch org pool skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/scratch/create/#examples","title":"Examples","text":"<pre><code>$ sf hardis:scratch:create\n</code></pre>"},{"location":"hardis/scratch/delete/","title":"delete","text":""},{"location":"hardis/scratch/delete/#hardisscratchdelete","title":"hardis:scratch:delete","text":""},{"location":"hardis/scratch/delete/#description","title":"Description","text":""},{"location":"hardis/scratch/delete/#command-behavior","title":"Command Behavior","text":"<p>Provides an assisted menu to delete Salesforce scratch orgs associated with a Dev Hub.</p> <p>This command simplifies the process of cleaning up your Salesforce development environments by allowing you to easily select and delete multiple scratch orgs. This is crucial for managing your scratch org limits and ensuring that you don't accumulate unnecessary or expired orgs.</p> <p>Key functionalities:</p> <ul> <li>Interactive Scratch Org Selection: Displays a list of all active scratch orgs linked to your Dev Hub, including their usernames, instance URLs, and last used dates.</li> <li>Multi-Selection: Allows you to select multiple scratch orgs for deletion.</li> <li>Confirmation Prompt: Prompts for confirmation before proceeding with the deletion, ensuring that you don't accidentally delete important orgs.</li> <li>Dev Hub Integration: Works with your configured Dev Hub to manage scratch orgs.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Salesforce CLI Integration: It executes the <code>sf org list</code> command to retrieve a list of all scratch orgs associated with the current Dev Hub. It then filters this list to show only active orgs.</li> <li>Interactive Prompts: Uses the <code>prompts</code> library to present a multi-select menu of scratch orgs to the user.</li> <li>Scratch Org Deletion: For each selected scratch org, it executes the <code>sf org delete scratch --no-prompt</code> command to perform the deletion.</li> <li>Error Handling: Includes basic error handling for Salesforce CLI commands.</li> <li>Data Sorting: Sorts the list of scratch orgs by username, alias, and instance URL for better readability in the interactive menu.</li> </ul>"},{"location":"hardis/scratch/delete/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/scratch/delete/#examples","title":"Examples","text":"<pre><code>$ sf hardis:scratch:delete\n</code></pre>"},{"location":"hardis/scratch/pull/","title":"pull","text":""},{"location":"hardis/scratch/pull/#hardisscratchpull","title":"hardis:scratch:pull","text":""},{"location":"hardis/scratch/pull/#description","title":"Description","text":""},{"location":"hardis/scratch/pull/#command-behavior","title":"Command Behavior","text":"<p>Pulls metadata changes from your scratch org or source-tracked sandbox into your local project files.</p> <p>This command is essential for synchronizing your local development environment with the changes you've made directly in your Salesforce org. After pulling, you can then stage and commit the relevant files to your version control system.</p> <p>Key features and considerations:</p> <ul> <li>Underlying Command: Internally, this command executes <code>sf project retrieve start</code> to fetch the metadata.</li> <li>Error Handling: If the pull operation encounters errors, it offers to automatically add the problematic items to your <code>.forceignore</code> file and then attempts to pull again, helping you resolve conflicts and ignore unwanted metadata.</li> <li>Missing Updates: If you don't see certain updated items in the pull results, you might need to manually retrieve them using the Salesforce Extension's Org Browser or the Salesforce CLI directly. Refer to the Retrieve Metadatas documentation for more details.</li> <li>Automatic Retrieval: You can configure the <code>autoRetrieveWhenPull</code> property in your <code>.sfdx-hardis.yml</code> file to always retrieve specific metadata types (e.g., <code>CustomApplication</code>) that might not always be detected as updates by <code>project:retrieve:start</code>.</li> </ul> <p>Example <code>.sfdx-hardis.yml</code> configuration for <code>autoRetrieveWhenPull</code>: </p><pre><code>autoRetrieveWhenPull:\n  - CustomApplication:MyCustomApplication\n  - CustomApplication:MyOtherCustomApplication\n  - CustomApplication:MyThirdCustomApp\n</code></pre><p></p> <p>For a visual explanation of the process, watch this video:</p> Technical explanations <p>The command's technical implementation focuses on robust metadata synchronization:</p> <ul> <li>Salesforce CLI Wrapper: It acts as a wrapper around the standard Salesforce CLI <code>sf project retrieve start</code> command, providing enhanced error handling and configuration options.</li> <li>Force Source Pull Utility: The core logic resides in the <code>forceSourcePull</code> utility function, which orchestrates the retrieval process, including handling <code>.forceignore</code> updates.</li> <li>Configuration Integration: It reads the <code>autoRetrieveWhenPull</code> setting from the project's <code>.sfdx-hardis.yml</code> to determine additional metadata to retrieve automatically.</li> <li>User Feedback: Provides clear messages to the user regarding the pull status and guidance for troubleshooting.</li> </ul>"},{"location":"hardis/scratch/pull/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/scratch/pull/#examples","title":"Examples","text":"<pre><code>$ sf hardis:scratch:pull\n</code></pre>"},{"location":"hardis/scratch/push/","title":"push","text":""},{"location":"hardis/scratch/push/#hardisscratchpush","title":"hardis:scratch:push","text":""},{"location":"hardis/scratch/push/#description","title":"Description","text":""},{"location":"hardis/scratch/push/#command-behavior","title":"Command Behavior","text":"<p>Pushes local Salesforce DX source files to a scratch org or source-tracked sandbox.</p> <p>This command is a fundamental operation in Salesforce DX development, allowing developers to synchronize their local codebase with their development org. It ensures that changes made locally are reflected in the scratch org, enabling testing and validation.</p> <p>Key functionalities:</p> <ul> <li>Source Synchronization: Deploys all local changes (metadata and code) to the target scratch org.</li> <li>Underlying Command: Internally, this command executes <code>sf project deploy start</code> to perform the push operation.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Salesforce CLI Wrapper: It acts as a wrapper around the standard Salesforce CLI <code>sf project deploy start</code> command.</li> <li><code>forceSourcePush</code> Utility: The core logic resides in the <code>forceSourcePush</code> utility function, which orchestrates the deployment process.</li> <li>Connection Handling: It uses the connection to the target org to perform the push operation.</li> </ul>"},{"location":"hardis/scratch/push/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/scratch/push/#examples","title":"Examples","text":"<pre><code>$ sf hardis:scratch:push\n</code></pre>"},{"location":"hardis/scratch/pool/create/","title":"create","text":""},{"location":"hardis/scratch/pool/create/#hardisscratchpoolcreate","title":"hardis:scratch:pool:create","text":""},{"location":"hardis/scratch/pool/create/#description","title":"Description","text":"<p>Select a data storage service and configure information to build a scratch org pool</p> <p>Run the command, follow instruction, then you need to schedule a daily CI job for the pool maintenance:</p> <p>- Define CI ENV variable SCRATCH_ORG_POOL with value \"true\"</p> <p>- Call the following lines in the CI job:</p> <pre><code>  sf hardis:auth:login --devhub\n  sf hardis:scratch:pool:refresh\n</code></pre>"},{"location":"hardis/scratch/pool/create/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/scratch/pool/create/#examples","title":"Examples","text":"<pre><code>$ sf hardis:scratch:pool:configure\n</code></pre>"},{"location":"hardis/scratch/pool/localauth/","title":"localauth","text":""},{"location":"hardis/scratch/pool/localauth/#hardisscratchpoollocalauth","title":"hardis:scratch:pool:localauth","text":""},{"location":"hardis/scratch/pool/localauth/#description","title":"Description","text":""},{"location":"hardis/scratch/pool/localauth/#command-behavior","title":"Command Behavior","text":"<p>Authenticates a local user to the configured scratch org pool storage service, enabling them to fetch and manage scratch orgs from the pool.</p> <p>This command is essential for developers who want to utilize a shared scratch org pool for their local development. It establishes the necessary authentication with the backend storage service (e.g., Salesforce Custom Object, Redis) that manages the pool's state, allowing the user to retrieve available scratch orgs for their work.</p> <p>Key functionalities:</p> <ul> <li>Storage Service Authentication: Initiates the authentication process with the chosen storage service to obtain the required API keys or secrets.</li> <li>Enables Pool Access: Once authenticated, the local user can then use other sfdx-hardis commands to fetch, use, and return scratch orgs from the pool.</li> <li>Configuration Check: Verifies if a scratch org pool is already configured for the current project and provides guidance if it's not.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Configuration Loading: It retrieves the <code>poolConfig</code> from the project's .sfdx-hardis.yml file to identify the configured storage service.</li> <li>Provider Instantiation: It uses the <code>instantiateProvider</code> utility function to create an instance of the <code>KeyValueProviderInterface</code> corresponding to the configured storage service.</li> <li>User Authentication: It then calls the <code>userAuthenticate()</code> method on the instantiated provider. This method encapsulates the specific logic for authenticating with the chosen storage service (e.g., prompting for API keys, performing OAuth flows).</li> <li>Error Handling: It checks for the absence of a configured scratch org pool and provides a user-friendly message.</li> </ul>"},{"location":"hardis/scratch/pool/localauth/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/scratch/pool/localauth/#examples","title":"Examples","text":"<pre><code>$ sf hardis:scratch:pool:localauth\n</code></pre>"},{"location":"hardis/scratch/pool/refresh/","title":"refresh","text":""},{"location":"hardis/scratch/pool/refresh/#hardisscratchpoolrefresh","title":"hardis:scratch:pool:refresh","text":""},{"location":"hardis/scratch/pool/refresh/#description","title":"Description","text":""},{"location":"hardis/scratch/pool/refresh/#command-behavior","title":"Command Behavior","text":"<p>Refreshes a scratch org pool by creating new scratch orgs to fill the pool and deleting expired ones.</p> <p>This command is designed to maintain a healthy and adequately sized scratch org pool, ensuring that developers and CI/CD pipelines always have access to ready-to-use scratch orgs. It automates the lifecycle management of scratch orgs within the pool.</p> <p>Key functionalities:</p> <ul> <li>Expired Org Cleanup: Identifies and deletes scratch orgs from the pool that are nearing their expiration date (configurable via <code>minScratchOrgRemainingDays</code> in <code>.sfdx-hardis.yml</code>).</li> <li>Pool Replenishment: Creates new scratch orgs to replace expired ones and to reach the <code>maxScratchOrgsNumber</code> defined in the pool configuration.</li> <li>Parallel Creation: New scratch orgs are created in parallel using child processes, optimizing the replenishment process.</li> <li>Authentication Handling: Authenticates to scratch orgs before deletion or creation, ensuring proper access.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Configuration Loading: It retrieves the <code>poolConfig</code> from the project's <code>.sfdx-hardis.yml</code> file to get parameters like <code>maxScratchOrgsNumber</code>, <code>maxScratchOrgsNumberToCreateOnce</code>, and <code>minScratchOrgRemainingDays</code>.</li> <li>Pool Storage Interaction: It uses <code>getPoolStorage</code> and <code>setPoolStorage</code> to interact with the configured storage service (e.g., Salesforce Custom Object, Redis) to retrieve and update the list of scratch orgs in the pool.</li> <li>Expiration Check: It calculates the remaining days for each scratch org in the pool using moment and flags those below the <code>minScratchOrgRemainingDays</code> threshold for deletion.</li> <li>Scratch Org Deletion: For expired orgs, it authenticates to them using <code>authenticateWithSfdxUrlStore</code> and then executes <code>sf org delete scratch</code> via <code>execCommand</code>.</li> <li>Scratch Org Creation: To replenish the pool, it spawns new child processes that run the <code>sf hardis:scratch:create --pool</code> command. This allows for parallel creation of multiple scratch orgs.</li> <li>Error Handling: It includes error handling for scratch org creation failures, logging them and updating the pool storage accordingly.</li> <li>Logging: Provides detailed logs about the status of scratch orgs (kept, deleted, created, failed creations) and a summary of the refresh operation.</li> </ul>"},{"location":"hardis/scratch/pool/refresh/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/scratch/pool/refresh/#examples","title":"Examples","text":"<pre><code>$ sf hardis:scratch:pool:refresh\n</code></pre>"},{"location":"hardis/scratch/pool/reset/","title":"reset","text":""},{"location":"hardis/scratch/pool/reset/#hardisscratchpoolreset","title":"hardis:scratch:pool:reset","text":""},{"location":"hardis/scratch/pool/reset/#description","title":"Description","text":""},{"location":"hardis/scratch/pool/reset/#command-behavior","title":"Command Behavior","text":"<p>Resets the scratch org pool by deleting all existing scratch orgs within it.</p> <p>This command provides a way to clear out the entire scratch org pool, effectively starting fresh. This can be useful for:</p> <ul> <li>Troubleshooting: If the pool becomes corrupted or contains problematic scratch orgs.</li> <li>Major Changes: When there are significant changes to the scratch org definition or initialization process that require all existing orgs to be recreated.</li> <li>Cleanup: Periodically cleaning up the pool to ensure only the latest and most relevant scratch orgs are available.</li> </ul> <p>Key functionalities:</p> <ul> <li>Full Pool Deletion: Identifies all scratch orgs currently in the pool and initiates their deletion.</li> <li>Dev Hub Integration: Works with your configured Dev Hub to manage the scratch orgs within the pool.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Configuration Loading: It retrieves the <code>poolConfig</code> from the project's .sfdx-hardis.yml file to ensure a pool is configured.</li> <li>Pool Storage Interaction: It uses <code>getPoolStorage</code> to retrieve the current list of scratch orgs in the pool and <code>setPoolStorage</code> to clear the pool's record.</li> <li>Scratch Org Deletion: It iterates through each scratch org in the retrieved list. For each org, it authenticates to it using <code>authenticateWithSfdxUrlStore</code> and then executes <code>sf org delete scratch</code> via <code>execCommand</code>.</li> <li>Logging: Provides clear messages about the deletion process and the status of each scratch org.</li> </ul>"},{"location":"hardis/scratch/pool/reset/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/scratch/pool/reset/#examples","title":"Examples","text":"<pre><code>$ sf hardis:scratch:pool:refresh\n</code></pre>"},{"location":"hardis/scratch/pool/view/","title":"view","text":""},{"location":"hardis/scratch/pool/view/#hardisscratchpoolview","title":"hardis:scratch:pool:view","text":""},{"location":"hardis/scratch/pool/view/#description","title":"Description","text":""},{"location":"hardis/scratch/pool/view/#command-behavior","title":"Command Behavior","text":"<p>Displays information about the configured scratch org pool, including its current state and available scratch orgs.</p> <p>This command provides visibility into your scratch org pool, allowing you to monitor its health, check the number of available orgs, and verify its configuration. It's a useful tool for administrators and developers managing shared scratch org environments.</p> <p>Key functionalities:</p> <ul> <li>Pool Configuration Display: Shows the <code>poolConfig</code> defined in your \".sfdx-hardis.yml\" file, including the chosen storage service and the maximum number of scratch orgs.</li> <li>Pool Storage Content: Displays the raw content of the pool storage, which includes details about each scratch org in the pool (e.g., alias, username, expiration date).</li> <li>Available Scratch Org Count: Provides a summary of how many scratch orgs are currently available in the pool.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Configuration Loading: It retrieves the <code>poolConfig</code> from the project's \".sfdx-hardis.yml\" file using <code>getConfig</code>.</li> <li>Pool Storage Retrieval: It uses <code>getPoolStorage</code> to connect to the configured storage service (e.g., Salesforce Custom Object, Redis) and retrieve the current state of the scratch org pool.</li> <li>Data Display: It logs the retrieved pool configuration and pool storage content to the console in a human-readable format.</li> <li>Error Handling: It checks if a scratch org pool is configured for the project and provides a warning message if it's not.</li> </ul>"},{"location":"hardis/scratch/pool/view/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/scratch/pool/view/#examples","title":"Examples","text":"<pre><code>$ sf hardis:scratch:pool:view\n</code></pre>"},{"location":"hardis/source/deploy/","title":"deploy","text":""},{"location":"hardis/source/deploy/#hardissourcedeploy","title":"hardis:source:deploy","text":""},{"location":"hardis/source/deploy/#description","title":"Description","text":"<p>sfdx-hardis wrapper for sfdx force:source:deploy that displays tips to solve deployment errors.</p> <p>Additional to the base command wrapper: If using --checkonly, add options --checkcoverage and --coverageformatters json-summary to check that org coverage is &gt; 75% (or value defined in .sfdx-hardis.yml property apexTestsMinCoverageOrgWide)</p>"},{"location":"hardis/source/deploy/#deployment-results","title":"Deployment results","text":"<p>You can also have deployment results as pull request comments, on:</p> <ul> <li>GitHub (see GitHub Pull Requests comments config)</li> <li>Gitlab (see Gitlab integration configuration)</li> <li>Azure DevOps (see Azure integration configuration)</li> </ul> <p></p>"},{"location":"hardis/source/deploy/#deployment-pre-or-post-commands","title":"Deployment pre or post commands","text":"<p>You can define command lines to run before or after a deployment, with parameters:</p> <ul> <li>id: Unique Id for the command</li> <li>label: Human readable label for the command</li> <li>skipIfError: If defined to \"true\", the post-command won't be run if there is a deployment failure</li> <li>context: Defines the context where the command will be run. Can be all (default), check-deployment-only or process-deployment-only</li> <li>runOnlyOnceByOrg: If set to true, the command will be run only one time per org. A record of SfdxHardisTrace__c is stored to make that possible (it needs to be existing in target org)</li> </ul> <p>If the commands are not the same depending on the target org, you can define them into config/branches/.sfdx-hardis-BRANCHNAME.yml instead of root config/.sfdx-hardis.yml</p> <p>Example:</p> <pre><code>commandsPreDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to the deployment user\n    command: sf data update record --sobject User --where \"Username='deploy.github@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n\ncommandsPostDeploy:\n  - id: knowledgeUnassign\n    label: Remove KnowledgeUser right to the user who has it\n    command: sf data update record --sobject User --where \"UserPermissionsKnowledgeUser='true'\" --values \"UserPermissionsKnowledgeUser='false'\" --json\n  - id: knowledgeAssign\n    label: Assign Knowledge user to desired username\n    command: sf data update record --sobject User --where \"Username='admin-yser@myclient.com'\" --values \"UserPermissionsKnowledgeUser='true'\" --json\n  - id: someActionToRunJustOneTime\n    label: And to run only if deployment is success\n    command: sf sfdmu:run ...\n    skipIfError: true\n    context: process-deployment-only\n    runOnlyOnceByOrg: true\n</code></pre> <p>Notes:</p> <ul> <li>You can disable coloring of errors in red by defining env variable SFDX_HARDIS_DEPLOY_ERR_COLORS=false</li> </ul> <p>See documentation of Salesforce command</p>"},{"location":"hardis/source/deploy/#parameters","title":"Parameters","text":"Name Type Description Default Required Options checkcoverage boolean Check Apex org coverage checkonly-c boolean checkonly coverageformatters option coverageformatters debug boolean debug flags-dir option undefined forceoverwrite-f boolean forceoverwrite ignoreerrors boolean ignoreErrors ignorewarnings-g boolean ignoreWarnings json boolean Format output as json. junit boolean junit manifest-x option flagsLong.manifest metadata-m option metadata postdestructivechanges option postdestructivechanges predestructivechanges option predestructivechanges resultsdir option resultsdir runtests-r option runTests soapdeploy boolean soapDeploy sourcepath-p option sourcePath target-org-o option undefined testlevel-l option testlevel NoTestRun NoTestRunRunSpecifiedTestsRunLocalTestsRunAllTestsInOrg tracksource-t boolean tracksource validateddeployrequestid-q option validateDeployRequestId verbose boolean verbose wait-w option wait 60 websocket option websocket"},{"location":"hardis/source/deploy/#examples","title":"Examples","text":"<pre><code>$ sf hardis:source:deploy -x manifest/package.xml --wait 60 --ignorewarnings --testlevel RunLocalTests --postdestructivechanges ./manifest/destructiveChanges.xml --target-org nicolas.vuillamy@cloudity.com.sfdxhardis --checkonly --checkcoverage --verbose --coverageformatters json-summary\n</code></pre>"},{"location":"hardis/source/push/","title":"push","text":""},{"location":"hardis/source/push/#hardissourcepush","title":"hardis:source:push","text":""},{"location":"hardis/source/push/#description","title":"Description","text":"<p>sfdx-hardis wrapper for sfdx force:source:push that displays tips to solve deployment errors.</p> <p></p> <p>See documentation of Salesforce command</p>"},{"location":"hardis/source/push/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug boolean debug flags-dir option undefined forceoverwrite-f boolean forceoverwrite ignorewarnings-g boolean ignorewarnings json boolean Format output as json. quiet boolean quiet target-org-o option undefined wait-w option wait 60 websocket option websocket"},{"location":"hardis/source/push/#examples","title":"Examples","text":""},{"location":"hardis/source/retrieve/","title":"retrieve","text":""},{"location":"hardis/source/retrieve/#hardissourceretrieve","title":"hardis:source:retrieve","text":""},{"location":"hardis/source/retrieve/#description","title":"Description","text":""},{"location":"hardis/source/retrieve/#command-behavior","title":"Command Behavior","text":"<p>A wrapper command for Salesforce CLI's <code>sf project retrieve start</code> (formerly <code>sfdx force:source:retrieve</code>), with enhanced interactive features.</p> <p>This command facilitates the retrieval of metadata from a Salesforce org into your local project. It provides an assisted experience, especially when no specific retrieval constraints are provided.</p> <p>Key features:</p> <ul> <li>Assisted Metadata Selection: If no <code>sourcepath</code>, <code>manifest</code>, <code>metadata</code>, or <code>packagenames</code> flags are specified, an interactive menu will prompt you to select the metadata types you wish to retrieve.</li> <li>Assisted Org Selection: If no target org is specified, an interactive menu will guide you to choose an org for the retrieval operation.</li> <li>Backward Compatibility: While this command wraps the newer <code>sf project retrieve start</code>, it maintains compatibility with the older <code>sfdx force:source:retrieve</code> flags.</li> </ul> <p>Important Note: The underlying Salesforce CLI command <code>sfdx force:source:retrieve</code> is being deprecated by Salesforce in November 2024. It is recommended to migrate to <code>sf project retrieve start</code> for future compatibility. See Salesforce CLI Migration Guide for more information.</p> Technical explanations <p>This command acts as an intelligent wrapper around the Salesforce CLI's source retrieval functionality:</p> <ul> <li>Command Wrapping: It uses the <code>wrapSfdxCoreCommand</code> utility to execute the <code>sfdx force:source:retrieve</code> (or its equivalent <code>sf project retrieve start</code>) command, passing through all relevant flags and arguments.</li> <li>Interactive Prompts: It leverages <code>MetadataUtils.promptMetadataTypes()</code> and <code>promptOrgUsernameDefault()</code> to provide interactive menus for metadata and org selection when the user does not provide them as flags.</li> <li>Argument Transformation: It dynamically constructs the command-line arguments for the underlying Salesforce CLI command based on user selections and provided flags.</li> <li>Error Handling: It includes basic error handling, such as prompting the user to re-select an org if an issue occurs during org selection.</li> <li>Deprecation Warning: It explicitly logs warnings about the deprecation of <code>sfdx force:source:retrieve</code> to inform users about upcoming changes.</li> </ul>"},{"location":"hardis/source/retrieve/#parameters","title":"Parameters","text":"Name Type Description Default Required Options apiversion-a option Override the api version used for api requests made by this command debug-d boolean debugMode flags-dir option undefined forceoverwrite-f boolean forceoverwrite json boolean Format output as json. manifest-x option manifest metadata-m option metadata packagenames-n option packagenames skipauth boolean Skip authentication check when a default username is required sourcepath-p option sourcePath target-org-o option undefined tracksource-t boolean tracksource verbose boolean verbose wait-w option wait websocket option websocket"},{"location":"hardis/source/retrieve/#examples","title":"Examples","text":""},{"location":"hardis/work/new/","title":"new","text":""},{"location":"hardis/work/new/#hardisworknew","title":"hardis:work:new","text":""},{"location":"hardis/work/new/#description","title":"Description","text":""},{"location":"hardis/work/new/#command-behavior","title":"Command Behavior","text":"<p>Assisted menu to start working on a Salesforce User Story, streamlining the setup of your development environment.</p> <p>This command guides you through the process of preparing your local environment and a Salesforce org for a new development or configuration based User Story. It automates several steps, ensuring consistency and adherence to project standards.</p> <p>Key features include:</p> <ul> <li>Git Branch Management: Ensures your local Git repository is up-to-date with the target branch and creates a new Git branch with a formatted name based on your User Story details. Branch naming conventions can be customized via the <code>branchPrefixChoices</code> property in <code>.sfdx-hardis.yml</code>.</li> </ul> <ul> <li>Org Provisioning &amp; Initialization: Facilitates the creation and initialization of either a scratch org or a source-tracked sandbox. The configuration for org initialization (e.g., package installation, source push, permission set assignments, Apex script execution, data loading) can be defined in `config/.sfdx-hardis.yml</li> <li>Project-Specific Configuration: Supports defining multiple target branches (<code>availableTargetBranches</code>) and projects (<code>availableProjects</code>) in <code>.sfdx-hardis.yml</code>, allowing for tailored User Stories workflows.</li> </ul> <ul> <li>User Story Name Validation: Enforces User Story name formatting using <code>newTaskNameRegex</code> and provides examples via `newTaskNameRegexExample</li> <li>Shared Development Sandboxes: Accounts for scenarios with shared development sandboxes, adjusting prompts to prevent accidental overwrites.</li> </ul> <p>Advanced instructions are available in the Create New User Story documentation.</p> Technical explanations <p>The command's logic orchestrates various underlying processes:</p> <ul> <li>Git Operations: Utilizes <code>checkGitClean</code>, <code>ensureGitBranch</code>, <code>gitCheckOutRemote</code>, and <code>git().pull()</code> to manage Git repository state and branches.</li> <li>Interactive Prompts: Leverages the <code>prompts</code> library to gather user input for User Story type, source types, and User Story names.</li> <li>Configuration Management: Reads and applies project-specific configurations from <code>.sfdx-hardis.yml</code> using <code>getConfig</code> and <code>setConfig- **Org Initialization Utilities:** Calls a suite of utility functions for org setup, including</code>initApexScripts<code>,</code>initOrgData<code>,</code>initOrgMetadatas<code>,</code>initPermissionSetAssignments<code>,</code>installPackages<code>, and</code>makeSureOrgIsConnected- Salesforce CLI Interaction: Executes Salesforce CLI commands (e.g., <code>sf config set target-org</code>, <code>sf org open</code>, <code>sf project delete tracking</code>) via <code>execCommand</code> and <code>execSfdxJson- **Dynamic Org Selection:** Presents choices for scratch orgs or sandboxes based on project configuration and existing orgs, dynamically calling</code>ScratchCreate.run<code>or</code>SandboxCreate.run` as needed.</li> <li>WebSocket Communication: Sends refresh status messages via <code>WebSocketClient.sendRefreshStatusMessage()</code> to update connected VS Code clients.</li> </ul>"},{"location":"hardis/work/new/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-dev-hub-v option undefined target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/work/new/#examples","title":"Examples","text":"<pre><code>$ sf hardis:work:new\n</code></pre>"},{"location":"hardis/work/refresh/","title":"refresh","text":""},{"location":"hardis/work/refresh/#hardisworkrefresh","title":"hardis:work:refresh","text":""},{"location":"hardis/work/refresh/#description","title":"Description","text":""},{"location":"hardis/work/refresh/#command-behavior","title":"Command Behavior","text":"<p>Refreshes your local Git branch and Salesforce org with the latest content from another Git branch.</p> <p>This command is designed to help developers keep their local development environment synchronized with changes made by other team members. It automates the process of pulling updates from a designated branch, merging them into your current working branch, and then pushing those changes to your scratch org or source-tracked sandbox.</p> <p>Key functionalities:</p> <ul> <li>Pre-Merge Check: Prompts the user to confirm that they have saved their current work before proceeding with the merge, preventing accidental data loss.</li> <li>Branch Selection: Allows you to select a target Git branch (e.g., <code>integration</code>, <code>preprod</code>) from which to pull updates.</li> <li>Git Operations: Performs a series of Git operations:<ul> <li>Pulls the latest version of the selected merge branch.</li> <li>Stashes your uncommitted local changes before merging.</li> <li>Merges the selected branch into your current local branch.</li> <li>Handles merge conflicts interactively, prompting the user to resolve them.</li> <li>Restores your stashed changes after the merge.</li> </ul> </li> <li>Org Synchronization: Pushes the updated local branch content to your scratch org or source-tracked sandbox, ensuring your org reflects the latest merged code.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Configuration Loading: It retrieves project configurations using <code>getConfig</code> to determine the default development branch.</li> <li>Git Integration: Extensively uses <code>simple-git</code> (<code>git()</code>) for various Git operations:<ul> <li><code>git().branch()</code>: Lists local and remote branches.</li> <li><code>git().stash()</code>: Saves and restores uncommitted changes.</li> <li><code>git().fetch()</code>: Fetches updates from remote repositories.</li> <li><code>git().checkout()</code>: Switches between branches.</li> <li><code>git().pull()</code>: Pulls changes from a remote branch.</li> <li><code>git().merge()</code>: Merges one branch into another, handling conflicts.</li> </ul> </li> <li>Interactive Prompts: Uses the <code>prompts</code> library to guide the user through confirmations (e.g., saving work) and branch selection.</li> <li>Salesforce CLI Integration: It uses <code>forceSourcePull</code> to pull changes from the scratch org and <code>forceSourcePush</code> to push changes to the scratch org.</li> <li>Error Handling: Includes robust error handling for Git operations (e.g., merge conflicts) and provides guidance to the user for resolution.</li> <li>Environment Variable Check: Checks for an <code>EXPERIMENTAL</code> environment variable to gate access to this command, indicating it might not be fully stable.</li> </ul>"},{"location":"hardis/work/refresh/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. nopull-n boolean No scratch pull before save (careful if you use that!) skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/work/refresh/#examples","title":"Examples","text":"<pre><code>$ sf hardis:work:refresh\n</code></pre>"},{"location":"hardis/work/resetselection/","title":"resetselection","text":""},{"location":"hardis/work/resetselection/#hardisworkresetselection","title":"hardis:work:resetselection","text":""},{"location":"hardis/work/resetselection/#description","title":"Description","text":""},{"location":"hardis/work/resetselection/#command-behavior","title":"Command Behavior","text":"<p>Resets the local Git repository to allow for a new selection of files to be included in a merge request.</p> <p>This command is designed to be used when you need to re-evaluate which changes should be part of your next merge request. It performs a soft Git reset, effectively unstaging all committed changes since the last merge with the target branch, and then cleans up any generated files.</p> <p>Key functionalities:</p> <ul> <li>Target Branch Selection: Prompts you to select the target branch of your current or future merge request.</li> <li>Soft Git Reset: Performs a <code>git reset --soft</code> operation to uncommit changes, moving the HEAD pointer back but keeping the changes in your working directory.</li> <li>Generated File Cleanup: Resets and checks out <code>manifest/package.xml</code> and <code>manifest/destructiveChanges.xml</code> to their state before the reset, ensuring a clean slate for new selections.</li> <li>Force Push Authorization: Sets a flag in your user configuration (<code>canForcePush: true</code>) to allow a force push in the subsequent <code>hardis:work:save</code> command, as the history will have been rewritten.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Git Integration: Uses <code>simple-git</code> (<code>git()</code>) to interact with the Git repository:<ul> <li><code>git().branch()</code>: Retrieves information about local and remote branches.</li> <li><code>git().log()</code>: Fetches the commit history to determine which commits to reset.</li> <li><code>git().reset()</code>: Performs the soft reset operation.</li> <li><code>git().checkout()</code>: Resets specific files (<code>package.xml</code>, <code>destructiveChanges.xml</code>) to their previous state.</li> <li><code>git().status()</code>: Displays the current status of the Git repository after the reset.</li> </ul> </li> <li>Interactive Prompts: Uses the <code>prompts</code> library to confirm the reset operation with the user and to select the target branch.</li> <li>Configuration Management: Updates the user's configuration (<code>.sfdx-hardis.yml</code>) using <code>setConfig</code> to set the <code>canForcePush</code> flag.</li> <li>Error Handling: Includes a check to prevent resetting protected branches.</li> </ul>"},{"location":"hardis/work/resetselection/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required target-org-o option undefined websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/work/resetselection/#examples","title":"Examples","text":"<pre><code>$ sf hardis:work:resetsave\n</code></pre>"},{"location":"hardis/work/save/","title":"save","text":""},{"location":"hardis/work/save/#hardisworksave","title":"hardis:work:save","text":""},{"location":"hardis/work/save/#description","title":"Description","text":""},{"location":"hardis/work/save/#command-behavior","title":"Command Behavior","text":"<p>Guides the user through the process of saving their work, preparing it for a Merge Request (also named Pull Request), and pushing changes to the remote Git repository.</p> <p>This command automates several critical steps involved in finalizing a development User Story and integrating it into the main codebase. It ensures that your local changes are properly synchronized, cleaned, and committed before being pushed.</p> <p>Key functionalities include:</p> <ul> <li>Git Status Management: Ensures a clean Git working directory by handling ongoing merges and unstaging files.</li> <li>Org Synchronization (Optional): Prompts the user to pull the latest metadata updates from their scratch org or source-tracked sandbox, ensuring local files reflect the org's state.</li> <li>Package.xml Updates: Automatically generates <code>package.xml</code> and <code>destructiveChanges.xml</code> files based on the Git delta between your current branch and the target branch, reflecting added, modified, and deleted metadata.</li> <li>Automated Source Cleaning: Applies predefined cleaning operations to your local Salesforce sources, such as removing unwanted references, minimizing profiles, or cleaning XML files based on configurations in your <code>.sfdx-hardis.yml</code>.<ul> <li><code>autoCleanTypes</code>: A list of automated source cleanings, configurable via hardis:project:clean:references.</li> <li><code>autoRemoveUserPermissions</code>: A list of user permissions to automatically remove from profile metadata.</li> </ul> </li> <li>Deployment Plan Generation: Builds an automated deployment plan based on the updated <code>package.xml</code> and configured deployment splits.</li> <li>Commit and Push: Guides the user to commit the changes and push them to the remote Git repository, optionally handling force pushes if a branch reset occurred.</li> <li>Merge Request Guidance: Provides information and links to facilitate the creation of a merge request after the changes are pushed.</li> </ul> <p>Example <code>.sfdx-hardis.yml</code> configuration:</p> <pre><code>autoCleanTypes:\n  - checkPermissions\n  - destructivechanges\n  - datadotcom\n  - minimizeProfiles\n  - listViewsMine\nautoRemoveUserPermissions:\n  - EnableCommunityAppLauncher\n  - FieldServiceAccess\n  - OmnichannelInventorySync\n  - SendExternalEmailAvailable\n  - UseOmnichannelInventoryAPIs\n  - ViewDataLeakageEvents\n  - ViewMLModels\n  - ViewPlatformEvents\n  - WorkCalibrationUser\n</code></pre> <p>Advanced instructions are available in the Publish a User Story documentation.</p> Technical explanations <p>The command's technical implementation involves a series of orchestrated steps:</p> <ul> <li>Git Integration: Extensively uses the <code>git</code> utility for status checks, adding files, committing, and pushing. It also leverages <code>sfdx-git-delta</code> for generating metadata differences between Git revisions.</li> <li>Interactive Prompts: Employs the <code>prompts</code> library to interact with the user for decisions like pulling sources or pushing commits.</li> <li>Configuration Management: Reads and updates project and user configurations using <code>getConfig</code> and <code>setConfig</code> to store preferences and deployment plans.</li> <li>Metadata Synchronization: Calls <code>forceSourcePull</code> to retrieve metadata from the org and <code>callSfdxGitDelta</code> to generate <code>package.xml</code> and <code>destructiveChanges.xml</code> based on Git changes.</li> <li>XML Manipulation: Utilizes <code>appendPackageXmlFilesContent</code>, <code>removePackageXmlFilesContent</code>, <code>parseXmlFile</code>, and <code>writeXmlFile</code> for modifying <code>package.xml</code> and <code>destructiveChanges.xml</code> files.</li> <li>Automated Cleaning: Integrates with <code>CleanReferences.run</code> and <code>CleanXml.run</code> commands to perform automated cleaning operations on the Salesforce source files.</li> <li>Deployment Plan Building: Dynamically constructs a deployment plan by analyzing the <code>package.xml</code> content and applying configured deployment splits.</li> <li>WebSocket Communication: Uses <code>WebSocketClient.sendRefreshStatusMessage</code> to notify connected VS Code clients about status updates.</li> <li>External Tool Integration: Requires the <code>sfdx-git-delta</code> plugin to be installed for its core functionality.</li> </ul>"},{"location":"hardis/work/save/#parameters","title":"Parameters","text":"Name Type Description Default Required Options auto boolean No user prompts (when called from CI for example) debug-d boolean Activate debug mode (more logs) flags-dir option undefined json boolean Format output as json. noclean-c boolean No cleaning of local sources nogit-g boolean No automated git operations nopull-n boolean No scratch pull before save skipauth boolean Skip authentication check when a default username is required target-org-o option undefined targetbranch option Name of the Merge Request target branch. Will be guessed or prompted if not provided. websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/work/save/#examples","title":"Examples","text":"<pre><code>$ sf hardis:work:task:save\n</code></pre> <pre><code>$ sf hardis:work:task:save --nopull --nogit --noclean\n</code></pre>"},{"location":"hardis/work/ws/","title":"ws","text":""},{"location":"hardis/work/ws/#hardisworkws","title":"hardis:work:ws","text":""},{"location":"hardis/work/ws/#description","title":"Description","text":""},{"location":"hardis/work/ws/#command-behavior","title":"Command Behavior","text":"<p>Performs technical operations related to WebSocket communication, primarily for internal use by the sfdx-hardis VS Code extension.</p> <p>This command is not intended for direct end-user interaction. It facilitates communication between the sfdx-hardis CLI and the VS Code Extension, enabling features like real-time status updates and plugin refreshes.</p> <p>Key functionalities:</p> <ul> <li>Refresh Status (<code>--event refreshStatus</code>): Sends a message to the VS Code Extension to refresh its displayed status, ensuring that the UI reflects the latest state of Salesforce orgs or project activities.</li> <li>Refresh Plugins (<code>--event refreshPlugins</code>): Sends a message to the VS Code Extension to refresh its loaded plugins, useful after installing or updating sfdx-hardis or other related extensions.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>WebSocketClient: It utilizes the <code>WebSocketClient</code> utility to establish and manage WebSocket connections.</li> <li>Event-Driven Communication: It listens for specific events (e.g., <code>refreshStatus</code>, <code>refreshPlugins</code>) and triggers corresponding actions on the connected WebSocket client.</li> <li>Internal Use: This command is primarily called programmatically by the VS Code Extension to maintain synchronization and provide a seamless user experience.</li> </ul>"},{"location":"hardis/work/ws/#parameters","title":"Parameters","text":"Name Type Description Default Required Options debug-d boolean Activate debug mode (more logs) event-e option WebSocket event flags-dir option undefined json boolean Format output as json. skipauth boolean Skip authentication check when a default username is required websocket option Websocket host:port for VsCode SFDX Hardis UI integration"},{"location":"hardis/work/ws/#examples","title":"Examples","text":"<pre><code>$ sf hardis:work:ws --event refreshStatus\n</code></pre>"},{"location":"hello/world/","title":"world","text":""},{"location":"hello/world/#helloworld","title":"hello:world","text":""},{"location":"hello/world/#description","title":"Description","text":""},{"location":"hello/world/#command-behavior","title":"Command Behavior","text":"<p>Says hello to the world or a specified person.</p> <p>This is a simple command used for demonstration purposes. It outputs a greeting message to the console.</p> <p>Key functionalities:</p> <ul> <li>Customizable Greeting: You can specify a name using the <code>--name</code> flag to personalize the greeting.</li> <li>Timestamp: The greeting includes the current date.</li> </ul> Technical explanations <p>The command's technical implementation involves:</p> <ul> <li>Flag Parsing: It parses the <code>--name</code> flag to get the recipient of the greeting.</li> <li>Date Retrieval: It gets the current date using <code>new Date().toDateString()</code>.</li> <li>Console Output: It constructs the greeting message using the provided name and the current date, and then logs it to the console using <code>this.log()</code>.</li> </ul>"},{"location":"hello/world/#parameters","title":"Parameters","text":"Name Type Description Default Required Options flags-dir option undefined json boolean Format output as json. name-n option This person can be anyone in the world! World"},{"location":"hello/world/#examples","title":"Examples","text":"<pre><code>Say hello to the world:\n&lt;%= config.bin %&gt; &lt;%= command.id %&gt;\n</code></pre> <pre><code>Say hello to someone you know:\n&lt;%= config.bin %&gt; &lt;%= command.id %&gt; --name Astro\n</code></pre>"},{"location":"prompt-templates/PROMPT_COMPLETE_OBJECT_ATTRIBUTES_MD/","title":"PROMPT_COMPLETE_OBJECT_ATTRIBUTES_MD","text":""},{"location":"prompt-templates/PROMPT_COMPLETE_OBJECT_ATTRIBUTES_MD/#prompt_complete_object_attributes_md","title":"PROMPT_COMPLETE_OBJECT_ATTRIBUTES_MD","text":""},{"location":"prompt-templates/PROMPT_COMPLETE_OBJECT_ATTRIBUTES_MD/#variables","title":"Variables","text":"Name Description Example OBJECT_NAME The API name of the Salesforce object whose fields and validation rules are being described. <code>Account</code> MARKDOWN The markdown table containing the fields and validation rules to be reviewed and refined. <code>\\| Field \\| Label \\| Description \\| ... \\|&lt;br&gt;\\|-------\\|-------\\|-------------\\| ... \\|</code>"},{"location":"prompt-templates/PROMPT_COMPLETE_OBJECT_ATTRIBUTES_MD/#prompt","title":"Prompt","text":"<pre><code>You are a skilled Business Analyst working on a Salesforce project. Your task is to review and refine the fields and validation rules of the Salesforce object \"{{OBJECT_NAME}}\" and describe them in plain English. The goal is to create a detailed, user-friendly explanation of each field and validation rule that a non-technical business user can easily understand.  {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n## Instructions:\n1. **Enhancing Fields Descriptions**:\n   - If an field's description is missing, generate a meaningful description using the context provided by the other column values (e.g., name, data type, or usage).\n   - If a field description already exists, improve its clarity and comprehensiveness by incorporating insights from the other column values.\n   - If an attribute's label is missing, generate a meaningful label using the context provided by the other column values.\n\n2. **Enhancing Validation Rules Descriptions**:\n   - If an field's description is missing, generate a meaningful description using the context provided by the other column values (especially formula column).\n   - If a validation rule description already exists, improve its clarity and comprehensiveness by incorporating insights from the other column values (especially formula column).\n   - If an validation rule label is missing, generate a meaningful label using the context provided by the other column values.\n\n3. **Output Format**:\n   - Return the updated descriptions in the **Markdown tables** format provided below.\n   - Ensure the tables aligns with Markdown syntax conventions for proper rendering.\n\n4. **Tone and Style**:\n   - Use plain English suitable for business users with minimal technical jargon.\n   - Focus on clarity, completeness, and practical usage examples if applicable.\n\n5. **Output Requirements**:\n   - Respond **only in Markdown** format.\n   - Do not include any additional text or commentary outside of the Markdown.\n\n## Reference Data:\n- Use the following markdown as the basis for your updates:\n  {{MARKDOWN}}\n\n## Additional Guidance:\n- **Consistency**: Maintain consistent formatting and ensure the descriptions are cohesive across all attributes.\n- **Use Examples**: When applicable, include simple examples to illustrate the attribute's purpose or use case.\n</code></pre>"},{"location":"prompt-templates/PROMPT_COMPLETE_OBJECT_ATTRIBUTES_MD/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_COMPLETE_OBJECT_ATTRIBUTES_MD.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_APEX/","title":"PROMPT_DESCRIBE_APEX","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_APEX/#prompt_describe_apex","title":"PROMPT_DESCRIBE_APEX","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_APEX/#variables","title":"Variables","text":"Name Description Example CLASS_NAME The name of the Salesforce Apex class to describe. <code>MyCustomController</code> APEX_CODE The full source code of the Apex class. <code>public class MyCustomController { ... }</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_APEX/#prompt","title":"Prompt","text":"<pre><code>You are a developer working on a Salesforce project. Your goal is to summarize the behavior of the Salesforce Apex class \"{{CLASS_NAME}}\" in plain English, providing a detailed explanation suitable for a business user. {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the role of the apex class.\n    - List the key functionalities and business logic implemented in the class.\n\n2. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The code for Apex class \"{{CLASS_NAME}}\" is:\n{{APEX_CODE}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_APEX/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_APEX.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_APPROVAL_PROCESS/","title":"PROMPT_DESCRIBE_APPROVAL_PROCESS","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_APPROVAL_PROCESS/#prompt_describe_approval_process","title":"PROMPT_DESCRIBE_APPROVAL_PROCESS","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_APPROVAL_PROCESS/#variables","title":"Variables","text":"Name Description Example APPROVALPROCESS_NAME The name of the Salesforce Approval Process to describe. <code>Opportunity_Approval</code> APPROVALPROCESS_XML The XML metadata for the Salesforce Approval Process. <code>&lt;ApprovalProcess&gt;...&lt;/ApprovalProcess&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_APPROVAL_PROCESS/#prompt","title":"Prompt","text":"<pre><code>You are a skilled business analyst working on a Salesforce project. Your goal is to explain the what is the Salesforce Approval Process \"{{APPROVALPROCESS_NAME}}\" about in plain English, provide a detailed explanation suitable for a business user. {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the purpose of the approval process.\n    - List the key functionalities and business logic implemented in the approval process.\n\n2. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The metadata XML for Approval Process \"{{APPROVALPROCESS_NAME}}\" is:\n{{APPROVALPROCESS_XML}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_APPROVAL_PROCESS/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_APPROVAL_PROCESS.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_ASSIGNMENT_RULES/","title":"PROMPT_DESCRIBE_ASSIGNMENT_RULES","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_ASSIGNMENT_RULES/#prompt_describe_assignment_rules","title":"PROMPT_DESCRIBE_ASSIGNMENT_RULES","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_ASSIGNMENT_RULES/#variables","title":"Variables","text":"Name Description Example ASSIGNMENTRULES_NAME The name of the Salesforce Assignment Rules to describe. <code>Case_Assignment_Rules</code> ASSIGNMENTRULES_XML The XML metadata for the Salesforce Assignment Rules. <code>&lt;AssignmentRules&gt;...&lt;/AssignmentRules&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_ASSIGNMENT_RULES/#prompt","title":"Prompt","text":"<pre><code>You are a skilled business analyst working on a Salesforce project. Your goal is to summarize the content and behavior of the Salesforce Assignment Rules \"{{ASSIGNMENTRULES_NAME}}\" in plain English, providing a detailed explanation suitable for a business user. {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by explaining the role of the Salesforce Assignment Rules that you can guess according to the content of the XML and the name.\n    Try to guess the role of users assigned to this assignment rule. Do not mention the email of assigned users, but you can mention type of assigned users.\n    Based by Criteria items, explain what should so the record will be assigned.\n    - Analyze all the assignment rules for objects and in the description tell what are the aim of those rules. What is the role of the object in the system, based by the assignment rules.\n\n2. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The metadata XML for Salesforce Assignment Rule \"{{ASSIGNMENTRULES_NAME}}\" is:\n{{ASSIGNMENTRULES_XML}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_ASSIGNMENT_RULES/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_ASSIGNMENT_RULES.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_AUTORESPONSE_RULES/","title":"PROMPT_DESCRIBE_AUTORESPONSE_RULES","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_AUTORESPONSE_RULES/#prompt_describe_autoresponse_rules","title":"PROMPT_DESCRIBE_AUTORESPONSE_RULES","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_AUTORESPONSE_RULES/#variables","title":"Variables","text":"Name Description Example AUTORESPONSERULES_NAME The name of the Salesforce AutoResponse Rules to describe. <code>Case_AutoResponse_Rules</code> AUTORESPONSERULES_XML The XML metadata for the Salesforce AutoResponse Rules. <code>&lt;AutoResponseRules&gt;...&lt;/AutoResponseRules&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_AUTORESPONSE_RULES/#prompt","title":"Prompt","text":"<pre><code>You are a skilled business analyst working on a Salesforce project. Your goal is to summarize the content and behavior of the Salesforce AutoResponse Rules \"{{AUTORESPONSERULES_NAME}}\" in plain English, providing a detailed explanation suitable for a business user. {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by explaining the role of the Salesforce AutoResponse Rules that you can guess according to the content of the XML and the name.\n    Try to guess the role of users assigned to this AutoResponse rule. Do not mention the email of assigned users, but you can mention type of assigned users.\n    - Analyze all the AutoResponse rules for objects and in the description tell what are the aim of those rules. What is the role of the object in the system, based by the AutoResponse rules.\n    - Based by Criteria items, explain what would be the response to the user, if the criteria are met.\n\n2. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The metadata XML for Salesforce AutoResponse Rule \"{{AUTORESPONSERULES_NAME}}\" is:\n{{AUTORESPONSERULES_XML}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_AUTORESPONSE_RULES/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_AUTORESPONSE_RULES.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_ESCALATION_RULES/","title":"PROMPT_DESCRIBE_ESCALATION_RULES","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_ESCALATION_RULES/#prompt_describe_escalation_rules","title":"PROMPT_DESCRIBE_ESCALATION_RULES","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_ESCALATION_RULES/#variables","title":"Variables","text":"Name Description Example ESCALATIONRULES_NAME The name of the Salesforce Escalation Rule to describe. <code>Case_Escalation_Rule</code> ESCALATIONRULES_XML The XML metadata for the Salesforce Escalation Rule. <code>&lt;EscalationRules&gt;...&lt;/EscalationRules&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_ESCALATION_RULES/#prompt","title":"Prompt","text":"<pre><code>You are a skilled business analyst working on a Salesforce project. Your goal is to explain the what is the Salesforce Escalation Rule \"{{ESCALATIONRULES_NAME}}\" about in plain English, provide a detailed explanation suitable for a business user. {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the purpose of the escalation rule.\n    - List the key functionalities and business logic implemented in the escalation rule.\n\n2. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The metadata XML for Escalation Rule \"{{ESCALATIONRULES_NAME}}\" is:\n{{ESCALATIONRULES_XML}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_ESCALATION_RULES/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_ESCALATION_RULES.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_FLOW/","title":"PROMPT_DESCRIBE_FLOW","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_FLOW/#prompt_describe_flow","title":"PROMPT_DESCRIBE_FLOW","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_FLOW/#variables","title":"Variables","text":"Name Description Example FLOW_XML The XML definition of the Salesforce Flow to describe. <code>&lt;Flow&gt;...&lt;/Flow&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_FLOW/#prompt","title":"Prompt","text":"<pre><code>You are a business analyst working on a Salesforce project. Your goal is to describe the Salesforce Flow in plain English, providing a detailed explanation suitable for a business user. {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the purpose and business context of the flow.\n    - Explain what business process or automation this flow supports.\n\n2. **Step-by-Step Description**:\n    - Describe the main steps, decisions, and actions in the flow.\n    - Use plain English and avoid technical jargon when possible.\n    - If there are sub-flows or important conditions, mention them clearly.\n\n3. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The flow XML is:\n{{FLOW_XML}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_FLOW/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_FLOW.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_FLOW_DIFF/","title":"PROMPT_DESCRIBE_FLOW_DIFF","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_FLOW_DIFF/#prompt_describe_flow_diff","title":"PROMPT_DESCRIBE_FLOW_DIFF","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_FLOW_DIFF/#variables","title":"Variables","text":"Name Description Example FLOW_XML_NEW The XML definition of the new version of the Salesforce Flow. <code>&lt;Flow&gt;...&lt;/Flow&gt;</code> FLOW_XML_PREVIOUS The XML definition of the previous version of the Salesforce Flow. <code>&lt;Flow&gt;...&lt;/Flow&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_FLOW_DIFF/#prompt","title":"Prompt","text":"<pre><code>You are a business analyst working on a Salesforce project. Your goal is to describe the differences between the new and previous versions of a Salesforce Flow in plain English, providing a detailed explanation suitable for a business user.  {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the purpose of the flow and the context for the changes.\n    - Explain why a new version was created if possible.\n\n2. **Describe the Differences**:\n    - List and explain the key changes between the new and previous versions.\n    - Ignore tags related to location attributes (locationX and locationY) or positions: do not mention them in your response.\n    - Ignore nodes and elements that have not changed: do not mention them in your response.\n    - Ignore connector changes: do not mention them in your response.\n    - Use plain English and avoid technical jargon when possible.\n\n{{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The new version flow XML is:\n{{FLOW_XML_NEW}}\n\n- The previous version flow XML is:\n{{FLOW_XML_PREVIOUS}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_FLOW_DIFF/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_FLOW_DIFF.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_LWC/","title":"PROMPT_DESCRIBE_LWC","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_LWC/#prompt_describe_lwc","title":"PROMPT_DESCRIBE_LWC","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_LWC/#variables","title":"Variables","text":"Name Description Example LWC_NAME The name of the Lightning Web Component to describe. <code>myCustomComponent</code> LWC_JS_CODE The JavaScript code of the Lightning Web Component. <code>import { LightningElement } from 'lwc'; ...</code> LWC_HTML_CODE The HTML template code of the Lightning Web Component. <code>&lt;template&gt;...&lt;/template&gt;</code> LWC_JS_META The meta configuration file for the Lightning Web Component. <code>&lt;LightningComponentBundle&gt;...&lt;/LightningComponentBundle&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_LWC/#prompt","title":"Prompt","text":"<pre><code>You are a skilled Salesforce developer working on a Lightning Web Components (LWC) project. Your goal is to explain the Salesforce Lightning Web Component \"{{LWC_NAME}}\" in plain English, providing a detailed explanation suitable for other developers and business users.  {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the purpose and functionality of the Lightning Web Component.\n    - Describe the key features and capabilities it provides to users.\n    - Explain how it interacts with Salesforce data or other components.\n\n2. **Technical Analysis**:\n    - Describe the main JavaScript methods and their purposes.\n    - Explain how the component handles data binding and events.\n    - Mention any wire services, apex methods, or external services the component uses.\n    - Identify any custom properties or special configurations.\n\n{{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The HTML template for component \"{{LWC_NAME}}\":\n</code></pre> {{LWC_HTML_CODE}} <pre><code>- The JavaScript controller for component \"{{LWC_NAME}}\":\n</code></pre> {{LWC_JS_CODE}} <pre><code>- The metadata configuration for component \"{{LWC_NAME}}\":\n</code></pre> {{LWC_JS_META}} <pre><code>{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_LWC/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_LWC.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_OBJECT/","title":"PROMPT_DESCRIBE_OBJECT","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_OBJECT/#prompt_describe_object","title":"PROMPT_DESCRIBE_OBJECT","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_OBJECT/#variables","title":"Variables","text":"Name Description Example OBJECT_NAME The API name of the Salesforce object to describe. <code>Account</code> OBJECT_XML The XML metadata definition of the Salesforce object. <code>&lt;CustomObject&gt;...&lt;/CustomObject&gt;</code> ALL_OBJECTS_LIST A list of all objects in the Salesforce org. <code>Account, Contact, Opportunity, ...</code> ALL_OBJECT_LINKS The object model (MasterDetail and Lookup relationships) for all objects. <code>Account-&gt;Contact (Lookup), Opportunity-&gt;Account (MasterDetail)</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_OBJECT/#prompt","title":"Prompt","text":"<pre><code>You are a business analyst working on a Salesforce project. Your goal is to describe the Salesforce object \"{{OBJECT_NAME}}\" in plain English, providing a detailed explanation suitable for a business user.  {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the role and purpose of the object \"{{OBJECT_NAME}}\" in the Salesforce org.\n    - Explain its significance in the project, its purpose in the org's implementation, and any key business processes it supports.\n\n2. **Relationships**:\n    - Use the provided object model data to describe how \"{{OBJECT_NAME}}\" relates to other objects.\n    - Include:\n        - Direct relationships (MasterDetail and Lookup fields on the object).\n        - Inverse relationships (other objects referencing \"{{OBJECT_NAME}}\").\n        - Highlight any key dependencies or implications of these relationships in plain English.\n\n3. **Additional Guidance**:\n    - **Do NOT include** fields table or validation rules table in the response\n    - Use the acronyms provided to interpret metadata names (e.g., TR: Trigger, VR: Validation Rule, WF: Workflow).\n    - If the XML metadata contains sensitive information (e.g., tokens, passwords), replace them with a placeholder (e.g., `[REDACTED]`).\n\n4. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The list of all objects in the Salesforce org is: {{ALL_OBJECTS_LIST}}\n\n- The object model (MasterDetail and Lookup relationships) is: {{ALL_OBJECT_LINKS}}\n\n- The metadata XML for \"{{OBJECT_NAME}}\" is:\n{{OBJECT_XML}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_OBJECT/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_OBJECT.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PACKAGE/","title":"PROMPT_DESCRIBE_PACKAGE","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_PACKAGE/#prompt_describe_package","title":"PROMPT_DESCRIBE_PACKAGE","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_PACKAGE/#variables","title":"Variables","text":"Name Description Example PACKAGE_NAME The name of the package to describe. <code>Pardot</code> PACKAGE_XML The JsonL metadata for the package <code>{\"SubscriberPackageName\":\"Pardot\",\"SubscriberPackageNamespace\":\"pi\",\"SubscriberPackageVersionNumber\":\"1.0.0\",\"SubscriberPackageVersionId\":\"04t1t0000000abcAAA\",\"SubscriberPackageVersionName\":\"Pardot Version 1.0\"}</code> PACKAGE_METADATAS A list of all metadata items (Apex classes, objects, flows, etc.) in the org that are provided by this package (namespaced). <code>ApexClass: pi__MyClass, CustomObject: pi__MyObject, Flow: pi__MyFlow</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PACKAGE/#prompt","title":"Prompt","text":"<pre><code>You are a skilled business analyst working on a Salesforce project. Your goal is to summarize the content and behavior of the Salesforce Installed package \"{{PACKAGE_NAME}}\" in plain English, providing a detailed explanation suitable for a business user. {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Browse the internet using Google to find the package's official documentation and provide an overview of its purpose and capabilities, with links to the documentation.\n      - If you found the package's official documentation, summarize its key features and functionalities.\n      - If you can not find the package's official documentation, provide a general overview based on the package attributes and its metadata components (but do not output the list of metadatas, it will be for paragraph 2).\n    - Include any relevant information about the package's intended use cases or target audience.\n    - If you can find other relevant information about the package, like articles or blog posts, in english or in the prompt reply language, provide them as a list of links\n      - If you find the AppExchange page, include it in your response. Otherwise, don't mention it.\n      - If you find the package's GitHub repository, include it in your response. Otherwise, don't mention it.\n      - If you find the vendor information, include it in your response. Otherwise, don't mention it.\n      - Make sure that hyperlinks are not dead links leading to 404 pages.\n\n2. **Package Metadata**:\n    - Review the list of metadata items (Apex classes, objects, flows, etc.) provided by this package, as listed in reference data.\n    - Highlight the most important or business-relevant components.\n\n3. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The attributes for Installed package \"{{PACKAGE_NAME}}\" are:\n{{PACKAGE_XML}}\n\n- The list of metadata items provided by this package is:\n{{PACKAGE_METADATAS}}\n\n- Many Salesforce managed packages are published by third-party vendors. You can find the package's vendor information in the Salesforce AppExchange (https://appexchange.salesforce.com/).\n\n- There are also many open-source packages available on GitHub (github.com)\n\n- Other relevant sources for articles or blog posts about the package may include the vendor's website, community forums, or Salesforce-related blogs, like Salesforce Ben or medium.com. Do not mention these source if you don't have a direct link to a page explicitly related to package \"{{PACKAGE_NAME}}\".\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PACKAGE/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_PACKAGE.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PAGE/","title":"PROMPT_DESCRIBE_PAGE","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_PAGE/#prompt_describe_page","title":"PROMPT_DESCRIBE_PAGE","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_PAGE/#variables","title":"Variables","text":"Name Description Example PAGE_NAME The name of the Salesforce Lightning Page to describe. <code>Account_Record_Page</code> PAGE_XML The XML metadata for the Lightning Page. <code>&lt;FlexiPage&gt;...&lt;/FlexiPage&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PAGE/#prompt","title":"Prompt","text":"<pre><code>You are a skilled business analyst working on a Salesforce project. Your goal is to summarize the content and behavior of the Salesforce Lightning Page \"{{PAGE_NAME}}\" in plain English, providing a detailed explanation suitable for a business user.  {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the role of the lightning page.\n    - List the key tabs, sections, views, related lists and actions described in the lightning page.\n\n2. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The metadata XML for Lightning page \"{{PAGE_NAME}}\" is:\n{{PAGE_XML}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PAGE/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_PAGE.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET/","title":"PROMPT_DESCRIBE_PERMISSION_SET","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET/#prompt_describe_permission_set","title":"PROMPT_DESCRIBE_PERMISSION_SET","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET/#variables","title":"Variables","text":"Name Description Example PERMISSIONSET_NAME The name of the Salesforce Permission Set to describe. <code>PS_CloudityAccount</code> PERMISSIONSET_XML The XML metadata for the Salesforce Permission Set. <code>&lt;PermissionSet&gt;...&lt;/PermissionSet&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET/#prompt","title":"Prompt","text":"<pre><code>You are a skilled business analyst working on a Salesforce project. Your goal is to summarize the content and behavior of the Salesforce PermissionSet \"{{PERMISSIONSET_NAME}}\" in plain English, providing a detailed explanation suitable for a business user. {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the role of the Salesforce PermissionSet that you can guess according to the content of the XML. Try to guess the role of users assigned to this permission set according to applicationVisibilities, objectVisibilities and userPermissions.\n    - List the key features of the Permission Set.\n      - The most important features are License, Applications, User Permissions ,features with default values ,Custom Objects and Record Types\n      - Ignore Apex classes and Custom Fields\n      - Ignore blocks who has access or visibility set to \"false\"\n\n2. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The metadata XML for Salesforce Permission Set \"{{PERMISSIONSET_NAME}}\" is:\n{{PERMISSIONSET_XML}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET_GROUP/","title":"PROMPT_DESCRIBE_PERMISSION_SET_GROUP","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET_GROUP/#prompt_describe_permission_set_group","title":"PROMPT_DESCRIBE_PERMISSION_SET_GROUP","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET_GROUP/#variables","title":"Variables","text":"Name Description Example PERMISSIONSETGROUP_NAME The name of the Salesforce Permission Set Group to describe. <code>PS_CloudityAdmin</code> PERMISSIONSETGROUP_XML The XML metadata for the Salesforce Permission Set Group. <code>&lt;PermissionSetGroup&gt;...&lt;/PermissionSetGroup&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET_GROUP/#prompt","title":"Prompt","text":"<pre><code>You are a skilled business analyst working on a Salesforce project. Your goal is to summarize the content and behavior of the Salesforce PermissionSetGroup \"{{PERMISSIONSETGROUP_NAME}}\" in plain English, providing a detailed explanation suitable for a business user. {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the role of the Salesforce PermissionSetGroup that you can guess according to the content of the XML. Try to guess the role of users assigned to this permission set group according to the name, description and related Permission Sets\n    - List the key features of the Permission Set.\n\n2. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The metadata XML for Salesforce Permission Set Group \"{{PERMISSIONSETGROUP_NAME}}\" is:\n{{PERMISSIONSETGROUP_XML}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET_GROUP/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_PERMISSION_SET_GROUP.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PROFILE/","title":"PROMPT_DESCRIBE_PROFILE","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_PROFILE/#prompt_describe_profile","title":"PROMPT_DESCRIBE_PROFILE","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_PROFILE/#variables","title":"Variables","text":"Name Description Example PROFILE_NAME The name of the Salesforce Profile to describe. <code>Cloudity Sales</code> PROFILE_XML The XML metadata for the Salesforce Profile. <code>&lt;Profile&gt;...&lt;/Profile&gt;</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PROFILE/#prompt","title":"Prompt","text":"<pre><code>You are a skilled business analyst working on a Salesforce project. Your goal is to summarize the content and behavior of the Salesforce Profile \"{{PROFILE_NAME}}\" in plain English, providing a detailed explanation suitable for a business user.  {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Begin by summarizing the role of the Salesforce Profile that you can guess according to the content of the XML. Try to guess the role of users assigned to this profile according to applicationVisibilities, objectVisibilities and userPermissions.\n    - List the key features of the Profiles.\n      - The most important features are License, Applications, User Permissions ,features with default values ,Custom Objects and Record Types\n      - Ignore Apex classes and Custom Fields\n      - Ignore blocks who has access or visibility set to \"false\"\n\n2. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The metadata XML for Salesforce Profile \"{{PROFILE_NAME}}\" is:\n{{PROFILE_XML}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_PROFILE/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_PROFILE.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_DESCRIBE_ROLES/","title":"PROMPT_DESCRIBE_ROLES","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_ROLES/#prompt_describe_roles","title":"PROMPT_DESCRIBE_ROLES","text":""},{"location":"prompt-templates/PROMPT_DESCRIBE_ROLES/#variables","title":"Variables","text":"Name Description Example ROLES_DESCRIPTION Description of all roles of the org <code>- **Role Name (id:role_api_name)**: Role description (parentId: parent_role_id)&lt;br&gt;- **Another Role (id:another_role_api_name)**: Another role description (parentId: another_parent_role_id)&lt;br&gt; - **Root Role (id:root_role_api_name)**: Root role description (parentId: ROOT)</code>"},{"location":"prompt-templates/PROMPT_DESCRIBE_ROLES/#prompt","title":"Prompt","text":"<pre><code>You are a skilled business analyst working on a Salesforce project. Your goal is to summarize the business organization of the company. {{VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC}}\n\n### Instructions:\n\n1. **Contextual Overview**:\n    - Analyze the provided role hierarchy data to understand the organizational structure.\n    - Identify key roles and their relationships within the hierarchy.\n    - Summarize the roles in a way that is clear and understandable for business stakeholders.\n    - Ensure the summary is concise yet comprehensive, highlighting the most important aspects of the role hierarchy.\n\n2. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The description of all role hierarchies is:\n{{ROLES_DESCRIPTION}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_DESCRIBE_ROLES/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_DESCRIBE_ROLES.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/PROMPT_SOLVE_DEPLOYMENT_ERROR/","title":"PROMPT_SOLVE_DEPLOYMENT_ERROR","text":""},{"location":"prompt-templates/PROMPT_SOLVE_DEPLOYMENT_ERROR/#prompt_solve_deployment_error","title":"PROMPT_SOLVE_DEPLOYMENT_ERROR","text":""},{"location":"prompt-templates/PROMPT_SOLVE_DEPLOYMENT_ERROR/#variables","title":"Variables","text":"Name Description Example ERROR The Salesforce deployment error message to analyze and solve. <code>Cannot deploy component: missing field 'X' on object 'Y'</code>"},{"location":"prompt-templates/PROMPT_SOLVE_DEPLOYMENT_ERROR/#prompt","title":"Prompt","text":"<pre><code>You are a Salesforce release manager using Salesforce CLI commands to perform deployments. Your goal is to help solve the following Salesforce deployment error in a clear, actionable way for a technical user. \n\n### Instructions:\n\n1. **Error Analysis**:\n    - Analyze the error message and identify the root cause.\n    - If the error is ambiguous, suggest possible causes based on Salesforce deployment best practices.\n\n2. **Solution Proposal**:\n    - Provide a step-by-step solution to resolve the error.\n    - If applicable, include the correct sfdx source format or XML example.\n    - Do not include instructions on how to retrieve or deploy the changes with Salesforce CLI.\n\n3. {{VARIABLE_FORMATTING_REQUIREMENTS}}\n\n### Reference Data:\n\n- The deployment error returned by Salesforce CLI is:\n{{ERROR}}\n\n{{VARIABLE_ADDITIONAL_INSTRUCTIONS}}\n</code></pre>"},{"location":"prompt-templates/PROMPT_SOLVE_DEPLOYMENT_ERROR/#how-to-override","title":"How to override","text":"<p>To define your own prompt text, you can define a local file config/prompt-templates/PROMPT_SOLVE_DEPLOYMENT_ERROR.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override template files at once.</p> <p>If you do so, please don't forget to use the replacement variables :)</p>"},{"location":"prompt-templates/VARIABLE_ADDITIONAL_INSTRUCTIONS/","title":"VARIABLE_ADDITIONAL_INSTRUCTIONS","text":""},{"location":"prompt-templates/VARIABLE_ADDITIONAL_INSTRUCTIONS/#variable_additional_instructions","title":"VARIABLE_ADDITIONAL_INSTRUCTIONS","text":""},{"location":"prompt-templates/VARIABLE_ADDITIONAL_INSTRUCTIONS/#description","title":"Description","text":"<p>This is a reusable prompt variable that provides common instructions across multiple prompt templates.</p>"},{"location":"prompt-templates/VARIABLE_ADDITIONAL_INSTRUCTIONS/#content","title":"Content","text":"<pre><code>### Additional Instructions\n\n- Caution: Redact any sensitive information (tokens, passwords, API keys, etc.) and replace with `[HIDDEN_SENSITIVE_INFOS]`.\n- Be as thorough as possible, and make your response clear, complete, and business-friendly.\n</code></pre>"},{"location":"prompt-templates/VARIABLE_ADDITIONAL_INSTRUCTIONS/#how-to-override","title":"How to override","text":"<p>To define your own variable content, you can define a local file config/prompt-templates/VARIABLE_ADDITIONAL_INSTRUCTIONS.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override variable files at once.</p>"},{"location":"prompt-templates/VARIABLE_FORMATTING_REQUIREMENTS/","title":"VARIABLE_FORMATTING_REQUIREMENTS","text":""},{"location":"prompt-templates/VARIABLE_FORMATTING_REQUIREMENTS/#variable_formatting_requirements","title":"VARIABLE_FORMATTING_REQUIREMENTS","text":""},{"location":"prompt-templates/VARIABLE_FORMATTING_REQUIREMENTS/#description","title":"Description","text":"<p>This is a reusable prompt variable that provides common instructions across multiple prompt templates.</p>"},{"location":"prompt-templates/VARIABLE_FORMATTING_REQUIREMENTS/#content","title":"Content","text":"<pre><code>**Formatting Requirements**:\n    - Use markdown formatting suitable for embedding in a level 2 header (`##`).\n    - Add new lines before starting bullet lists so mkdocs-material renders them correctly, including nested lists.\n    - Add new lines after a header title so mkdocs-material can display the content correctly.\n    - Never truncate any information in the response.\n    - Provide a concise summary before detailed sections for quick understanding.\n</code></pre>"},{"location":"prompt-templates/VARIABLE_FORMATTING_REQUIREMENTS/#how-to-override","title":"How to override","text":"<p>To define your own variable content, you can define a local file config/prompt-templates/VARIABLE_FORMATTING_REQUIREMENTS.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override variable files at once.</p>"},{"location":"prompt-templates/VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC/","title":"VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC","text":""},{"location":"prompt-templates/VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC/#variable_output_format_markdown_doc","title":"VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC","text":""},{"location":"prompt-templates/VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC/#description","title":"Description","text":"<p>This is a reusable prompt variable that provides common instructions across multiple prompt templates.</p>"},{"location":"prompt-templates/VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC/#content","title":"Content","text":"<pre><code>The output will be in markdown format, which will be used in a documentation site aiming to retrospectively document the Salesforce org.\n</code></pre>"},{"location":"prompt-templates/VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC/#how-to-override","title":"How to override","text":"<p>To define your own variable content, you can define a local file config/prompt-templates/VARIABLE_OUTPUT_FORMAT_MARKDOWN_DOC.txt</p> <p>You can also use the command <code>sf hardis:doc:override-prompts</code> to automatically create all override variable files at once.</p>"},{"location":"sf-deployment-assistant/A-sharing-rule-may-be-useless/","title":"A sharing rule may be useless (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/A-sharing-rule-may-be-useless/#a-sharing-rule-may-be-useless","title":"A sharing rule may be useless","text":""},{"location":"sf-deployment-assistant/A-sharing-rule-may-be-useless/#detection","title":"Detection","text":"<ul> <li>String: <code>Required field is missing: sharingCriteriaRules</code></li> </ul>"},{"location":"sf-deployment-assistant/A-sharing-rule-may-be-useless/#resolution","title":"Resolution","text":"<pre><code>Are you sure you need this sharing rule ? You may remove it from the sfdx project\n</code></pre>"},{"location":"sf-deployment-assistant/API-Version-error/","title":"API Version error (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/API-Version-error/#api-version-error","title":"API Version error","text":""},{"location":"sf-deployment-assistant/API-Version-error/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) The (.*) apiVersion can't be \"([0-9]+)\"</code></li> </ul>"},{"location":"sf-deployment-assistant/API-Version-error/#resolution","title":"Resolution","text":"<pre><code>{1} metadata has probably been created/updated in a sandbox already upgraded to next platform version (ex: Sandbox in Summer'23 and Production in Spring'23)\n- First, try to update the api version in the XML of {1} metadata file (decrement the number in &lt;apiVersion&gt;{3}.0&lt;/apiVersion&gt;)\n- If it still doesn't work because the metadata structure has changed between version, you may try a sf project:retrieve:start of the metadata by forcing --api-version at the end of the command.\n</code></pre>"},{"location":"sf-deployment-assistant/Allow-deployment-with-pending-Apex-Jobs/","title":"Allow deployment with pending Apex Jobs (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Allow-deployment-with-pending-Apex-Jobs/#allow-deployment-with-pending-apex-jobs","title":"Allow deployment with pending Apex Jobs","text":""},{"location":"sf-deployment-assistant/Allow-deployment-with-pending-Apex-Jobs/#detection","title":"Detection","text":"<ul> <li>String: <code>You can bypass this error by allowing deployments with Apex jobs in the Deployment Settings page in Setup.</code></li> </ul>"},{"location":"sf-deployment-assistant/Allow-deployment-with-pending-Apex-Jobs/#resolution","title":"Resolution","text":"<pre><code>Go to target org, in Setup -&gt; Deployment Settings -&gt; Activate option \"Allow deployments of components when corresponding Apex jobs are pending or in progress.\"\n</code></pre>"},{"location":"sf-deployment-assistant/Async-exception-in-test-class/","title":"Async exception in test class (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Async-exception-in-test-class/#async-exception-in-test-class","title":"Async exception in test class","text":""},{"location":"sf-deployment-assistant/Async-exception-in-test-class/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>System.AsyncException: (.*) Apex</code></li> </ul>"},{"location":"sf-deployment-assistant/Async-exception-in-test-class/#resolution","title":"Resolution","text":"<pre><code>This may be a test class implementation issue in {1}.\nPlease check https://developer.salesforce.com/forums/?id=9060G0000005kVLQAY\n</code></pre>"},{"location":"sf-deployment-assistant/CRM-Analytics--A-Recipe-must-specify-a-DataFlow/","title":"CRM Analytics: A Recipe must specify a DataFlow (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/CRM-Analytics--A-Recipe-must-specify-a-DataFlow/#crm-analytics-a-recipe-must-specify-a-dataflow","title":"CRM Analytics: A Recipe must specify a DataFlow","text":""},{"location":"sf-deployment-assistant/CRM-Analytics--A-Recipe-must-specify-a-DataFlow/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) A Recipe must specify a Dataflow</code></li> </ul>"},{"location":"sf-deployment-assistant/CRM-Analytics--A-Recipe-must-specify-a-DataFlow/#resolution","title":"Resolution","text":"<pre><code>You must include related WaveDataFlow {1} in sources (and probably in package.xml too).\nTo retrieve it, run: sf project retrieve start -m WaveDataFlow:{1} -u SOURCE_ORG_USERNAME\nYou can also retrieve all analytics sources in one shot using sf hardis:org:retrieve:source:analytics -u SOURCE_ORG_USERNAME\n  - https://salesforce.stackexchange.com/a/365453/33522\n  - https://help.salesforce.com/s/articleView?id=000319274&amp;type=1\n</code></pre>"},{"location":"sf-deployment-assistant/Campaign-can-not-be-updated/","title":"Campaign can not be updated","text":"<p>title: \"Campaign can not be updated (Deployment assistant)\" description: \"How to solve Salesforce deployment error \\\"The object \"Campaign\" can't be updated\\\"\"</p>"},{"location":"sf-deployment-assistant/Campaign-can-not-be-updated/#campaign-can-not-be-updated","title":"Campaign can not be updated","text":""},{"location":"sf-deployment-assistant/Campaign-can-not-be-updated/#detection","title":"Detection","text":"<ul> <li>String: <code>The object \"Campaign\" can't be updated</code></li> </ul>"},{"location":"sf-deployment-assistant/Campaign-can-not-be-updated/#resolution","title":"Resolution","text":"<pre><code>Add \"MarketingUser\" in project-scratch-def.json features\nIf it is already done, you may manually check \"MarketingUser\" field on the scratch org user\n</code></pre>"},{"location":"sf-deployment-assistant/Can-not-change-field-type-to-a-formula-field/","title":"Can not change field type to a formula field (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Can-not-change-field-type-to-a-formula-field/#can-not-change-field-type-to-a-formula-field","title":"Can not change field type to a formula field","text":""},{"location":"sf-deployment-assistant/Can-not-change-field-type-to-a-formula-field/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Cannot update a field from a Formula to something else</code></li> </ul>"},{"location":"sf-deployment-assistant/Can-not-change-field-type-to-a-formula-field/#resolution","title":"Resolution","text":"<pre><code>You need to manually delete or rename the field in the target org to allow the deployment to pass\n- First, try to manually delete field {1} in the target org\n- if you can't delete {1}, rename it into {1}_ToDel, then once the deployment done, delete {1}_ToDel\n</code></pre>"},{"location":"sf-deployment-assistant/Can-not-change-field-type-with-picklist/","title":"Can not change field type with picklist (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Can-not-change-field-type-with-picklist/#can-not-change-field-type-with-picklist","title":"Can not change field type with picklist","text":""},{"location":"sf-deployment-assistant/Can-not-change-field-type-with-picklist/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Cannot change which global value set this picklist uses</code></li> </ul>"},{"location":"sf-deployment-assistant/Can-not-change-field-type-with-picklist/#resolution","title":"Resolution","text":"<pre><code>You probably updated the type of field {1}, and Salesforce does not allows that with deployments. You can:\n- Try to manually change the type of {1} directly in target org, but it may not be technically possible\n- Delete field {1} in target org: it will be recreated after deployment (but you will loose data on existing records, so be careful if your target is a production org)\n- Create another field with desired type and manage data recovery if the target is a production org\n</code></pre>"},{"location":"sf-deployment-assistant/Can-not-change-type-due-to-existing-data/","title":"Can not change type due to existing data (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Can-not-change-type-due-to-existing-data/#can-not-change-type-due-to-existing-data","title":"Can not change type due to existing data","text":""},{"location":"sf-deployment-assistant/Can-not-change-type-due-to-existing-data/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Cannot change type due to existing data</code></li> </ul>"},{"location":"sf-deployment-assistant/Can-not-change-type-due-to-existing-data/#resolution","title":"Resolution","text":"<pre><code>It is usually not recommended to change types of fields, but if it's really necessary you can:\n- Manually change the type of {1} in the target org\n- If you can't manually change the type:\n  - you may modify the dependencies (Formulas, Flows...) using {1}, so they don't use this field\n  - you can also delete dependencies (Formulas, Flows...) using {1}, but make sure they are deployed again later\n- More help: https://help.salesforce.com/s/articleView?id=000327186&amp;type=1\n</code></pre>"},{"location":"sf-deployment-assistant/Can-not-delete-custom-field/","title":"Can not delete custom field (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Can-not-delete-custom-field/#can-not-delete-custom-field","title":"Can not delete custom field","text":""},{"location":"sf-deployment-assistant/Can-not-delete-custom-field/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>This (.*) is referenced elsewhere in salesforce.com</code></li> <li>RegExp: <code>Le champ personnalis\u00e9 (.*) est utilis\u00e9 dans (.*)</code></li> </ul>"},{"location":"sf-deployment-assistant/Can-not-delete-custom-field/#resolution","title":"Resolution","text":"<pre><code>Custom field {1} can not be deleted because it is used elsewhere. Remove its references ans try again\nTHIS MAY BE A FALSE POSITIVE if you are just testing the deployment, as destructiveChanges are deployed separately from updated items deployment check\n</code></pre>"},{"location":"sf-deployment-assistant/Can-not-delete-record-type/","title":"Can not delete record type (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Can-not-delete-record-type/#can-not-delete-record-type","title":"Can not delete record type","text":""},{"location":"sf-deployment-assistant/Can-not-delete-record-type/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Cannot delete record type through API</code></li> </ul>"},{"location":"sf-deployment-assistant/Can-not-delete-record-type/#resolution","title":"Resolution","text":"<pre><code>You need to manually delete record type {1} in target org\n- Edit record type {1}, uncheck \"Active\"\n- Delete record type {1}\n</code></pre>"},{"location":"sf-deployment-assistant/Can-not-find-folder/","title":"Can not find folder (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Can-not-find-folder/#can-not-find-folder","title":"Can not find folder","text":""},{"location":"sf-deployment-assistant/Can-not-find-folder/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Cannot find folder:(.*)</code></li> </ul>"},{"location":"sf-deployment-assistant/Can-not-find-folder/#resolution","title":"Resolution","text":"<pre><code>Folder {2} is missing.\n- If folder {2} is existing in sources, add it in related package.xml\n- If folder {2} is not existing in DX sources, please use sf hardis:project:clean:retrievefolders to retrieve it\n- If both previous solutions did not work, go create manually folder {2} in target org\n</code></pre>"},{"location":"sf-deployment-assistant/Can-not-find-user--2-/","title":"Can not find user (2) (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Can-not-find-user--2-/#can-not-find-user-2","title":"Can not find user (2)","text":""},{"location":"sf-deployment-assistant/Can-not-find-user--2-/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) In field: (.*) - no User named (.*) found</code></li> </ul>"},{"location":"sf-deployment-assistant/Can-not-find-user--2-/#resolution","title":"Resolution","text":"<pre><code>You made reference to username {3} in {1}, and it probably does not exist in the target org.\n- Do not use named users, but user public groups for assignments -&gt; https://help.salesforce.com/s/articleView?id=sf.creating_and_editing_groups.htm&amp;type=5\n- or Create matching user {3} in the target deployment org\n- or open {1} metadata and remove the XML part referring to hardcoded username {3}\n</code></pre>"},{"location":"sf-deployment-assistant/Can-not-find-user/","title":"Can not find user (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Can-not-find-user/#can-not-find-user","title":"Can not find user","text":""},{"location":"sf-deployment-assistant/Can-not-find-user/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Cannot find a user that matches any of the following usernames</code></li> </ul>"},{"location":"sf-deployment-assistant/Can-not-find-user/#resolution","title":"Resolution","text":"<pre><code>You made reference to username(s) in {1}, and those users probably do not exist in target org.\n- Do not use named users, but user public groups for assignments -&gt; https://help.salesforce.com/s/articleView?id=sf.creating_and_editing_groups.htm&amp;type=5\n- or Create matching user(s) in the target deployment org\n- or Remove the XML part referring to hardcoded usernames\n\nExample of XML you have to remove in {1}:\n\n&lt;folderShares&gt;\n  &lt;accessLevel&gt;Manage&lt;/accessLevel&gt;\n  &lt;sharedTo&gt;nicolas.vuillamy@hardis-scratch-po-tgci-root-develop_20220412_0604.com&lt;/sharedTo&gt;\n  &lt;sharedToType&gt;User&lt;/sharedToType&gt;\n&lt;/folderShares&gt;\n</code></pre>"},{"location":"sf-deployment-assistant/Can-not-test-item-deployment-in-simulation-mode/","title":"Can not test item deployment in simulation mode (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Can-not-test-item-deployment-in-simulation-mode/#can-not-test-item-deployment-in-simulation-mode","title":"Can not test item deployment in simulation mode","text":""},{"location":"sf-deployment-assistant/Can-not-test-item-deployment-in-simulation-mode/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Test only deployment cannot update</code></li> </ul>"},{"location":"sf-deployment-assistant/Can-not-test-item-deployment-in-simulation-mode/#resolution","title":"Resolution","text":"<pre><code>THIS IS A FALSE POSITIVE\nWhen effective deployment will happen, it should pass\n</code></pre>"},{"location":"sf-deployment-assistant/Cannot-update-a-field-to-a-Summary-from-something-else/","title":"Cannot update a field to a Summary from something else (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Cannot-update-a-field-to-a-Summary-from-something-else/#cannot-update-a-field-to-a-summary-from-something-else","title":"Cannot update a field to a Summary from something else","text":""},{"location":"sf-deployment-assistant/Cannot-update-a-field-to-a-Summary-from-something-else/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Cannot update a field to a (.*) from something else</code></li> </ul>"},{"location":"sf-deployment-assistant/Cannot-update-a-field-to-a-Summary-from-something-else/#resolution","title":"Resolution","text":"<pre><code>You probably updated the type of field {1} to type {2}, and Salesforce does not allows that with deployments. You can:\n- Try to manually change the type of {1} directly in target org, but it may not be technically possible\n- Delete field {1} in target org: it will be recreated after deployment (but you will loose data on existing records, so be careful if your target is a production org)\n- Create another field with desired type and manage data recovery if the target is a production org\n</code></pre>"},{"location":"sf-deployment-assistant/Change-Matching-Rule/","title":"Change Matching Rule (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Change-Matching-Rule/#change-matching-rule","title":"Change Matching Rule","text":""},{"location":"sf-deployment-assistant/Change-Matching-Rule/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Before you change a matching rule, you must deactivate it</code></li> </ul>"},{"location":"sf-deployment-assistant/Change-Matching-Rule/#resolution","title":"Resolution","text":"<pre><code>To be able to deploy, you must go in target org setup to manually deactivate matching rule {1}\n</code></pre>"},{"location":"sf-deployment-assistant/Condition-missing-reference/","title":"Condition missing reference","text":"<p>title: \"Condition missing reference (Deployment assistant)\" description: \"How to solve Salesforce deployment error \\\"Error (.) field integrity exception: unknown (A condition has a reference to (.), which doesn't exist.)\\\"\"</p>"},{"location":"sf-deployment-assistant/Condition-missing-reference/#condition-missing-reference","title":"Condition missing reference","text":""},{"location":"sf-deployment-assistant/Condition-missing-reference/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) field integrity exception: unknown \\(A condition has a reference to (.*), which doesn't exist.\\)</code></li> </ul>"},{"location":"sf-deployment-assistant/Condition-missing-reference/#resolution","title":"Resolution","text":"<pre><code>There is a reference to {2} in {1}, and {2} is not found. You can either:\n- Add {2} in your deployment sources and make sure it is named in package.xml\n- Remove the reference to {2} in {1}\n</code></pre>"},{"location":"sf-deployment-assistant/Couldn-t-retrieve-or-load-information-on-the-field/","title":"Couldn t retrieve or load information on the field","text":"<p>title: \"Couldn't retrieve or load information on the field (Deployment assistant)\" description: \"How to solve Salesforce deployment error \\\"Error (.) Something went wrong. We couldn't retrieve or load the information on the field: (.).\\\"\"</p>"},{"location":"sf-deployment-assistant/Couldn-t-retrieve-or-load-information-on-the-field/#couldnt-retrieve-or-load-information-on-the-field","title":"Couldn't retrieve or load information on the field","text":""},{"location":"sf-deployment-assistant/Couldn-t-retrieve-or-load-information-on-the-field/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Something went wrong. We couldn't retrieve or load the information on the field: (.*)\\.</code></li> </ul>"},{"location":"sf-deployment-assistant/Couldn-t-retrieve-or-load-information-on-the-field/#resolution","title":"Resolution","text":"<pre><code>There is a reference to {2} in {1}, and {2} is not found. You can either:\n- Commit {2} in your deployment sources and make sure it is named in package.xml\n- Remove the reference to {2} in {1}\n</code></pre>"},{"location":"sf-deployment-assistant/Custom-field-not-found/","title":"Custom field not found (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Custom-field-not-found/#custom-field-not-found","title":"Custom field not found","text":""},{"location":"sf-deployment-assistant/Custom-field-not-found/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) In field: (.*) - no CustomField named (.*)\\.(.*) found</code></li> </ul>"},{"location":"sf-deployment-assistant/Custom-field-not-found/#examples","title":"Examples","text":"<ul> <li><code>Error PS_Admin In field: field - no CustomField named User.expcloud__Portal_Username__c found</code></li> </ul>"},{"location":"sf-deployment-assistant/Custom-field-not-found/#resolution","title":"Resolution","text":"<pre><code>A reference to a custom field {3}.{4} is not found in {1}:\n- If you renamed {3}.{4}, do a search/replace in {1} with previous field name and {4}\n- If you deleted {3}.{4}, or if you don't want to deploy it, do a search on {4} in all sources, and remove all XML elements referring to {3}.{4} (except in destructiveChanges.xml)\n- If {3}.{4} should exist, make sure it is in force-app/main/default/objects/{3}/fields and that {3}.{4} is in manifest/package.xml in CustomField section\n- If {3}.{4} is standard, the error is because {3}.{4} is not available in the org you are trying to deploy to. You can:\n  - Remove the reference to {4} in the XML of {1} ( maybe sf hardis:project:clean:references can clean automatically for you ! )\n  - Activate the required features/license in the target org\n</code></pre>"},{"location":"sf-deployment-assistant/Custom-metadata-entry-not-found/","title":"Custom metadata entry not found (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Custom-metadata-entry-not-found/#custom-metadata-entry-not-found","title":"Custom metadata entry not found","text":""},{"location":"sf-deployment-assistant/Custom-metadata-entry-not-found/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) In field: (.*) - no CustomMetadata named (.*) found</code></li> </ul>"},{"location":"sf-deployment-assistant/Custom-metadata-entry-not-found/#resolution","title":"Resolution","text":"<pre><code>A reference to a custom metadata {3} of type {2} is not found in {1}:\n- Are you sure you deployed {3} ?\n- If you use a package.xml, is {3} present within type CustomMetadata ?\n</code></pre>"},{"location":"sf-deployment-assistant/Custom-object-not-found/","title":"Custom object not found (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Custom-object-not-found/#custom-object-not-found","title":"Custom object not found","text":""},{"location":"sf-deployment-assistant/Custom-object-not-found/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) In field: field - no CustomObject named (.*) found</code></li> </ul>"},{"location":"sf-deployment-assistant/Custom-object-not-found/#resolution","title":"Resolution","text":"<pre><code>A reference to a custom object {2} is not found in {1}:\n- If you renamed the custom object, do a search/replace in sources with previous object name and new object name\n- If you deleted the custom object, or if you don't want to deploy it, do a search on the custom object name, and remove XML elements referencing it\n- If the object should exist, make sure it is in force-app/main/default/objects and that the object name is in manifest/package.xml in CustomObject section\nYou may also have a look to command sf hardis:project:clean:references\n</code></pre>"},{"location":"sf-deployment-assistant/Dependent-class-is-invalid-and-needs-recompilation/","title":"Dependent class is invalid and needs recompilation (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Dependent-class-is-invalid-and-needs-recompilation/#dependent-class-is-invalid-and-needs-recompilation","title":"Dependent class is invalid and needs recompilation","text":""},{"location":"sf-deployment-assistant/Dependent-class-is-invalid-and-needs-recompilation/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Dependent class is invalid and needs recompilation</code></li> </ul>"},{"location":"sf-deployment-assistant/Dependent-class-is-invalid-and-needs-recompilation/#resolution","title":"Resolution","text":"<pre><code>Solve the other errors and this one will disappear !\n</code></pre>"},{"location":"sf-deployment-assistant/Duplicate-label/","title":"Duplicate label (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Duplicate-label/#duplicate-label","title":"Duplicate label","text":""},{"location":"sf-deployment-assistant/Duplicate-label/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Duplicate label: (.*)</code></li> </ul>"},{"location":"sf-deployment-assistant/Duplicate-label/#resolution","title":"Resolution","text":"<pre><code>You probably renamed the picklist API name for {2}. Please update manually the picklist {1} in the target org to avoid to have a duplicate label\n</code></pre>"},{"location":"sf-deployment-assistant/Duplicate-value-Platform-Action-Id-List/","title":"Duplicate value Platform Action Id List (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Duplicate-value-Platform-Action-Id-List/#duplicate-value-platform-action-id-list","title":"Duplicate value Platform Action Id List","text":""},{"location":"sf-deployment-assistant/Duplicate-value-Platform-Action-Id-List/#detection","title":"Detection","text":"<ul> <li>String: <code>duplicate value found: PlatformActionListId duplicates value on record with id</code></li> </ul>"},{"location":"sf-deployment-assistant/Duplicate-value-Platform-Action-Id-List/#resolution","title":"Resolution","text":"<pre><code>There are probably issue with conflict management. Open the XML of the source item, and replace all &lt;sortOrder&gt; numbers to make an ascending order, starting with 0\n</code></pre>"},{"location":"sf-deployment-assistant/Empty-source-items/","title":"Empty source items (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Empty-source-items/#empty-source-items","title":"Empty source items","text":""},{"location":"sf-deployment-assistant/Empty-source-items/#detection","title":"Detection","text":"<ul> <li>String: <code>Required field is missing: sharingOwnerRules</code></li> <li>String: <code>Required field is missing: standardValue</code></li> <li>String: <code>Required field is missing: valueTranslation</code></li> </ul>"},{"location":"sf-deployment-assistant/Empty-source-items/#resolution","title":"Resolution","text":"<pre><code>You probably retrieved empty items, that must not be included within the SFDX project\nTo remove them, please run sfdx:hardis:project:clean:emptyitems\n</code></pre>"},{"location":"sf-deployment-assistant/Enable-CRM-Analytics/","title":"Enable CRM Analytics (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Enable-CRM-Analytics/#enable-crm-analytics","title":"Enable CRM Analytics","text":""},{"location":"sf-deployment-assistant/Enable-CRM-Analytics/#detection","title":"Detection","text":"<ul> <li>String: <code>It should be created by enabling the CRM Analytics Cloud preference</code></li> </ul>"},{"location":"sf-deployment-assistant/Enable-CRM-Analytics/#resolution","title":"Resolution","text":"<pre><code>You must enable CRM Analytics (ex Wave, Einstein Analytics &amp; Tableau CRM) in the target org.\nYou probably also need to add CRM Analytics Admin Permission Set assignment to the deployment user\n</code></pre>"},{"location":"sf-deployment-assistant/Error-parsing-file/","title":"Error parsing file (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Error-parsing-file/#error-parsing-file","title":"Error parsing file","text":""},{"location":"sf-deployment-assistant/Error-parsing-file/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Error parsing file: (.*)</code></li> </ul>"},{"location":"sf-deployment-assistant/Error-parsing-file/#resolution","title":"Resolution","text":"<pre><code>There has been an error parsing the XML file of {1}: {2}\n- Open file {1} and look where the error can be ! (merge issue, typo, XML tag not closed...)\n</code></pre>"},{"location":"sf-deployment-assistant/Expired-Access---Refresh-Token/","title":"Expired Access / Refresh Token (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Expired-Access---Refresh-Token/#expired-access-refresh-token","title":"Expired Access / Refresh Token","text":""},{"location":"sf-deployment-assistant/Expired-Access---Refresh-Token/#detection","title":"Detection","text":"<ul> <li>String: <code>expired access/refresh token</code></li> </ul>"},{"location":"sf-deployment-assistant/Expired-Access---Refresh-Token/#resolution","title":"Resolution","text":"<pre><code>Run command \"Select another org\" from Status panel (or sf hardis:org:select) to authenticate again to your org\n</code></pre>"},{"location":"sf-deployment-assistant/Field-not-available-for-element/","title":"Field not available for element (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Field-not-available-for-element/#field-not-available-for-element","title":"Field not available for element","text":""},{"location":"sf-deployment-assistant/Field-not-available-for-element/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Field (.*) is not available for</code></li> </ul>"},{"location":"sf-deployment-assistant/Field-not-available-for-element/#resolution","title":"Resolution","text":"<pre><code>You probably changed the type of field {1}.\nFind field {1} in the source XML, and remove the section using it\n</code></pre>"},{"location":"sf-deployment-assistant/Flow-must-be-deleted-manually/","title":"Flow must be deleted manually (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Flow-must-be-deleted-manually/#flow-must-be-deleted-manually","title":"Flow must be deleted manually","text":""},{"location":"sf-deployment-assistant/Flow-must-be-deleted-manually/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>.flow (.*) insufficient access rights on cross-reference id</code></li> </ul>"},{"location":"sf-deployment-assistant/Flow-must-be-deleted-manually/#resolution","title":"Resolution","text":"<pre><code>Flow {1} can not be deleted using deployments, please delete it manually in the target org using menu Setup -&gt; Flows , context menu on {1} -&gt; View details and versions -&gt; Deactivate all versions -&gt; Delete flow\n</code></pre>"},{"location":"sf-deployment-assistant/Formula-picklist-field-issue/","title":"Formula picklist field issue (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Formula-picklist-field-issue/#formula-picklist-field-issue","title":"Formula picklist field issue","text":""},{"location":"sf-deployment-assistant/Formula-picklist-field-issue/#detection","title":"Detection","text":"<ul> <li>String: <code>Les champs de liste de s\u00e9lection sont pris en charge uniquement dans certaines fonctions.</code></li> </ul>"},{"location":"sf-deployment-assistant/Formula-picklist-field-issue/#resolution","title":"Resolution","text":"<pre><code>You probably changed the type of a field that is used in a formula.\nUpdate the formula to use a field compliant with formulas.\nMore details at https://help.salesforce.com/articleView?id=sf.tips_on_building_formulas.htm&amp;type=5\n</code></pre>"},{"location":"sf-deployment-assistant/Insufficient-access-rights-on-cross-reference-id/","title":"Insufficient access rights on cross-reference id (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Insufficient-access-rights-on-cross-reference-id/#insufficient-access-rights-on-cross-reference-id","title":"Insufficient access rights on cross-reference id","text":""},{"location":"sf-deployment-assistant/Insufficient-access-rights-on-cross-reference-id/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) insufficient access rights on cross-reference id</code></li> </ul>"},{"location":"sf-deployment-assistant/Insufficient-access-rights-on-cross-reference-id/#resolution","title":"Resolution","text":"<pre><code>- If {1} is a Flow, it can not be deleted using deployments, please delete it manually in the target org using menu Setup -&gt; Flows , context menu on {1} -&gt; View details and versions -&gt; Deactivate all versions -&gt; Delete flow\n- If you changed a custom field from unique to not unique, you need to manually make the change in the target org\n</code></pre>"},{"location":"sf-deployment-assistant/Invalid-field-for-upsert/","title":"Invalid field for upsert","text":"<p>title: \"Invalid field for upsert (Deployment assistant)\" description: \"How to solve Salesforce deployment error \\\"Error (.) Invalid field for upsert, must be an External Id custom or standard indexed field: (.) ((.*))\\\"\"</p>"},{"location":"sf-deployment-assistant/Invalid-field-for-upsert/#invalid-field-for-upsert","title":"Invalid field for upsert","text":""},{"location":"sf-deployment-assistant/Invalid-field-for-upsert/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Invalid field for upsert, must be an External Id custom or standard indexed field: (.*) \\((.*)\\)</code></li> </ul>"},{"location":"sf-deployment-assistant/Invalid-field-for-upsert/#resolution","title":"Resolution","text":"<pre><code>You tried to use field {2} for an upsert call in {1}.\n- Is it declared as externalId ?\n- Is the customIndex source file present in the deployment ?\n- If it is declared as externalId and customIndex is present, you may have to go manually define the field as externalId in the target org\n</code></pre>"},{"location":"sf-deployment-assistant/Invalid-field-in-related-list/","title":"Invalid field in related list (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Invalid-field-in-related-list/#invalid-field-in-related-list","title":"Invalid field in related list","text":""},{"location":"sf-deployment-assistant/Invalid-field-in-related-list/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Invalid field:(.*) in related list:(.*)</code></li> </ul>"},{"location":"sf-deployment-assistant/Invalid-field-in-related-list/#resolution","title":"Resolution","text":"<pre><code>Field {2} is unknown. You can:\n- Activate the related feature license or option to make {2} existing in target org\n- Update XML of {1} to remove reference to field {2} in the related list {3}\n- Update XML of {1} to remove the whole related list {3}\nExample of XML to remove:\n&lt;relatedLists&gt;\n  &lt;fields&gt;SOLUTION.ISSUE&lt;/fields&gt;\n  &lt;fields&gt;SOLUTION.SOLUTION_NUMBER&lt;/fields&gt;\n  &lt;fields&gt;SOLUTION.STATUS&lt;/fields&gt;\n  &lt;fields&gt;CORE.USERS.ALIAS&lt;/fields&gt;\n  &lt;relatedList&gt;RelatedSolutionList&lt;/relatedList&gt;\n&lt;/relatedLists&gt;\n</code></pre>"},{"location":"sf-deployment-assistant/Invalid-formula-grouping-context/","title":"Invalid formula grouping context (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Invalid-formula-grouping-context/#invalid-formula-grouping-context","title":"Invalid formula grouping context","text":""},{"location":"sf-deployment-assistant/Invalid-formula-grouping-context/#detection","title":"Detection","text":"<ul> <li>String: <code>Invalid custom summary formula definition: You must select a grouping context to use any report summary function</code></li> </ul>"},{"location":"sf-deployment-assistant/Invalid-formula-grouping-context/#resolution","title":"Resolution","text":"<pre><code>You need to update your Report definition. See workaround here -&gt; https://salesforce.stackexchange.com/questions/294850/grouping-error-with-prevgroupval-function\n</code></pre>"},{"location":"sf-deployment-assistant/Invalid-report-type/","title":"Invalid report type (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Invalid-report-type/#invalid-report-type","title":"Invalid report type","text":""},{"location":"sf-deployment-assistant/Invalid-report-type/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) invalid report type</code></li> </ul>"},{"location":"sf-deployment-assistant/Invalid-report-type/#resolution","title":"Resolution","text":"<pre><code>Report type is missing for report {1}\n- Open report {1} to se what report type is used\n- Retrieve the report type from an org and add it to the sfdx sources\n</code></pre>"},{"location":"sf-deployment-assistant/Invalid-scope-Mine--not-allowed/","title":"Invalid scope:Mine, not allowed (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Invalid-scope-Mine--not-allowed/#invalid-scopemine-not-allowed","title":"Invalid scope:Mine, not allowed","text":""},{"location":"sf-deployment-assistant/Invalid-scope-Mine--not-allowed/#detection","title":"Detection","text":"<ul> <li>String: <code>Invalid scope:Mine, not allowed</code></li> </ul>"},{"location":"sf-deployment-assistant/Invalid-scope-Mine--not-allowed/#resolution","title":"Resolution","text":"<pre><code>Replace Mine by Everything in the list view SFDX source XML.\nHave a look at this command to manage that automatically \ud83d\ude0a\nhttps://sfdx-hardis.cloudity.com/hardis/org/fix/listviewmine/ \n</code></pre>"},{"location":"sf-deployment-assistant/Invalid-type/","title":"Invalid type","text":"<p>title: \"Invalid type (Deployment assistant)\" description: \"How to solve Salesforce deployment error \\\"Error (.) Invalid type: (.) ((.*))\\\"\"</p>"},{"location":"sf-deployment-assistant/Invalid-type/#invalid-type","title":"Invalid type","text":""},{"location":"sf-deployment-assistant/Invalid-type/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Invalid type: (.*) \\((.*)\\)</code></li> </ul>"},{"location":"sf-deployment-assistant/Invalid-type/#resolution","title":"Resolution","text":"<pre><code>Apex error in {1} with unknown type {2} at position {3}. If {2} is a class name, try to fix it, or maybe it is missing in the files or in package.xml !\n</code></pre>"},{"location":"sf-deployment-assistant/Mandatory-custom-field-can-not-be-in-a-profile-permission-set/","title":"Mandatory custom field can not be in a profile/permission set (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Mandatory-custom-field-can-not-be-in-a-profile-permission-set/#mandatory-custom-field-can-not-be-in-a-profilepermission-set","title":"Mandatory custom field can not be in a profile/permission set","text":""},{"location":"sf-deployment-assistant/Mandatory-custom-field-can-not-be-in-a-profile-permission-set/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) You cannot deploy to a required field: (.*)</code></li> </ul>"},{"location":"sf-deployment-assistant/Mandatory-custom-field-can-not-be-in-a-profile-permission-set/#resolution","title":"Resolution","text":"<pre><code>- Search for {2} in source file XML of {1}, then remove the entries matching the results\nExample of element to delete:\n&lt;fieldPermissions&gt;\n  &lt;editable&gt;true&lt;/editable&gt;\n  &lt;field&gt;{2}&lt;/field&gt;\n  &lt;readable&gt;true&lt;/readable&gt;\n&lt;/fieldPermissions&gt;\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-Data-Category-Group/","title":"Missing Data Category Group (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-Data-Category-Group/#missing-data-category-group","title":"Missing Data Category Group","text":""},{"location":"sf-deployment-assistant/Missing-Data-Category-Group/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) In field: DeveloperName - no DataCategoryGroup named (.*) found</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-Data-Category-Group/#resolution","title":"Resolution","text":"<pre><code>If Data Category Group {2} is not existing yet in target org, you might need to:\n- create it manually in target org before deployment\n- comment DataCategoryGroup in {1} XML\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-Feature-Work-Com/","title":"Missing Feature Work.Com (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-Feature-Work-Com/#missing-feature-workcom","title":"Missing Feature Work.Com","text":""},{"location":"sf-deployment-assistant/Missing-Feature-Work-Com/#detection","title":"Detection","text":"<ul> <li>String: <code>WorkBadgeDefinition</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-Feature-Work-Com/#resolution","title":"Resolution","text":"<pre><code>Work.com feature must be activated in the target org.\n- Org &amp; Scratch: https://developer.salesforce.com/docs/atlas.en-us.workdotcom_dev_guide.meta/workdotcom_dev_guide/wdc_cc_setup_dev_org.htm\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-Quick-Action/","title":"Missing Quick Action (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-Quick-Action/#missing-quick-action","title":"Missing Quick Action","text":""},{"location":"sf-deployment-assistant/Missing-Quick-Action/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) In field: QuickAction - no QuickAction named (.*) found</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-Quick-Action/#resolution","title":"Resolution","text":"<pre><code>QuickAction {2} referred in {1} is unknown. You can either:\n- Make sure your QuickAction {2} is present in source files and in package.xml\n- If {2} is a standard QuickAction, activate related feature in target org\n- Solve other errors that could impact QuickAction {2}\n- Remove QuickAction {2} in the source XML of {1}. Example of XML to remove below:\n&lt;quickActionListItems&gt;\n  &lt;quickActionName&gt;FeedItem.RypplePost&lt;/quickActionName&gt;\n&lt;/quickActionListItems&gt;\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-Sales-Team/","title":"Missing Sales Team (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-Sales-Team/#missing-sales-team","title":"Missing Sales Team","text":""},{"location":"sf-deployment-assistant/Missing-Sales-Team/#detection","title":"Detection","text":"<ul> <li>String: <code>related list:RelatedAccountSalesTeam</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-Sales-Team/#resolution","title":"Resolution","text":"<pre><code>Account Teams must be activated in the target org.\n- Org: Setup -&gt; Account Teams -&gt; Enable\n- Scratch org setting:\n\"accountSettings\": {\n  \"enableAccountTeams\": true\n}\n}\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-e-mail-template/","title":"Missing e-mail template (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-e-mail-template/#missing-e-mail-template","title":"Missing e-mail template","text":""},{"location":"sf-deployment-assistant/Missing-e-mail-template/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>In field: template - no EmailTemplate named (.*) found</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-e-mail-template/#resolution","title":"Resolution","text":"<pre><code>An email template should be present in the sources. To retrieve it, you can run:\nsf project retrieve start -m EmailTemplate:{1} -o YOUR_ORG_USERNAME\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-feature-Chatter-Collaboration-Group/","title":"Missing feature Chatter Collaboration Group (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-feature-Chatter-Collaboration-Group/#missing-feature-chatter-collaboration-group","title":"Missing feature Chatter Collaboration Group","text":""},{"location":"sf-deployment-assistant/Missing-feature-Chatter-Collaboration-Group/#detection","title":"Detection","text":"<ul> <li>String: <code>CollaborationGroup</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-feature-Chatter-Collaboration-Group/#resolution","title":"Resolution","text":"<pre><code>Quotes must be activated in the target org.\n- Org: Setup -&gt; Chatter settings -&gt; Allow Records in Groups\n- Scratch org setting:\n\"chatterSettings\": {\n  \"allowRecordsInChatterGroup\": true\n},\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-feature-ContactToMultipleAccounts/","title":"Missing feature ContactToMultipleAccounts (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-feature-ContactToMultipleAccounts/#missing-feature-contacttomultipleaccounts","title":"Missing feature ContactToMultipleAccounts","text":""},{"location":"sf-deployment-assistant/Missing-feature-ContactToMultipleAccounts/#detection","title":"Detection","text":"<ul> <li>String: <code>no CustomObject named AccountContactRelation found</code></li> <li>String: <code>Invalid field:ACCOUNT.NAME in related list:RelatedContactAccountRelationList</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-feature-ContactToMultipleAccounts/#resolution","title":"Resolution","text":"<pre><code>Contacts to multiple accounts be activated in the target org.\n- Help: https://help.salesforce.com/articleView?id=sf.shared_contacts_set_up.htm&amp;type=5\n- Scratch org setting:\n\"features\": [\"ContactsToMultipleAccounts\"]\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-feature-Enhanced-notes/","title":"Missing feature Enhanced notes (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-feature-Enhanced-notes/#missing-feature-enhanced-notes","title":"Missing feature Enhanced notes","text":""},{"location":"sf-deployment-assistant/Missing-feature-Enhanced-notes/#detection","title":"Detection","text":"<ul> <li>String: <code>FeedItem.ContentNote</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-feature-Enhanced-notes/#resolution","title":"Resolution","text":"<pre><code>Enhanced Notes must be activated in the target org.\n- Org: Setup -&gt; Notes settings -&gt; Enable Notes\n- Scratch org setting:\n\"enhancedNotesSettings\": {\n  \"enableEnhancedNotes\": true\n},\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-feature-Ideas-notes/","title":"Missing feature Ideas notes (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-feature-Ideas-notes/#missing-feature-ideas-notes","title":"Missing feature Ideas notes","text":""},{"location":"sf-deployment-assistant/Missing-feature-Ideas-notes/#detection","title":"Detection","text":"<ul> <li>String: <code>Idea.InternalIdeasIdeaRecordType</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-feature-Ideas-notes/#resolution","title":"Resolution","text":"<pre><code>Ideas must be activated in the target org.\n- Org: https://help.salesforce.com/articleView?id=networks_enable_ideas.htm&amp;type=0\n- Scratch org setting:\n\"ideasSettings\": {\n  \"enableIdeas\": true\n}\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-feature-Live-Agent/","title":"Missing feature Live Agent (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-feature-Live-Agent/#missing-feature-live-agent","title":"Missing feature Live Agent","text":""},{"location":"sf-deployment-assistant/Missing-feature-Live-Agent/#detection","title":"Detection","text":"<ul> <li>String: <code>FeedItem.ContentNote</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-feature-Live-Agent/#resolution","title":"Resolution","text":"<pre><code>Live Agent must be activated in the target org.\n- Org: Setup -&gt; Live Agent Settings -&gt; Enable Live Agent\n- Scratch org feature: LiveAgent\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-feature-Opportunity-Teams/","title":"Missing feature Opportunity Teams (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-feature-Opportunity-Teams/#missing-feature-opportunity-teams","title":"Missing feature Opportunity Teams","text":""},{"location":"sf-deployment-assistant/Missing-feature-Opportunity-Teams/#detection","title":"Detection","text":"<ul> <li>String: <code>OpportunityTeam</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-feature-Opportunity-Teams/#resolution","title":"Resolution","text":"<pre><code>Opportunity Teams must be activated in the target org.\n- Org: Setup -&gt; Opportunity Team Settings -&gt; Enable Team Selling\n- Scratch org:\n\"opportunitySettings\": {\n  \"enableOpportunityTeam\": true\n}\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-feature-Product-Request/","title":"Missing feature Product Request (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-feature-Product-Request/#missing-feature-product-request","title":"Missing feature Product Request","text":""},{"location":"sf-deployment-assistant/Missing-feature-Product-Request/#detection","title":"Detection","text":"<ul> <li>String: <code>ProductRequest</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-feature-Product-Request/#resolution","title":"Resolution","text":"<pre><code>ProductRequest object is not available in the target org.\nMaybe you would like to clean its references within Profiles / PS using the following command ?\nsf hardis:project:clean:references , then select \"ProductRequest references\"\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-feature-Social-Customer-Service/","title":"Missing feature Social Customer Service (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-feature-Social-Customer-Service/#missing-feature-social-customer-service","title":"Missing feature Social Customer Service","text":""},{"location":"sf-deployment-assistant/Missing-feature-Social-Customer-Service/#detection","title":"Detection","text":"<ul> <li>String: <code>SocialPersona.AreWeFollowing</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-feature-Social-Customer-Service/#resolution","title":"Resolution","text":"<pre><code>Social Custom Service must be activated in the target org.\n- Org: Setup -&gt; https://help.salesforce.com/articleView?id=sf.social_customer_service_setup_enable.htm&amp;type=5\n- Scratch org feature: SocialCustomerService\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-feature-Translation-Workbench/","title":"Missing feature Translation Workbench (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-feature-Translation-Workbench/#missing-feature-translation-workbench","title":"Missing feature Translation Workbench","text":""},{"location":"sf-deployment-assistant/Missing-feature-Translation-Workbench/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>report-meta.xml(.*)filterlanguage</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-feature-Translation-Workbench/#resolution","title":"Resolution","text":"<pre><code>Translation workbench must be activated in the target org.\n- Org: Setup -&gt; https://help.salesforce.com/articleView?id=sf.customize_wbench.htm&amp;type=5\n- Scratch org:\n\"languageSettings\": {\n  \"enableTranslationWorkbench\":  true,\n  \"enableEndUserLanguages\": true\n}\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-field-MiddleName/","title":"Missing field MiddleName (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-field-MiddleName/#missing-field-middlename","title":"Missing field MiddleName","text":""},{"location":"sf-deployment-assistant/Missing-field-MiddleName/#detection","title":"Detection","text":"<ul> <li>String: <code>field MiddleName</code></li> <li>String: <code>Variable does not exist: MiddleName</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-field-MiddleName/#resolution","title":"Resolution","text":"<pre><code>MiddleNames must be activated in the target org.\n- Help: https://help.salesforce.com/articleView?id=000332623&amp;type=1&amp;mode=1\n- Scratch org setting:\n\"nameSettings\": {\n  \"enableMiddleName\": true\n}\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-field-Suffix/","title":"Missing field Suffix (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-field-Suffix/#missing-field-suffix","title":"Missing field Suffix","text":""},{"location":"sf-deployment-assistant/Missing-field-Suffix/#detection","title":"Detection","text":"<ul> <li>String: <code>field Suffix</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-field-Suffix/#resolution","title":"Resolution","text":"<pre><code>Suffix must be activated in the target org.\n- Help: https://help.salesforce.com/articleView?id=000332623&amp;type=1&amp;mode=1\n- Scratch org setting:\n\"nameSettings\": {\n  \"enableNameSuffix\": true\n},\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-field-SyncedQuoteId/","title":"Missing field SyncedQuoteId (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-field-SyncedQuoteId/#missing-field-syncedquoteid","title":"Missing field SyncedQuoteId","text":""},{"location":"sf-deployment-assistant/Missing-field-SyncedQuoteId/#detection","title":"Detection","text":"<ul> <li>String: <code>field SyncedQuoteId</code></li> <li>String: <code>Error  force-app/main/default/objects/Quote/Quote.object-meta.xml</code></li> <li>String: <code>Error  force-app/main/default/objects/Opportunity/fields/SyncedQuoteId.field-meta.xml</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-field-SyncedQuoteId/#resolution","title":"Resolution","text":"<pre><code>Quotes must be activated in the target org.\n- Help: https://help.salesforce.com/articleView?id=sf.quotes_enable.htm&amp;type=5\n- Scratch org setting:\n\"quoteSettings\": {\n  \"enableQuote\": true\n}\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-multi-currency-field/","title":"Missing multi-currency field (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-multi-currency-field/#missing-multi-currency-field","title":"Missing multi-currency field","text":""},{"location":"sf-deployment-assistant/Missing-multi-currency-field/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>A reference to a custom field (.*)CurrencyIsoCode</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-multi-currency-field/#resolution","title":"Resolution","text":"<pre><code>You probably need to activate MultiCurrency (from Setup -&gt; Company information)\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-object-referenced-in-package-xml/","title":"Missing object referenced in package.xml (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-object-referenced-in-package-xml/#missing-object-referenced-in-packagexml","title":"Missing object referenced in package.xml","text":""},{"location":"sf-deployment-assistant/Missing-object-referenced-in-package-xml/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>An object (.*) of type (.*) was named in package.xml, but was not found in zipped directory</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-object-referenced-in-package-xml/#resolution","title":"Resolution","text":"<pre><code>You can either:\n- Update the package.xml to remove the reference to the missing {2} {1}\n- Add the missing {2} {1} in your project source files\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-profile-default-application/","title":"Missing profile default application (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-profile-default-application/#missing-profile-default-application","title":"Missing profile default application","text":""},{"location":"sf-deployment-assistant/Missing-profile-default-application/#detection","title":"Detection","text":"<ul> <li>String: <code>You can't remove the only default app from the profile.</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-profile-default-application/#resolution","title":"Resolution","text":"<pre><code>You must have a default application for a profile. You can:\n - Update it in UI\n - Update the XML of the profile to set \"true\" in the &lt;default&gt; tag of one of the applicationVisibilities item.\n Ex:\n &lt;applicationVisibilities&gt;\n    &lt;application&gt;standard__LightningSales&lt;/application&gt;\n    &lt;default&gt;true&lt;/default&gt;\n    &lt;visible&gt;true&lt;/visible&gt;\n&lt;/applicationVisibilities&gt;\n</code></pre>"},{"location":"sf-deployment-assistant/Missing-report/","title":"Missing report (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Missing-report/#missing-report","title":"Missing report","text":""},{"location":"sf-deployment-assistant/Missing-report/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) The (.*) report chart has a problem with the \"reportName\" field</code></li> </ul>"},{"location":"sf-deployment-assistant/Missing-report/#resolution","title":"Resolution","text":"<pre><code>{1} is referring to unknown report {2}. To retrieve it, you can run:\n- sf project retrieve start -m Report:{2} -o YOUR_ORG_USERNAME\n- If it fails, looks for the report folder and add it before report name to the retrieve command (ex: MYFOLDER/MYREPORTNAME)\n</code></pre>"},{"location":"sf-deployment-assistant/Network-issue/","title":"Network issue (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Network-issue/#network-issue","title":"Network issue","text":""},{"location":"sf-deployment-assistant/Network-issue/#detection","title":"Detection","text":"<ul> <li>String: <code>ECONNABORTED</code></li> <li>String: <code>ECONNRESET</code></li> </ul>"},{"location":"sf-deployment-assistant/Network-issue/#resolution","title":"Resolution","text":"<pre><code>The network connection has been aborted, this is a purely technical issue.\nTry again, and if you still see errors, check the status of Salesforce instance on https://status.salesforce.com\n</code></pre>"},{"location":"sf-deployment-assistant/Not-available-for-deploy-for-this-organization/","title":"Not available for deploy for this organization (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Not-available-for-deploy-for-this-organization/#not-available-for-deploy-for-this-organization","title":"Not available for deploy for this organization","text":""},{"location":"sf-deployment-assistant/Not-available-for-deploy-for-this-organization/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Not available for deploy for this organization</code></li> </ul>"},{"location":"sf-deployment-assistant/Not-available-for-deploy-for-this-organization/#resolution","title":"Resolution","text":"<pre><code>The user you use for deployments probably lacks of the rights (Profiles, Permission sets...) to manage {1}.\n- Assign the deployment user to the good Permission Sets, or modify its profile rights, then try again\n</code></pre>"},{"location":"sf-deployment-assistant/Not-valid-sharing-model/","title":"Not valid sharing model (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Not-valid-sharing-model/#not-valid-sharing-model","title":"Not valid sharing model","text":""},{"location":"sf-deployment-assistant/Not-valid-sharing-model/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) (.*) is not a valid sharing model for (.*) when (.*) sharing model is (.*)</code></li> </ul>"},{"location":"sf-deployment-assistant/Not-valid-sharing-model/#resolution","title":"Resolution","text":"<pre><code>It seems that Sharing Models of {1} and {4} are not compatible in target org.\n- Use compatible sharing models between {1} and {4} by updating Sharing model of {1} or {4}\n- Make sure that sfdx sources {1}.object-meta.xml and {4}.object-meta.xml and in the files, and that {1} and {4} are in package.xml in CustomObject block\n- You may directly update sharingModel in XML. For example, replace &lt;sharingModel&gt;ReadWrite&lt;/sharingModel&gt; by &lt;sharingModel&gt;Private&lt;/sharingModel&gt; in {3}.object-meta.xml\n</code></pre>"},{"location":"sf-deployment-assistant/Objects-rights-on-a-role-is-below-org-default/","title":"Objects rights on a role is below org default (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Objects-rights-on-a-role-is-below-org-default/#objects-rights-on-a-role-is-below-org-default","title":"Objects rights on a role is below org default","text":""},{"location":"sf-deployment-assistant/Objects-rights-on-a-role-is-below-org-default/#detection","title":"Detection","text":"<ul> <li>String: <code>access level below organization default</code></li> </ul>"},{"location":"sf-deployment-assistant/Objects-rights-on-a-role-is-below-org-default/#resolution","title":"Resolution","text":"<pre><code>Your org wide settings default must be lower than the level defined in roles:\n- If you are in a scratch org, it can be fixable using \"objectProperties\" in project-scratch-def.json (see \"Set Object-Level Sharing Settings\" paragraph in page https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_def_file.htm)\n- If you are in a sandbox/dev/prod org, you need to update default org wide settings before deployment. See https://www.sfdcpoint.com/salesforce/organization-wide-defaults-owd-in-salesforce/\n</code></pre>"},{"location":"sf-deployment-assistant/Picklist-sharing-is-not-supported/","title":"Picklist sharing is not supported (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Picklist-sharing-is-not-supported/#picklist-sharing-is-not-supported","title":"Picklist sharing is not supported","text":""},{"location":"sf-deployment-assistant/Picklist-sharing-is-not-supported/#detection","title":"Detection","text":"<ul> <li>String: <code>Picklist sharing is not supported</code></li> </ul>"},{"location":"sf-deployment-assistant/Picklist-sharing-is-not-supported/#resolution","title":"Resolution","text":"<pre><code>You probably changed the type of a field.\nGo manually make the change in the target org, so the deployment will pass\n</code></pre>"},{"location":"sf-deployment-assistant/Picklist-value-not-found/","title":"Picklist value not found (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Picklist-value-not-found/#picklist-value-not-found","title":"Picklist value not found","text":""},{"location":"sf-deployment-assistant/Picklist-value-not-found/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Picklist value: (.*) in picklist: (.*) not found</code></li> </ul>"},{"location":"sf-deployment-assistant/Picklist-value-not-found/#resolution","title":"Resolution","text":"<pre><code>Sources have references to value {1} of picklist {2}\n- If picklist {2} is standard, add the picklist to sfdx sources by using \"sf project retrieve start -m StandardValueSet:{2}\", then save again\n- Else, perform a search in all code of {1}, then remove XML tags referring to {1} (for example in record types metadatas)\n</code></pre>"},{"location":"sf-deployment-assistant/Please-choose-a-different-name/","title":"Please choose a different name (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Please-choose-a-different-name/#please-choose-a-different-name","title":"Please choose a different name","text":""},{"location":"sf-deployment-assistant/Please-choose-a-different-name/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) This (.*) already exists or has been previously used(.*)Please choose a different name.</code></li> </ul>"},{"location":"sf-deployment-assistant/Please-choose-a-different-name/#resolution","title":"Resolution","text":"<pre><code>- Rename {1} in the target org, then try again the deployment. if it succeeds, delete the renamed item.\n- or Delete {1} in the target org, then try again the deployment\n</code></pre>"},{"location":"sf-deployment-assistant/Record-Type-not-found/","title":"Record Type not found (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Record-Type-not-found/#record-type-not-found","title":"Record Type not found","text":""},{"location":"sf-deployment-assistant/Record-Type-not-found/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) In field: recordType - no RecordType named (.*) found</code></li> </ul>"},{"location":"sf-deployment-assistant/Record-Type-not-found/#resolution","title":"Resolution","text":"<pre><code>An unknown record type {2} is referenced in {1}\n- If record type {2} is not supposed to exist, perform a search in all files of {1}, then remove matching XML elements referring to this record type\n- If record type {2} is supposed to exist, you may have to create it manually in the target org to make the deployment pass\n</code></pre>"},{"location":"sf-deployment-assistant/Send-email-is-disabled/","title":"Send email is disabled (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Send-email-is-disabled/#send-email-is-disabled","title":"Send email is disabled","text":""},{"location":"sf-deployment-assistant/Send-email-is-disabled/#detection","title":"Detection","text":"<ul> <li>String: <code>Send Email is disabled or activities are not allowed</code></li> <li>String: <code>Unknown user permission: SendExternalEmailAvailable</code></li> </ul>"},{"location":"sf-deployment-assistant/Send-email-is-disabled/#resolution","title":"Resolution","text":"<pre><code>Go to Email -&gt; Deliverability -&gt; Select value \"All emails\"\n</code></pre>"},{"location":"sf-deployment-assistant/Sharing-recalculation-lock/","title":"Sharing recalculation lock (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Sharing-recalculation-lock/#sharing-recalculation-lock","title":"Sharing recalculation lock","text":""},{"location":"sf-deployment-assistant/Sharing-recalculation-lock/#detection","title":"Detection","text":"<ul> <li>String: <code>because it interferes with another operation already in progress</code></li> <li>String: <code>Le calcul de partage demand\u00e9 ne peut \u00eatre trait\u00e9 maintenant car il interf\u00e8re avec une autre op\u00e9ration en cours</code></li> </ul>"},{"location":"sf-deployment-assistant/Sharing-recalculation-lock/#resolution","title":"Resolution","text":"<pre><code>If you changed a field from MasterDetail to Lookup, you must do it manually in the target org before being able to deploy\n</code></pre>"},{"location":"sf-deployment-assistant/Sort-order-must-be-in-sequential-order/","title":"Sort order must be in sequential order (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Sort-order-must-be-in-sequential-order/#sort-order-must-be-in-sequential-order","title":"Sort order must be in sequential order","text":""},{"location":"sf-deployment-assistant/Sort-order-must-be-in-sequential-order/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) SortOrder must be in sequential order from</code></li> </ul>"},{"location":"sf-deployment-assistant/Sort-order-must-be-in-sequential-order/#resolution","title":"Resolution","text":"<pre><code>You probably have a default DuplicateRule in the target org. Retrieve it from target org, or delete it manually in target org, so you can deploy.\nRef: https://developer.salesforce.com/forums/?id=9060G000000I6SoQAK\n</code></pre>"},{"location":"sf-deployment-assistant/Tableau-CRM---Wave-digest-error/","title":"Tableau CRM / Wave digest error (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Tableau-CRM---Wave-digest-error/#tableau-crm-wave-digest-error","title":"Tableau CRM / Wave digest error","text":""},{"location":"sf-deployment-assistant/Tableau-CRM---Wave-digest-error/#detection","title":"Detection","text":"<ul> <li>String: <code>Fix the sfdcDigest node errors and then upload the file again</code></li> </ul>"},{"location":"sf-deployment-assistant/Tableau-CRM---Wave-digest-error/#resolution","title":"Resolution","text":"<pre><code>Go to the target org, open profile \"Analytics Cloud Integration User\" and add READ rights to the missing object fields \n</code></pre>"},{"location":"sf-deployment-assistant/Test-classes-with-0--coverage/","title":"Test classes with 0% coverage (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Test-classes-with-0--coverage/#test-classes-with-0-coverage","title":"Test classes with 0% coverage","text":""},{"location":"sf-deployment-assistant/Test-classes-with-0--coverage/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>0%</code></li> </ul>"},{"location":"sf-deployment-assistant/Test-classes-with-0--coverage/#resolution","title":"Resolution","text":"<pre><code>Please make sure that none of the test classes are 0% covered\n</code></pre>"},{"location":"sf-deployment-assistant/Unknown-user-permission--CreateAuditFields/","title":"Unknown user permission: CreateAuditFields (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Unknown-user-permission--CreateAuditFields/#unknown-user-permission-createauditfields","title":"Unknown user permission: CreateAuditFields","text":""},{"location":"sf-deployment-assistant/Unknown-user-permission--CreateAuditFields/#detection","title":"Detection","text":"<ul> <li>String: <code>Unknown user permission: CreateAuditFields</code></li> </ul>"},{"location":"sf-deployment-assistant/Unknown-user-permission--CreateAuditFields/#resolution","title":"Resolution","text":"<pre><code>You need to enable the \"Create audit field\" permission in the target org\nPlease check https://help.salesforce.com/articleView?id=000334139&amp;type=1&amp;mode=1\n</code></pre>"},{"location":"sf-deployment-assistant/Unknown-user-permission--FieldServiceAccess/","title":"Unknown user permission: FieldServiceAccess (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Unknown-user-permission--FieldServiceAccess/#unknown-user-permission-fieldserviceaccess","title":"Unknown user permission: FieldServiceAccess","text":""},{"location":"sf-deployment-assistant/Unknown-user-permission--FieldServiceAccess/#detection","title":"Detection","text":"<ul> <li>String: <code>Unknown user permission: FieldServiceAccess</code></li> </ul>"},{"location":"sf-deployment-assistant/Unknown-user-permission--FieldServiceAccess/#resolution","title":"Resolution","text":"<pre><code>You need to enable the \"Field Service Access\" permission in the target org\nPlease check https://help.salesforce.com/articleView?id=sf.fs_enable.htm&amp;type=5\n</code></pre>"},{"location":"sf-deployment-assistant/Unknown-user-permission/","title":"Unknown user permission (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Unknown-user-permission/#unknown-user-permission","title":"Unknown user permission","text":""},{"location":"sf-deployment-assistant/Unknown-user-permission/#detection","title":"Detection","text":"<ul> <li>String: <code>Unknown user permission:</code></li> </ul>"},{"location":"sf-deployment-assistant/Unknown-user-permission/#resolution","title":"Resolution","text":"<pre><code>You can:\n- enable the related permission in the target org\n- or remove references to the permission in source XML files (Probably a Profile or a Permission set)\n</code></pre>"},{"location":"sf-deployment-assistant/Unsupported-sharing-configuration/","title":"Unsupported sharing configuration (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Unsupported-sharing-configuration/#unsupported-sharing-configuration","title":"Unsupported sharing configuration","text":""},{"location":"sf-deployment-assistant/Unsupported-sharing-configuration/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>not supported for (.*) since it's org wide default is</code></li> </ul>"},{"location":"sf-deployment-assistant/Unsupported-sharing-configuration/#resolution","title":"Resolution","text":"<pre><code>Consistency error between {1} sharing settings and {1} object configuration\nPlease check https://salesforce.stackexchange.com/questions/260923/sfdx-deploying-contact-sharing-rules-on-a-fresh-deployment\nIf you already did that, please try again to run the job\n</code></pre>"},{"location":"sf-deployment-assistant/Variable-does-not-exist/","title":"Variable does not exist","text":"<p>title: \"Variable does not exist (Deployment assistant)\" description: \"How to solve Salesforce deployment error \\\"Error (.) Variable does not exist: (.) ((.*))\\\"\"</p>"},{"location":"sf-deployment-assistant/Variable-does-not-exist/#variable-does-not-exist","title":"Variable does not exist","text":""},{"location":"sf-deployment-assistant/Variable-does-not-exist/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Variable does not exist: (.*) \\((.*)\\)</code></li> </ul>"},{"location":"sf-deployment-assistant/Variable-does-not-exist/#resolution","title":"Resolution","text":"<pre><code>Apex error in {1} with unknown variable {2} at position {3}. If {2} is a class name, try to fix it, or maybe it is missing in the files or in package.xml !\n</code></pre>"},{"location":"sf-deployment-assistant/Visibility-is-not-allowed-for-type/","title":"Visibility is not allowed for type (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/Visibility-is-not-allowed-for-type/#visibility-is-not-allowed-for-type","title":"Visibility is not allowed for type","text":""},{"location":"sf-deployment-assistant/Visibility-is-not-allowed-for-type/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) set the visibility for a (.*) to Protected unless you are in a developer</code></li> </ul>"},{"location":"sf-deployment-assistant/Visibility-is-not-allowed-for-type/#resolution","title":"Resolution","text":"<pre><code>Update the visibility of {1} to \"Public\"\n</code></pre>"},{"location":"sf-deployment-assistant/XML-item-appears-more-than-once/","title":"XML item appears more than once (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/XML-item-appears-more-than-once/#xml-item-appears-more-than-once","title":"XML item appears more than once","text":""},{"location":"sf-deployment-assistant/XML-item-appears-more-than-once/#detection","title":"Detection","text":"<ul> <li>RegExp: <code>Error (.*) Field:(.*), value:(.*) appears more than once</code></li> </ul>"},{"location":"sf-deployment-assistant/XML-item-appears-more-than-once/#resolution","title":"Resolution","text":"<pre><code>You probably made an error while merging conflicts\nLook for {3} in the XML of {1}\nIf you see two {2} XML blocks with {3}, please decide which one you keep and remove the other one\n</code></pre>"},{"location":"sf-deployment-assistant/sharing-operation-already-in-progress/","title":"sharing operation already in progress (Deployment assistant)","text":""},{"location":"sf-deployment-assistant/sharing-operation-already-in-progress/#sharing-operation-already-in-progress","title":"sharing operation already in progress","text":""},{"location":"sf-deployment-assistant/sharing-operation-already-in-progress/#detection","title":"Detection","text":"<ul> <li>String: <code>sharing operation already in progress</code></li> </ul>"},{"location":"sf-deployment-assistant/sharing-operation-already-in-progress/#resolution","title":"Resolution","text":"<pre><code>You can not deploy multiple SharingRules at the same time. You can either:\n- Remove SharingOwnerRules and SharingRule from package.xml (so it becomes a manual operation)\n- Use sf hardis:work:save to generate a deploymentPlan in .sfdx-hardis.json,\n- If you are trying to create a scratch org, add DeferSharingCalc in features in project-scratch-def.json\n</code></pre>"}]}